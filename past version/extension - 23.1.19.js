game.import("extension", function(lib, game, ui, get, ai, _status) {
    var toClearByVersion = ["radiance_he020_hope", "radiance_ma020_hope", "radiance_un020_hope", "radiance_un005_helena", "radiance_hv004_reine", "radiance_un004_reine", "radiance_fr006_julia"];
    return {
        name: "星耀璨然",
        editable: false,
        content: function(config, pack) {
            if (!lib.watersky) lib.watersky = {};
            if (!lib.watersky.developer) lib.watersky.developer = false;
            if (!lib.watersky.packs) lib.watersky.packs = [];
            if (!lib.watersky.func) lib.watersky.func = {};
            if (!lib.watersky.custom) lib.watersky.custom = {};
            if (!lib.watersky.radiance) lib.watersky.radiance = {};
            lib.watersky.packs.add('radiance');

            var version = lib.extensionPack["星耀璨然"].version;
            lib.watersky.radiance.toClearByForce = []; // toClearByVersion

            lib.watersky.func.defaultWinRate = function(name) {
                if (!lib.config.radianceWinRateAccumulated) lib.config.radianceWinRateAccumulated = {};
                var database = lib.config.radianceWinRateAccumulated;
                if (!database.cleared) database.cleared = {};
                if (!database.cleared[version]) database.cleared[version] = [];
                var empty = {
                    player: {
                        zhu: 0,
                        zhu_win: 0,
                        zhu_lose: 0,
                        zhu_tie: 0,
                        zhong: 0,
                        zhong_win: 0,
                        zhong_lose: 0,
                        zhong_tie: 0,
                        zhong_death: 0,
                        fan: 0,
                        fan_win: 0,
                        fan_lose: 0,
                        fan_tie: 0,
                        fan_death: 0,
                        nei: 0,
                        nei_win: 0,
                        nei_lose: 0,
                        nei_tie: 0,
                        nei_solo: 0,
                    },
                    ai: {
                        zhu: 0,
                        zhu_win: 0,
                        zhu_lose: 0,
                        zhu_tie: 0,
                        zhu_side_win: 0,
                        zhu_side_lose: 0,
                        zhu_against: 0,
                        zhong: 0,
                        zhong_win: 0,
                        zhong_lose: 0,
                        zhong_tie: 0,
                        zhong_death: 0,
                        zhong_side_win: 0,
                        zhong_side_lose: 0,
                        zhong_against: 0,
                        fan: 0,
                        fan_win: 0,
                        fan_lose: 0,
                        fan_tie: 0,
                        fan_death: 0,
                        fan_side_win: 0,
                        fan_side_lose: 0,
                        fan_against: 0,
                        nei: 0,
                        nei_win: 0,
                        nei_lose: 0,
                        nei_tie: 0,
                        nei_solo: 0,
                    },
                };
                var oldkeys = {
                    zhu_side: 'zhu_side_win',
                    zhong_side: 'zhong_side_win',
                    fan_side: 'fan_side_win',
                };
                if (lib.watersky.radiance.toClearByForce.contains(name) && lib.watersky.developer === true) {
                    database[name] = {};
                };
                // (lib.watersky.radiance.toClearByVersion.contains(name) && (!database.cleared[version].contains(name) || lib.watersky.developer === true)) {
                //   if (lib.watersky.developer !== true) database.cleared[version].add(name);
                //   database[name] = {};

                if (!database[name]) {
                    database[name] = {};
                };
                for (var map in empty) {
                    if (!database[name][map]) database[name][map] = {};
                    for (var key in empty[map]) {
                        if (typeof database[name][map][key] != 'number') database[name][map][key] = 0;
                    };
                    for (var key in oldkeys) {
                        if (typeof database[name][map][key] === 'number') {
                            var newkey = oldkeys[key];
                            database[name][map][newkey] += database[name][map][key];
                            delete database[name][map][key];
                        };
                    };
                };
                game.saveConfigValue("radianceWinRateAccumulated");
            };
            lib.watersky.func.checkPacks = function(player, pack) {
                if (!player) return false;

                if (Array.isArray(pack)) {
                    for (var i = 0; i < pack.length; i++) {
                        if (lib.watersky.func.checkPacks(player, pack[i])) return true;
                    }
                } else if (typeof pack == 'object') {
                    var keys = Object.keys(pack);
                    for (var i = 0; i < keys.length; i++) {
                        if (lib.watersky.func.checkPacks(player, keys[i])) return true;
                        if (lib.watersky.func.checkPacks(player, pack[keys[i]])) return true;
                    }
                } else if (typeof pack == 'string') {
                    if (player.name && player.name.indexOf(pack) == 0) return true;
                    if (player.name1 && player.name1.indexOf(pack) == 0) return true;
                    if (player.name2 && player.name2.indexOf(pack) == 0) return true;
                } else if (lib.watersky.packs) {
                    return lib.watersky.func.checkPacks(player, lib.watersky.packs);
                }
                return false;
            };
            lib.watersky.func.checkNames = function(player, name, packs, translate) {
                if (!player || !name) return false;
                if (packs && !lib.watersky.func.checkPacks(player, packs)) return false;

                if (Array.isArray(name)) {
                    for (var i = 0; i < name.length; i++) {
                        if (lib.watersky.func.checkNames(player, name[i], packs, translate)) return true;
                    }
                } else if (typeof name == 'object') {
                    var keys = Object.keys(name);
                    for (var i = 0; i < keys.length; i++) {
                        if (lib.watersky.func.checkNames(player, keys[i], packs, translate)) return true;
                        if (lib.watersky.func.checkNames(player, name[keys[i]], packs, translate)) return true;
                    }
                } else if (typeof name == 'string') {
                    if (player.name) {
                        if (player.name.indexOf(name) >= 0) return true;
                        if (translate && lib.translate[player.name] && lib.translate[player.name].indexOf(translate) >= 0) return true;
                    }
                    if (player.name1) {
                        if (player.name1.indexOf(name) >= 0) return true;
                        if (translate && lib.translate[player.name1] && lib.translate[player.name1].indexOf(translate) >= 0) return true;
                    }
                    if (player.name2) {
                        if (player.name2.indexOf(name) >= 0) return true;
                        if (translate && lib.translate[player.name2] && lib.translate[player.name2].indexOf(translate) >= 0) return true;
                    }
                };
                return false;
            };
            lib.watersky.func.findParent = function(evt, event) {
                if (typeof event != 'object') event = _status.event.getTrigger();
                if (typeof event != 'object') event = _status.event;
                if (evt == event) return true;
                var parent = evt.parent;
                if (evt._modparent && game.online) {
                    parent = evt._modparent;
                };
                for (var i = 0; i < 30; i++) {
                    if (!parent) return false;
                    if (parent == event) return true;
                    parent = parent.parent;
                };
                return false;
            };
            lib.watersky.func.logParents = function(event, num) {
                var current = event;
                for (var i = 0; i <= num; i++) {
                    if (!current) {
                        game.log("没有第", i, "个父事件");
                        return i;
                    }
                    game.log("第 ", i, " 个父事件为： " + current.name, "  ", current.name);
                    current = current.getParent();
                }
                return num;
            };
            lib.watersky.func.isPrime = function(num, one) {
                if (typeof num != 'number') return false;
                for (var i = 2; i < num; i++) {
                    if (num % i === 0) return false;
                }
                return num > 1 || one;
            };
            lib.watersky.func.getWeaponRange = function(card) {
                if (get.type(card) != 'equip') return;
                if (get.subtype(card) != 'equip1') return;
                var name = get.name(card);
                var info = lib.card[name];
                if (info && info.distance && info.distance.attackFrom) {
                    return -info.distance.attackFrom + 1;
                }
                return 1;
            };
            lib.watersky.func.findGCD = function(num1, num2) {
                var t = Math.min(Math.abs(num1), Math.abs(num2));
                for (var i = t; i > 1; i--)
                    if (num1 % i === 0 && num2 % i === 0) return i;
                return 1;
            };
            lib.watersky.func.isSameCard = function(card1, card2) {
                if (get.nature(card1) || get.nature(card2)) {
                    if (get.nature(card1) !== get.nature(card2)) return false
                }
                return (get.suit(card1) === get.suit(card2) && get.number(card1) === get.number(card2) && get.name(card1) === get.name(card2));
            };
            lib.watersky.func.radianceSkillActionTag = function(name, tag, player, condition, phase) {
                if (typeof name !== 'string' || typeof tag !== 'string') return -5;
                var info = lib.skill[name];
                if (!info || !info.action_tag) return -4;
                if (typeof phase == 'string' && ['in', 'out'].contains(phase) && !info.action_tag[phase]) return -2;
                var value = info.action_tag[tag];
                if (!value) return -1;
                if (typeof value == 'function') value = value(name, tag, player, condition, phase);
                if (Array.isArray(value)) {
                    return [value[0], (value[1] || 0)];
                } else if (typeof value === 'number') {
                    return value;
                } else if (typeof value === 'boolean') {
                    if (value === true) return 1;
                    return 0;
                } else if (parseInt(value)) {
                    return parseInt(value);
                };
                return 0;
            };
            lib.watersky.func.radiancePlayerActionTag = function(player, tag, condition, phase, has, filter) {
                if (get.itemtype(player) != 'player') {
                    if (has === true) return false;
                    return -6;
                };
                if (typeof filter != 'function') {
                    filter = function(skill) {
                        return true;
                    };
                };
                var val = 0;
                var skills = player.getSkills(true, false, true);
                for (var i = 0; i < skills.length; i++) {
                    if (!filter(skills[i])) continue;
                    var result = lib.watersky.func.radianceSkillActionTag(skills[i], tag, player, condition, phase);
                    if (Array.isArray(result) && result.length > 1) {
                        if (val === 0) val = 1;
                        val = val * result[0] + result[1];
                    } else if (result > 0) {
                        if (val === 0) val = 1;
                        val *= result;
                    };
                    if (val < 0) break;
                };
                if (has === true) {
                    return val > 0;
                };
                if (has !== false) {
                    return Math.max(0, val);
                };
                return val;
            };
            lib.element.player.hasActionTag = function(tag, condition, phase, filter) {
                return lib.watersky.func.radiancePlayerActionTag(this, tag, condition, phase, true, filter);
            };
            lib.watersky.func.parValue = function(card, player) {
                if (get.itemtype(player) != 'player') player = _status.event.player;
                if (!lib.filter.cardEnabled(card, player)) return -30;
                var suits = ['club', 'diamond', 'heart', 'spade'];
                var base = (suits.indexOf(get.suit(card, player)) + 1) * 6;
                if (player.hasActionTag('parValue', card) > 1) base += player.hasActionTag('parValue', card);
                if (game.hasPlayer(function(current) {
                        return get.attitude(player, current) < 0 && current.hasActionTag('compare', null, null, true);
                    }) && typeof get.number(card, player) == 'number') {
                    base += 2 * get.number(card, player);
                };
                if (get.subtype(card) == 'equip1') base += Math.min(lib.watersky.func.getWeaponRange(card), 1 + game.countPlayer() / 2);
                if (card.nature) {
                    if (game.hasPlayer(function(current) {
                            return get.attitude(player, current) < 0 && player.inRange(current) && current.hasActionTag('noNormal', card, null, true);
                        })) {
                        base += 12;
                    } else if (game.hasPlayer(function(current) {
                            return get.attitude(player, current) < 0 && player.inRange(current) && current.hasActionTag('noNature', card, null, true);
                        })) {
                        base -= 12;
                    } else {
                        base += 12;
                    };
                };
                return base;
            };
            get.parValue = function(card, player) {
                if (get.itemtype(player) != 'player') player = _status.event.player;
                return lib.watersky.func.parValue(card, player);
            };

            if (config.radianceGroupSetting !== 'replace') {
                lib.watersky.func.originalIsDouble = get.is.double;
                get.is.double = function(name, array) {
                    if (!lib.character[name] || !lib.character[name][4] || (name.indexOf('gz_') != 0 && name.indexOf('db_') != 0 && name.indexOf('radiance') != 0)) return false;
                    for (var i of lib.character[name][4]) {
                        if (i.indexOf('doublegroup:') == 0) {
                            if (!array) return true;
                            return i.split(':').slice(1);
                        }
                    }
                };
            };
            lib.element.player.getAlteredValue = function(card, list1, list2, condition) {
                var player = this;
                var value;
                var list = [];
                if (list1 !== false) {
                    if (get.itemtype(list1) == 'position') list1 = player.getCards(list1);
                    if (!Array.isArray(list1)) list1 = [];
                    list.addArray(list1);
                };
                if (list2 !== false) {
                    if (get.itemtype(list2) == 'position') list2 = player.getCards(list2);
                    if (!Array.isArray(list2)) list2 = player.getCards('hes');
                    list.addArray(list2);
                };
                if (Array.isArray(card)) {
                    if (!card.length) return 0;
                    value = 0;
                    for (var i = 0; i < card.length; i++) {
                        value += player.getAlteredValue(card[i], card, list, condition);
                    };
                    return value / Math.sqrt(card.length);
                };
                var aii = get.info(card).ai;
                if (aii && aii.value) {
                    value = aii.value;
                } else if (aii && aii.basic) {
                    value = aii.basic.value || aii.basic.equipValue;
                };
                var cards = list.filter(function(cardx) {
                    if (get.type(card, player) == 'equip') return get.subtype(card, player) == get.subtype(cardx, player);
                    return get.name(card, player) == get.name(cardx, player);
                });
                var contained = true;
                if (!cards.contains(card)) {
                    contained = false;
                    cards.push(card);
                };
                cards.sort(function(card1, card2) {
                    return get.parValue(card2) - get.parValue(card1);
                });
                var index = cards.indexOf(card) + 1;
                var result = 0;
                if (typeof value == 'function') {
                    result = value(card, player, index, 'raw');
                } else if (typeof value == 'number') {
                    result = value;
                } else if (Array.isArray(value)) {
                    result = value[0];
                };
                if (get.name(card, player) == 'tao') {
                    index -= 0.5;
                } else if (player.isEmpty(get.subtype(card, player))) {
                    index -= 0.4 / cards.length;
                };
                result = game.checkMod(player, card, result, 'aiValue', player);
                result = result / index;
                return result;
            };
            get.alteredValue = function(card, player, list1, list2, condition) {
                if (get.itemtype(player) != 'player') player = get.owner(get.itemtype(card) == 'cards' ? card[0] : card);
                if (get.itemtype(player) != 'player') player = _status.event.player;
                return player.getAlteredValue(card, list1, list2, condition);
            };
            lib.element.player.addJunhun = function(num) {
                if (!num) num = 1;
                this.addMark('radiance_junhun', num);
                game.addGlobalSkill('radiance_junhun_sha', this);
                game.addGlobalSkill('radiance_junhun_damage', this);
            };
            lib.element.player.canRespondTo = function(trigger, card, extra) {
                if (trigger.name != 'useCard') trigger = trigger.getParent('useCard', true);
                if (!trigger) return false;
                if (trigger.excluded.contains(player)) return true;
                if (trigger.directHit.contains(player)) return false;

                if (!card) card = trigger.card;
                if (!card) card = _status.event.card;
                if (!card) return false;

                var player = this;
                var skills = player.getSkills(true).concat(lib.skill.global);
                game.expandSkills(skills);

                var id = player.playerid;
                var map = trigger.customArgs;
                var need = 1;
                var have = 0;

                if (get.type(card, trigger.player) == 'trick' && !trigger.nowuxie) {
                    if (player.countCards('hs', function(cardx) {
                            return lib.filter.cardEnabled(cardx, player, 'forceEnable') && get.name(cardx, player) == 'wuxie';
                        }) > 0) return true;
                    for (var i = 0; i < skills.length; i++) {
                        var info = get.info(skills[i]);
                        if (info.viewAs && typeof info.viewAs != 'function' && info.viewAs.name == 'wuxie') {
                            if (!info.viewAsFilter || info.viewAsFilter(player)) {
                                return true;
                            }
                        } else {
                            var hiddenCard = get.info(skills[i]).hiddenCard;
                            if (typeof hiddenCard == 'function' && hiddenCard(player, 'wuxie')) {
                                return true;
                            };
                        };
                    };
                };
                if (get.tag(card, 'respondSha')) {
                    if (map[id] && typeof map[id].shaReq == 'number') need = map[id].shaReq;
                    have = player.countCards('hs', function(cardx) {
                        return lib.filter.cardEnabled(cardx, player, 'forceEnable') && ['sha', 'hufu', 'yuchanqian'].contains(get.name(cardx, player));
                    });
                    if (player.hasSkillTag('respondSha', true, 'respond', true)) {
                        have++;
                    };
                    if (have >= need) {
                        return true;
                    };
                };
                if (get.tag(card, 'respondShan')) {
                    if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                    have = player.countCards('hs', function(cardx) {
                        return lib.filter.cardEnabled(cardx, player, 'forceEnable') && ['shan', 'hufu'].contains(get.name(cardx, player));
                    });
                    if (player.hasSkillTag('respondShan', true, null, true)) have++;
                    if (have >= need) {
                        return true;
                    };
                };
                return false;
            };

            var style_magic = document.createElement('style');
            style_magic.innerHTML = ".player .identity[data-color='radiance_group_magic'],";
            style_magic.innerHTML += "div[data-nature='radiance_group_magic'],";
            style_magic.innerHTML += "span[data-nature='radiance_group_magic'] {text-shadow: black 0 0 1px,rgba(64, 160, 224, 1) 0 0 2px,rgba(64, 160, 224, 1) 0 0 5px,rgba(64, 160, 224, 1) 0 0 10px,rgba(64, 160, 224, 1) 0 0 10px}";
            style_magic.innerHTML += "div[data-nature='radiance_group_magicm'],";
            style_magic.innerHTML += "span[data-nature='radiance_group_magicm'] {text-shadow: black 0 0 1px,rgba(64, 160, 224, 1) 0 0 2px,rgba(64, 160, 224, 1) 0 0 5px,rgba(64, 160, 224, 1) 0 0 5px,rgba(64, 160, 224, 1) 0 0 5px,black 0 0 1px;}";
            style_magic.innerHTML += "div[data-nature='radiance_group_magicmm'],";
            style_magic.innerHTML += "span[data-nature='radiance_group_magicmm'] {text-shadow: black 0 0 1px,rgba(64, 160, 224, 1) 0 0 2px,rgba(64, 160, 224, 1) 0 0 2px,rgba(64, 160, 224, 1) 0 0 2px,rgba(64, 160, 224, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_magic);
            lib.group.push('radiance_group_magic');
            lib.translate.radiance_group_magic = '法';
            lib.translate.radiance_group_magic2 = '法';
            lib.groupnature.radiance_group_magic = 'radiance_group_magic';

            var style_heng = document.createElement('style');
            style_heng.innerHTML = ".player .identity[data-color='radiance_group_heng'],";
            style_heng.innerHTML += "div[data-nature='radiance_group_heng'],";
            style_heng.innerHTML += "span[data-nature='radiance_group_heng'] {text-shadow: black 0 0 1px,rgba(240, 64, 64, 1) 0 0 2px,rgba(240, 64, 64, 1) 0 0 5px,rgba(240, 64, 64, 1) 0 0 10px,rgba(240, 64, 64, 1) 0 0 10px}";
            style_heng.innerHTML += "div[data-nature='radiance_group_hengm'],";
            style_heng.innerHTML += "span[data-nature='radiance_group_hengm'] {text-shadow: black 0 0 1px,rgba(240, 64, 64, 1) 0 0 2px,rgba(240, 64, 64, 1) 0 0 5px,rgba(240, 64, 64, 1) 0 0 5px,rgba(240, 64, 64, 1) 0 0 5px,black 0 0 1px;}";
            style_heng.innerHTML += "div[data-nature='radiance_group_hengmm'],";
            style_heng.innerHTML += "span[data-nature='radiance_group_hengmm'] {text-shadow: black 0 0 1px,rgba(240, 64, 64, 1) 0 0 2px,rgba(240, 64, 64, 1) 0 0 2px,rgba(240, 64, 64, 1) 0 0 2px,rgba(240, 64, 64, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_heng);
            lib.group.push('radiance_group_heng');
            lib.translate.radiance_group_heng = '衡';
            lib.translate.radiance_group_heng2 = '衡';
            lib.groupnature.radiance_group_heng = 'radiance_group_heng';

            var style_union = document.createElement('style');
            style_union.innerHTML = ".player .identity[data-color='radiance_group_union'],";
            style_union.innerHTML += "div[data-nature='radiance_group_union'],";
            style_union.innerHTML += "span[data-nature='radiance_group_union'] {text-shadow: black 0 0 1px,rgba(112, 255, 112, 1) 0 0 2px,rgba(112, 255, 112, 1) 0 0 5px,rgba(112, 255, 112, 1) 0 0 10px,rgba(112, 255, 112, 1) 0 0 10px}";
            style_union.innerHTML += "div[data-nature='radiance_group_unionm'],";
            style_union.innerHTML += "span[data-nature='radiance_group_unionm'] {text-shadow: black 0 0 1px,rgba(112, 255, 112, 1) 0 0 2px,rgba(112, 255, 112, 1) 0 0 5px,rgba(112, 255, 112, 1) 0 0 5px,rgba(112, 255, 112, 1) 0 0 5px,black 0 0 1px;}";
            style_union.innerHTML += "div[data-nature='radiance_group_unionmm'],";
            style_union.innerHTML += "span[data-nature='radiance_group_unionmm'] {text-shadow: black 0 0 1px,rgba(112, 255, 112, 1) 0 0 2px,rgba(112, 255, 112, 1) 0 0 2px,rgba(112, 255, 112, 1) 0 0 2px,rgba(112, 255, 112, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_union);
            lib.group.push('radiance_group_union');
            lib.translate.radiance_group_union = '联';
            lib.translate.radiance_group_union2 = '联';
            lib.groupnature.radiance_group_union = 'radiance_group_union';

            var style_church = document.createElement('style');
            style_church.innerHTML = ".player .identity[data-color='radiance_group_church'],";
            style_church.innerHTML += "div[data-nature='radiance_group_church'],";
            style_church.innerHTML += "span[data-nature='radiance_group_church'] {text-shadow: black 0 0 1px,rgba(255, 255, 0, 1) 0 0 2px,rgba(255, 255, 0, 1) 0 0 5px,rgba(255, 255, 0, 1) 0 0 10px,rgba(255, 255, 0, 1) 0 0 10px}";
            style_church.innerHTML += "div[data-nature='radiance_group_churchm'],";
            style_church.innerHTML += "span[data-nature='radiance_group_churchm'] {text-shadow: black 0 0 1px,rgba(255, 255, 0, 1) 0 0 2px,rgba(255, 255, 0, 1) 0 0 5px,rgba(255, 255, 0, 1) 0 0 5px,rgba(255, 255, 0, 1) 0 0 5px,black 0 0 1px;}";
            style_church.innerHTML += "div[data-nature='radiance_group_churchmm'],";
            style_church.innerHTML += "span[data-nature='radiance_group_churchmm'] {text-shadow: black 0 0 1px,rgba(255, 255, 0, 1) 0 0 2px,rgba(255, 255, 0, 1) 0 0 2px,rgba(255, 255, 0, 1) 0 0 2px,rgba(255, 255, 0, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_church);
            lib.group.push('radiance_group_church');
            lib.translate.radiance_group_church = '教';
            lib.translate.radiance_group_church2 = '教';
            lib.groupnature.radiance_group_church = 'radiance_group_church';


            var style_heaven = document.createElement('style');
            style_heaven.innerHTML = ".player .identity[data-color='radiance_group_heaven'],";
            style_heaven.innerHTML += "div[data-nature='radiance_group_heaven'],";
            style_heaven.innerHTML += "span[data-nature='radiance_group_heaven'] {text-shadow: black 0 0 1px,rgba(255, 255, 96, 1) 0 0 2px,rgba(255, 255, 96, 1) 0 0 5px,rgba(255, 255, 96, 1) 0 0 10px,rgba(255, 255, 96, 1) 0 0 10px}";
            style_heaven.innerHTML += "div[data-nature='radiance_group_heavenm'],";
            style_heaven.innerHTML += "span[data-nature='radiance_group_heavenm'] {text-shadow: black 0 0 1px,rgba(255, 255, 96, 1) 0 0 2px,rgba(255, 255, 96, 1) 0 0 5px,rgba(255, 255, 96, 1) 0 0 5px,rgba(255, 255, 96, 1) 0 0 5px,black 0 0 1px;}";
            style_heaven.innerHTML += "div[data-nature='radiance_group_heavenmm'],";
            style_heaven.innerHTML += "span[data-nature='radiance_group_heavenmm'] {text-shadow: black 0 0 1px,rgba(255, 255, 96, 1) 0 0 2px,rgba(255, 255, 96, 1) 0 0 2px,rgba(255, 255, 96, 1) 0 0 2px,rgba(255, 255, 96, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_heaven);
            lib.group.push('radiance_group_heaven');
            lib.translate.radiance_group_heaven = '圣';
            lib.translate.radiance_group_heaven2 = '圣';
            lib.groupnature.radiance_group_heaven = 'radiance_group_heaven';

            var style_underworld = document.createElement('style');
            style_underworld.innerHTML = ".player .identity[data-color='radiance_group_underworld'],";
            style_underworld.innerHTML += "div[data-nature='radiance_group_underworld'],";
            style_underworld.innerHTML += "span[data-nature='radiance_group_underworld'] {text-shadow: black 0 0 1px,rgba(208, 0, 208, 1) 0 0 2px,rgba(208, 0, 208, 1) 0 0 5px,rgba(208, 0, 208, 1) 0 0 10px,rgba(208, 0, 208, 1) 0 0 10px}";
            style_underworld.innerHTML += "div[data-nature='radiance_group_underworldm'],";
            style_underworld.innerHTML += "span[data-nature='radiance_group_underworldm'] {text-shadow: black 0 0 1px,rgba(208, 0, 208, 1) 0 0 2px,rgba(208, 0, 208, 1) 0 0 5px,rgba(208, 0, 208, 1) 0 0 5px,rgba(208, 0, 208, 1) 0 0 5px,black 0 0 1px;}";
            style_underworld.innerHTML += "div[data-nature='radiance_group_underworldmm'],";
            style_underworld.innerHTML += "span[data-nature='radiance_group_underworldmm'] {text-shadow: black 0 0 1px,rgba(208, 0, 208, 1) 0 0 2px,rgba(208, 0, 208, 1) 0 0 2px,rgba(208, 0, 208, 1) 0 0 2px,rgba(208, 0, 208, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_underworld);
            lib.group.push('radiance_group_underworld');
            lib.translate.radiance_group_underworld = '冥';
            lib.translate.radiance_group_underworld2 = '冥';
            lib.groupnature.radiance_group_underworld = 'radiance_group_underworld';

            var style_free = document.createElement('style');
            style_free.innerHTML = ".player .identity[data-color='radiance_group_free'],";
            style_free.innerHTML += "div[data-nature='radiance_group_free'],";
            style_free.innerHTML += "span[data-nature='radiance_group_free'] {text-shadow: black 0 0 1px,rgba(208, 208, 208, 1) 0 0 2px,rgba(208, 208, 208, 1) 0 0 5px,rgba(208, 208, 208, 1) 0 0 10px,rgba(208, 208, 208, 1) 0 0 10px}";
            style_free.innerHTML += "div[data-nature='radiance_group_freem'],";
            style_free.innerHTML += "span[data-nature='radiance_group_freem'] {text-shadow: black 0 0 1px,rgba(208, 208, 208, 1) 0 0 2px,rgba(208, 208, 208, 1) 0 0 5px,rgba(208, 208, 208, 1) 0 0 5px,rgba(208, 208, 208, 1) 0 0 5px,black 0 0 1px;}";
            style_free.innerHTML += "div[data-nature='radiance_group_freemm'],";
            style_free.innerHTML += "span[data-nature='radiance_group_freemm'] {text-shadow: black 0 0 1px,rgba(208, 208, 208, 1) 0 0 2px,rgba(208, 208, 208, 1) 0 0 2px,rgba(208, 208, 208, 1) 0 0 2px,rgba(208, 208, 208, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_free);
            lib.group.push('radiance_group_free');
            lib.translate.radiance_group_free = '散';
            lib.translate.radiance_group_free2 = '散';
            lib.groupnature.radiance_group_free = 'radiance_group_free';

            var style_lost = document.createElement('style');
            style_lost.innerHTML = ".player .identity[data-color='radiance_group_lost'],";
            style_lost.innerHTML += "div[data-nature='radiance_group_lost'],";
            style_lost.innerHTML += "span[data-nature='radiance_group_lost'] {text-shadow: black 0 0 1px,rgba(48, 255, 255, 1) 0 0 2px,rgba(48, 255, 255, 1) 0 0 5px,rgba(48, 255, 255, 1) 0 0 10px,rgba(48, 255, 255, 1) 0 0 10px}";
            style_lost.innerHTML += "div[data-nature='radiance_group_lostm'],";
            style_lost.innerHTML += "span[data-nature='radiance_group_lostm'] {text-shadow: black 0 0 1px,rgba(48, 255, 255, 1) 0 0 2px,rgba(48, 255, 255, 1) 0 0 5px,rgba(48, 255, 255, 1) 0 0 5px,rgba(48, 255, 255, 1) 0 0 5px,black 0 0 1px;}";
            style_lost.innerHTML += "div[data-nature='radiance_group_lostmm'],";
            style_lost.innerHTML += "span[data-nature='radiance_group_lostmm'] {text-shadow: black 0 0 1px,rgba(48, 255, 255, 1) 0 0 2px,rgba(48, 255, 255, 1) 0 0 2px,rgba(48, 255, 255, 1) 0 0 2px,rgba(48, 255, 255, 1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style_lost);
            lib.group.push('radiance_group_lost');
            lib.translate.radiance_group_lost = '遗';
            lib.translate.radiance_group_lost2 = '遗';
            lib.groupnature.radiance_group_lost = 'radiance_group_lost';

            if (config.radianceOnly) {
                lib.watersky.func.addCharacterPack = game.addCharacterPack;
                game.addCharacterPack = function(pack, packagename) {
                    lib.watersky.func.addCharacterPack(pack, packagename);
                    for (var i in lib.character) {
                        if (i.indexOf('radiance') == 0) continue;
                        if (!lib.character[i][4]) lib.character[i].add([]);
                        lib.character[i][4].add('unseen');
                    };
                };
            };
            if (config.radianceGroupSetting == "select") {
                lib.skill._radiance_groupchoose = {
                    trigger: {
                        global: ["gameStart"],
                    },
                    firstDo: true,
                    forced: true,
                    fixed: true,
                    superCharlotte: true,
                    charlotte: true,
                    popup: false,
                    priority: 99999,
                    filter: function(event, player) {
                        var name = player.name;
                        if (name.indexOf('radiance') != 0) return false;
                        var info = lib.character[name];
                        if (!info) {
                            info = lib.character[player.name1];
                            if (!info) {
                                return false;
                            }
                        }
                        if (!['radiance_group_free', 'radiance_group_underworld', 'radiance_group_heaven', 'radiance_group_lost'].contains(info[1])) return false;
                        return true;
                    },
                    content: function() {
                        'step 0'
                        var group = [];
                        var choices = [];
                        var basic = ['wei', 'shu', 'wu', 'qun', 'jin',
                            'radiance_group_magic', 'radiance_group_heng', 'radiance_group_union', 'radiance_group_church',
                        ];
                        for (var i in lib.character) {
                            if (Array.isArray(lib.character[i][4]) && (lib.character[i][4].contains('unseen') || lib.character[i][4].contains('unseen'))) continue;
                            group.add(lib.character[i][1]);
                        }
                        for (var i = 0; i < basic.length; i++) {
                            if (group.contains(basic[i])) {
                                choices.push(basic[i]);
                                group.remove(basic[i]);
                            }
                        }
                        choices = choices.concat(group);
                        choices.removeArray(['shen', 'radiance_group_free', 'radiance_group_underworld', 'radiance_group_heaven']);
                        event.choices = choices;
                        player.chooseControl(choices).set('prompt', '请选择变为一个势力').set('ai', function(event, player) {
                            var choices = event.choices;
                            var zhu = get.zhu(player);
                            if (zhu && zhu != player) {
                                if (zhu.group && choices.contains(zhu.group)) return zhu.group;
                            }
                            var name = player.name;
                            return choices.randomGet();
                            var info = lib.character[name];
                            if (!info) {
                                info = lib.character[player.name1];
                                if (!info) {
                                    return choices.randomGet();
                                }
                            }
                            var cset = info[4];
                            var str;
                            if (cset) {
                                if (cset.contains('group_jin') && !lib.config['extension_校园杀_nsfzxysGroupShiChange']) {
                                    str = 'jin';
                                } else if (cset.contains('group_wei')) {
                                    str = 'wei';
                                } else if (cset.contains('group_shu')) {
                                    str = 'shu';
                                } else if (cset.contains('group_wu')) {
                                    str = 'wu';
                                } else if (cset.contains('group_qun')) {
                                    str = 'qun';
                                }
                                if (str) str = nsfzxys_grouprelation(str, lib.config['extension_校园杀_nsfzxysGroupTKChange']);
                                if (str && choices.contains(str)) return str;
                            }
                            return choices.randomGet();
                        });
                        'step 1'
                        player.changeGroup(result.control, false);
                        //player.group = result.control;
                    },
                };
            };
            if (config.radianceEnhanceZhu && !game.enhanceZhu) {
                game.enhanceZhu = true;
                lib.skill._radiance_enhancezhu = {
                    trigger: {
                        global: ['gameStart'],
                    },
                    forced: true,
                    fixed: true,
                    superCharlotte: true,
                    charlotte: true,
                    popup: false,
                    firstDo: true,
                    priority: 300000,
                    filter: function(event, player, name) {
                        var zhu = get.zhu(player);
                        return player == zhu;
                    },
                    content: function() {
                        'step 0'
                        player.addSkill('radiance_zhu');
                        var num = get.population('zhong');
                        if (player.identity == 'rZhu') num = get.population('rZhong') + get.population('bNei');
                        if (player.identity == 'bZhu') num = get.population('bZhong') + get.population('rNei');
                        player.maxHp += num;
                        player.hp += num;
                        player.update;
                    },
                };
            };

            // 滴炎尘气耀暮
            // Pack
            var radiance_pack = {
                character: {
                    "radiance_ma001_clark": ["male", "radiance_group_magic", 4, ["radiance_bofa", "radiance_xuehui"],
                        ["zhu"]
                    ],
                    "radiance_ma002_dai": ["male", "radiance_group_magic", 3, ["radiance_tianyi", "radiance_pofa"],
                        []
                    ],
                    "radiance_ma004_watersky": ["female", "radiance_group_magic", 3, ["radiance_zhisu", "radiance_guiji"],
                        []
                    ],
                    "radiance_ma005_maria": ["female", "radiance_group_magic", 3, ["radiance_aofa", "radiance_jingyao"],
                        [], 'qun'
                    ],
                    "radiance_ma007_tima": ["female", "radiance_group_magic", 3, ["radiance_lingyao", "radiance_mingyong"],
                        []
                    ],
                    "radiance_ma009_draco": ["male", "radiance_group_magic", 4, ["radiance_yingcai", "radiance_tulong"],
                        [], 'shu'
                    ],
                    "radiance_ma010_ciel": ["female", "radiance_group_magic", 3, ["radiance_shoushu", "radiance_qiongyu", "radiance_tingyuan"],
                        ["zhu"]
                    ],
                    "radiance_ma011_zero": ["female", "radiance_group_magic", 3, ["radiance_fengdong", "radiance_jingti"],
                        []
                    ],
                    "radiance_ma012_grey": ["male", "radiance_group_magic", 3, ["radiance_heidong", "radiance_xuling"],
                        []
                    ],
                    "radiance_ma013_einxis": ["male", "radiance_group_magic", 4, ["radiance_mojian", "radiance_guanduan", "radiance_cangkong"],
                        [], 'qun'
                    ],
                    "radiance_ma014_shirona": ["female", "radiance_group_magic", 3, ["radiance_ponian", "radiance_hongguan"],
                        [], 'wu'
                    ],
                    "radiance_ma015_luia": ["female", "radiance_group_magic", 4, ["radiance_wanling", "radiance_fuxing", "radiance_cheli"],
                        [], 'shen'
                    ],
                    "radiance_ma017_ginga": ["female", "radiance_group_magic", 3, ["radiance_huangdao", "radiance_xingyi"],
                        []
                    ],
                    "radiance_ma020_hope": ["female", "radiance_group_magic", 3, ["radiance_jiegong", "radiance_hunji"],
                        []
                    ],
                    "radiance_ma021_raimund": ["male", "radiance_group_magic", 3, ["radiance_xianggan", "radiance_zhihuan"],
                        []
                    ],
                    "radiance_ma022_raven": ["male", "radiance_group_magic", 4, ["radiance_weiguan", "radiance_jiancai"],
                        []
                    ],
                    "radiance_ma023_blair": ["female", "radiance_group_magic", 7, ["radiance_juzhu"],
                        []
                    ],

                    "radiance_he001_xueli": ["male", "radiance_group_heng", 4, ["radiance_yanzhen", "radiance_hongwei", "radiance_hunlie", "radiance_shangwu"],
                        ["zhu"]
                    ],
                    "radiance_he003_yuchizhongming": ["male", "radiance_group_heng", 4, ["radiance_weipo"],
                        []
                    ],
                    "radiance_he004_watersky": ["female", "radiance_group_heng", 3, ["radiance_zhenyan", "radiance_zhongluan"],
                        []
                    ],
                    "radiance_he005_zhaoshaolong": ["male", "radiance_group_heng", 4, ["radiance_xianzhuo", "radiance_danlue"],
                        []
                    ],
                    "radiance_he006_liuye": ["female", "radiance_group_heng", 3, ["radiance_feiren", "radiance_qiaowu"],
                        []
                    ],
                    "radiance_he007_xuanzhen": ["male", "radiance_group_heng", 4, ["radiance_shouwu", "radiance_zhige"],
                        []
                    ],
                    "radiance_he009_xuezhao": ["male", "radiance_group_heng", 4, ["radiance_tangong", "radiance_zhengbian"],
                        []
                    ],
                    "radiance_he010_xuening": ["male", "radiance_group_heng", 3, ["radiance_shouyue", "radiance_tongguan", "radiance_kuanzhi"],
                        ["zhu"]
                    ],
                    "radiance_he011_yangtaihou": ["female", "radiance_group_heng", 3, ["radiance_muyi", "radiance_shezheng"],
                        []
                    ],
                    "radiance_he014_litaicheng": ["male", "radiance_group_heng", 4, ["radiance_wubei", "radiance_douji"],
                        []
                    ],
                    "radiance_he015_lizhaoyue": ["female", "radiance_group_heng", 3, ["radiance_kaiyang", "radiance_wuying"],
                        [], 'shen'
                    ],
                    "radiance_he016_liyexin": ["male", "radiance_group_heng", 3, ["radiance_yingmu", "radiance_duanju"],
                        []
                    ],
                    "radiance_he017_qilian": ["male", "radiance_group_heng", 3, ["radiance_lunxin", "radiance_zhihe"],
                        ["doublegroup:radiance_group_heng:radiance_group_magic"], 'wei'
                    ],
                    "radiance_he018_daole": ["male", "radiance_group_heng", 4, ["radiance_huhuo"],
                        [], 'qun'
                    ],
                    "radiance_he020_hope": ["female", "radiance_group_heng", 3, ["radiance_fenggong", "radiance_daoqing"],
                        []
                    ],
                    "radiance_he021_hongjisheng": ["male", "radiance_group_heng", 3, ["radiance_feiru", "radiance_modao", "radiance_bufo"],
                        []
                    ],

                    "radiance_un001_richard": ["male", "radiance_group_union", 3, ["radiance_caopan", "radiance_tunji", "radiance_guchui"],
                        ["zhu"]
                    ],
                    "radiance_un002_schwarz": ["female", "radiance_group_union", 4, ["radiance_yingcai", "radiance_chizi"],
                        [], 'qun'
                    ],
                    "radiance_un003_yanghua": ["female", "radiance_group_union", 3, ["radiance_longduan", "radiance_suanjin"],
                        []
                    ],
                    "radiance_un004_reine": ["female", "radiance_group_union", 3, ["radiance_kongyin", "radiance_chuilian"],
                        []
                    ],
                    "radiance_un005_helena": ["female", "radiance_group_union", 3, ["radiance_douyan", "radiance_huanxing"],
                        ["doublegroup:radiance_group_union:radiance_group_magic"]
                    ],
                    "radiance_un006_cresa": ["female", "radiance_group_union", 3, ["radiance_huajian", "radiance_yueyin"],
                        []
                    ],
                    "radiance_un007_huangqiqiao": ["female", "radiance_group_union", 3, ["radiance_xianzhu", "radiance_gongqiao"],
                        []
                    ],
                    "radiance_un008_gelamo": ["male", "radiance_group_union", 4, ["radiance_lizhan", "radiance_nuyong"],
                        [], 'shu'
                    ],
                    "radiance_un010_lucas": ["male", "radiance_group_union", 4, ["radiance_dangshou", "radiance_xuancheng"],
                        ["zhu", 'forbidai']
                    ],
                    "radiance_un012_leo": ["male", "radiance_group_union", 3, ["radiance_qiangyi", "radiance_yuli"],
                        []
                    ],
                    "radiance_un013_gaius": ["male", "radiance_group_union", 4, ["radiance_mingke", "radiance_kongzhi"],
                        []
                    ],
                    "radiance_un015_vice": ["male", "radiance_group_union", 4, ["radiance_fengqi"],
                        []
                    ],
                    "radiance_un016_yimei": ["female", "radiance_group_union", 3, ["radiance_duomu", "radiance_shenju"],
                        []
                    ],
                    "radiance_un017_qiuguxun": ["female", "radiance_group_union", 3, ["radiance_tiancai", "radiance_hongse"],
                        []
                    ],
                    "radiance_un018_kinsey": ["female", "radiance_group_union", 3, ["radiance_huoluan", "radiance_zhemian"],
                        []
                    ],
                    "radiance_un020_hope": ["female", "radiance_group_union", 3, ["radiance_qugong", "radiance_keyi"],
                        []
                    ],
                    "radiance_un021_riemann": ["male", "radiance_group_union", 4, ["radiance_huikui", "radiance_cuihua"],
                        []
                    ],
                    "radiance_un023_achong": ["male", "radiance_group_union", 4, ["radiance_yusuo", "radiance_xiepo"],
                        []
                    ],

                    "radiance_ch001_agnes": ["female", "radiance_group_church", 3, ["radiance_tuanjie", "radiance_xisheng", "radiance_ganzhao"],
                        ["zhu"]
                    ],
                    "radiance_ch002_kelvin": ["male", "radiance_group_church", 4, ["radiance_chayi", "radiance_biyou"],
                        []
                    ],
                    "radiance_ch003_aurora": ["female", "radiance_group_church", 3, ["radiance_huizhao", "radiance_zhenjie"],
                        []
                    ],
                    "radiance_ch004_watersky": ["female", "radiance_group_church", 3, ["radiance_dianlu", "radiance_dizui"],
                        []
                    ],
                    "radiance_ch005_weiencao": ["male", "radiance_group_church", 4, ["radiance_suzheng"],
                        []
                    ],
                    "radiance_ch006_louise": ["female", "radiance_group_church", 3, ["radiance_xinxiang", "radiance_haoai"],
                        [], 'wei'
                    ],
                    "radiance_ch007_jacob": ["male", "radiance_group_church", 4, ["radiance_kejie", "radiance_shihui"],
                        [], 'wu'
                    ],
                    "radiance_ch009_richelieu": ["male", "radiance_group_church", 3, ["radiance_zhunjiao", "radiance_shiwei"],
                        [], 'wu'
                    ],
                    "radiance_ch010_paul": ["male", "radiance_group_church", 4, ["radiance_yangzhu", "radiance_youguo"],
                        ["zhu"]
                    ],
                    "radiance_ch011_janedoe": ["female", "radiance_group_church", 3, ["radiance_kaicheng", "radiance_chuhai", "radiance_junheng"],
                        []
                    ],
                    "radiance_ch013_fiore": ["female", "radiance_group_church", 3, ["radiance_yujian", "radiance_huaici"],
                        [], 'wu'
                    ],
                    "radiance_ch015_julia": ["female", "radiance_group_church", 2, ["radiance_yingling", "radiance_tianshu", "radiance_huiwang"],
                        [], 'shen'
                    ],
                    "radiance_ch017_endore": ["male", "radiance_group_church", 3, ["radiance_jinghun", "radiance_longjuan", "radiance_jiahu"],
                        [], 'wu'
                    ],
                    "radiance_ch020_hope": ["female", "radiance_group_church", 3, ["radiance_zhugong", "radiance_huimou"],
                        []
                    ],
                    "radiance_ch021_samael": ["male", "radiance_group_church", 4, ["radiance_waidao", "radiance_diankuang"],
                        ["doublegroup:radiance_group_church:radiance_group_underworld"], 'wei'
                    ],
                    "radiance_ch039_orchestra": ["male", "radiance_group_church", 4, ["radiance_jueren", "radiance_shengcheng"],
                        ['forbidai'], 'shu'
                    ],

                    "radiance_hv001_luchasiphael": ["male", "radiance_group_heaven", 4, ["radiance_quanneng", "radiance_duotian"],
                        ['forbidai']
                    ],
                    "radiance_hv002_aiffel": ["female", "radiance_group_heaven", 3, ["radiance_huiguang", "radiance_shengfa"],
                        []
                    ],
                    "radiance_hv003_norn": ["female", "radiance_group_heaven", 4, ["radiance_yunming", "radiance_tianze"],
                        []
                    ],
                    "radiance_hv004_reine": ["female", "radiance_group_heaven", 3, ["radiance_tianxuan", "radiance_xianyue"],
                        [], 'shen'
                    ],
                    "radiance_hv006_lixian": ["female", "radiance_group_heaven", 3, ["radiance_xianyi", "radiance_quhai"],
                        [], 'shu'
                    ],
                    "radiance_hv007_yinghe": ["female", "radiance_group_heaven", 3, ["radiance_heyu", "radiance_xianci"],
                        [], 'wei'
                    ],
                    "radiance_hv012_lysander": ["male", "radiance_group_heaven", 4, ["radiance_shengyu", "radiance_shilian"],
                        []
                    ],
                    "radiance_hv015_veronia": ["female", "radiance_group_heaven", 3, ["radiance_qiongguang", "radiance_tianji"],
                        [], 'shen'
                    ],


                    "radiance_ud002_agares": ["male", "radiance_group_underworld", 4, ["radiance_siqi", "radiance_hunduan"],
                        [], 'wu'
                    ],
                    "radiance_ud003_youfa": ["male", "radiance_group_underworld", 4, ["radiance_yindun", "radiance_huoshi"],
                        [], 'wei'
                    ],
                    "radiance_ud004_rein": ["female", "radiance_group_underworld", 3, ["radiance_jiguang", "radiance_tianquan", "radiance_jimie"],
                        [], 'shen'
                    ],
                    "radiance_ud005_doris": ["female", "radiance_group_underworld", "1/3", ["radiance_cancun", "radiance_shangyu"],
                        [], 'wu'
                    ],
                    "radiance_ud006_pestilence": ["male", "radiance_group_underworld", 4, ["radiance_wenyi"],
                        []
                    ],
                    "radiance_ud007_wangruize": ["male", "radiance_group_underworld", 3, ["radiance_yujia", "radiance_jiayi"],
                        [], 'wei'
                    ],
                    "radiance_ud008_rosa": ["female", "radiance_group_underworld", 3, ["radiance_moxiang", "radiance_zaichun"],
                        [], 'wei'
                    ],
                    "radiance_ud009_xunsishen": ["male", "radiance_group_underworld", 4, ["radiance_zhuisi", "radiance_nanming"],
                        []
                    ],
                    "radiance_ud010_wheeloffortune": ["none", "radiance_group_underworld", 4, ["radiance_tingzhi", "radiance_sansheng"],
                        [], 'wei'
                    ],
                    "radiance_ud011_crimsoul": ["male", "radiance_group_underworld", 4, ["radiance_huisheng", "radiance_yuanhun"],
                        [], 'shu'
                    ],
                    "radiance_ud012_dreadknight": ["male", "radiance_group_underworld", 4, ["radiance_juyan", "radiance_zhuomu"],
                        [], 'wu'
                    ],
                    "radiance_ud015_balor": ["male", "radiance_group_underworld", 4, ["radiance_moshi", "radiance_xiongbi"],
                        [], 'shen'
                    ],

                    "radiance_lo003_assyria": ["male", "radiance_group_lost", 3, ["radiance_dianxing", "radiance_fangzhou"],
                        []
                    ],
                    "radiance_lo002_vita": ["female", "radiance_group_lost", 3, ["radiance_yuanluo", "radiance_ximing"],
                        []
                    ],
                    "radiance_lo005_wuyi": ["female", "radiance_group_lost", 3, ["radiance_jibing", "radiance_dongling"],
                        [], 'wei'
                    ],


                    "radiance_fr001_lotustar": ["male", "radiance_group_free", 3, ["radiance_weiyong", "radiance_yingzhi"],
                        [], 'shu'
                    ],
                    "radiance_fr001ft_lotustar": ["male", "radiance_group_free", 3, ["radiance_chilie", "radiance_yaoguang", "radiance_bengyao"],
                        [], 'shen'
                    ],
                    "radiance_fr001dk_lotustar": ["male", "radiance_group_free", 3, ["radiance_yingxue", "radiance_zhoufa"],
                        ["doublegroup:radiance_group_free:radiance_group_underworld"], 'shu'
                    ],
                    "radiance_fr002_lizhaoyue": ["female", "radiance_group_free", 3, ["radiance_zhanque", "radiance_xiangyun"],
                        ["doublegroup:radiance_group_free:radiance_group_heng"], 'shu'
                    ],
                    "radiance_fr003_vice": ["male", "radiance_group_free", 4, ["radiance_suping", "radiance_xiaohu"],
                        ["doublegroup:radiance_group_free:radiance_group_union"], 'wu'
                    ],
                    "radiance_fr004_veronia": ["female", "radiance_group_free", 3, ["radiance_baiyi", "radiance_fengxing"],
                        [], 'wei'
                    ],
                    "radiance_fr005_luia": ["female", "radiance_group_free", 3, ["radiance_wanxiang", "radiance_qiongjiu"],
                        ["doublegroup:radiance_group_free:radiance_group_magic"], 'wei'
                    ],
                    "radiance_fr006_julia": ["female", "radiance_group_free", 2, ["radiance_shuanghun", "radiance_mizong"],
                        ["doublegroup:radiance_group_free:radiance_group_church", 'forbidai']
                    ],

                    "radiance_fr007_balor": ["male", "radiance_group_free", 3, ["radiance_zhouyan", "radiance_lingjue"],
                        ["doublegroup:radiance_group_free:radiance_group_underworld"], 'wei'
                    ],

                    "radiance_fr009_yangwei": ["male", "radiance_group_free", 5, ["radiance_shiren"],
                        []
                    ],
                    "radiance_fr010_lotusun": ["male", "radiance_group_free", 4, ["radiance_chenji"],
                        ["doublegroup:radiance_group_free:radiance_group_lost"]
                    ],
                    "radiance_fr011_alabai": ["male", "radiance_group_free", 3, ["radiance_zhaoyao", "radiance_jianshang"],
                        [], 'wei'
                    ],
                    "radiance_fr012_kicker": ["male", "radiance_group_free", 4, ["radiance_baoji", "radiance_jiabei"],
                        [], 'shu'
                    ],
                    "radiance_fr013_xiuyin": ["male", "radiance_group_free", 3, ["radiance_zaowu", "radiance_sanyuan"],
                        [], 'wu'
                    ],
                    "radiance_fr014_yeting": ["female", "radiance_group_free", 3, ["radiance_wenyu", "radiance_piaoling"],
                        [], 'wu'
                    ],
                    "radiance_fr016_yunzhongzi": ["male", "radiance_group_free", 4, ["radiance_yunjian", "radiance_leiyin"],
                        ["doublegroup:radiance_group_free:radiance_group_heng"], 'shu'
                    ],
                    "radiance_fr018_morax": ["female", "radiance_group_free", 3, ["radiance_rongbi", "radiance_chunzhu"],
                        ["doublegroup:radiance_group_free:radiance_group_magic"], 'shen'
                    ],
                    "radiance_fr022_bili": ["female", "radiance_group_free", "3/4", ["radiance_shuangbi", "radiance_leiren"],
                        []
                    ],
                    "radiance_fr024_yuanwei": ["male", "radiance_group_free", 3, ["radiance_senbao", "radiance_runze"],
                        [], 'wu'
                    ],

                    "radiance_nh001_luna": ["female", "radiance_group_magic", 3, ["radiance_jiaoyan", "radiance_tianhua"],
                        []
                    ],
                    "radiance_nh002_leisty": ["female", "radiance_group_underworld", 3, ["radiance_rumeng", "radiance_manyue"],
                        []
                    ],
                    "radiance_nh003_maya": ["female", "radiance_group_free", 3, ["radiance_diewu", "radiance_fengying"],
                        []
                    ],
                    "radiance_nh007_sarah": ["female", "radiance_group_free", 3, ["radiance_yidai", "radiance_renlin", "radiance_jianxing"],
                        []
                    ],
                    "radiance_nh008_yinlong": ["male", "radiance_group_heng", 4, ["radiance_tenglong", "radiance_juesha"],
                        []
                    ],
                    "radiance_nh00": ["female", "radiance_group_free", 4, ["radiance_danda", "radiance_zhanfang"],
                        ['unseen']
                    ],
                    "radiance_nh011_wawel": ["none", "radiance_group_magic", 7, ["radiance_gongfa", "radiance_baohui"],
                        [], 'shu'
                    ],
                    "radiance_nh012_hydra": ["none", "radiance_group_union", 7, ["radiance_pangran", "radiance_mengdu"],
                        [], 'qun'
                    ],
                    "radiance_nh013_tianfa": ["none", "radiance_group_church", 7, ["radiance_weihao"],
                        []
                    ],
                    "radiance_nh014_xiuhcoatl": ["none", "radiance_group_underworld", 7, ["radiance_baoyan", "radiance_shihun"],
                        []
                    ],
                    "radiance_nh016_diewumeng": ["female", "radiance_group_free", 3, ["radiance_pojian", "radiance_huangli", "radiance_zaixin"],
                        [], 'wu'
                    ],
                    "radiance_nh017_reona": ["female", "radiance_group_free", 3, ["radiance_moju", "radiance_tizi"],
                        [], 'wu'
                    ],
                    "radiance_nh019_quanzuo": ["none", "radiance_group_heaven", 7, ["radiance_xiaoyue", "radiance_tianlang"],
                        []
                    ],

                    "radiance_000_infinity": ["female", "radiance_group_free", 3, ["radiance_caishe", "radiance_jixing"],
                        [], 'shen'
                    ],
                    "radiance_001_aides": ["female", "radiance_group_free", 3, ["radiance_shenyi", "radiance_jiyuan"],
                        ['forbidai']
                    ],
                    "radiance_002_airin": ["female", "radiance_group_free", 3, ["radiance_mengmei", "radiance_yekong"],
                        [], 'wei'
                    ],
                    "radiance_004_qi": ["female", "radiance_group_free", 3, ["radiance_weiyu", "radiance_yueqian"],
                        []
                    ],
                },
                characterSort: {
                    "mode_extension_星耀璨然": {
                        "radiance_magic": [
                            "radiance_ma001_clark", "radiance_ma002_dai", "radiance_ma004_watersky", "radiance_ma005_maria",
                            "radiance_ma007_tima", "radiance_ma009_draco", "radiance_ma010_ciel",
                            "radiance_ma011_zero", "radiance_ma012_grey", "radiance_ma013_einxis", "radiance_ma014_shirona", "radiance_ma015_luia",
                            "radiance_ma017_ginga", "radiance_ma020_hope",
                            "radiance_ma021_raimund", "radiance_ma022_raven", "radiance_ma023_blair",
                        ],
                        "radiance_heng": [
                            "radiance_he001_xueli", "radiance_he003_yuchizhongming", "radiance_he004_watersky", "radiance_he005_zhaoshaolong",
                            "radiance_he006_liuye", "radiance_he007_xuanzhen", "radiance_he009_xuezhao", "radiance_he010_xuening",
                            "radiance_he011_yangtaihou", "radiance_he014_litaicheng", "radiance_he015_lizhaoyue",
                            "radiance_he016_liyexin", "radiance_he017_qilian", "radiance_he018_daole", "radiance_he020_hope",
                            "radiance_he021_hongjisheng",
                        ],
                        "radiance_union": [
                            "radiance_un001_richard", "radiance_un002_schwarz", "radiance_un003_yanghua", "radiance_un004_reine", "radiance_un005_helena",
                            "radiance_un006_cresa", "radiance_un007_huangqiqiao", "radiance_un008_gelamo",
                            "radiance_un012_leo", "radiance_un013_gaius", "radiance_un015_vice",
                            "radiance_un016_yimei", "radiance_un017_qiuguxun", "radiance_un018_kinsey", "radiance_un020_hope",
                            "radiance_un021_riemann", "radiance_un023_achong",
                        ],
                        "radiance_church": [
                            "radiance_ch001_agnes", "radiance_ch002_kelvin", "radiance_ch003_aurora", "radiance_ch004_watersky", "radiance_ch005_weiencao",
                            "radiance_ch006_louise", "radiance_ch007_jacob", "radiance_ch009_richelieu", "radiance_ch010_paul",
                            "radiance_ch011_janedoe", "radiance_ch013_fiore", "radiance_ch015_julia",
                            "radiance_ch017_endore", "radiance_ch020_hope",
                            "radiance_ch021_samael",
                        ],
                        "radiance_heaven": [
                            "radiance_hv002_aiffel", "radiance_hv003_norn", "radiance_hv004_reine",
                            "radiance_hv006_lixian", "radiance_hv007_yinghe",
                            "radiance_hv012_lysander", "radiance_hv015_veronia",
                        ],
                        "radiance_underworld": [
                            "radiance_fr001dk_lotustar", "radiance_ud002_agares", "radiance_ud003_youfa", "radiance_ud004_rein", "radiance_ud005_doris",
                            "radiance_ud006_pestilence", "radiance_ud007_wangruize", "radiance_ud008_rosa", "radiance_ud009_xunsishen", "radiance_ud010_wheeloffortune",
                            "radiance_ud011_crimsoul", "radiance_ud012_dreadknight", "radiance_ud015_balor",
                        ],
                        "radiance_lost": [
                            "radiance_lo002_vita", "radiance_lo003_assyria", "radiance_lo005_wuyi",
                        ],
                        "radiance_free": [
                            "radiance_fr001_lotustar", "radiance_fr002_lizhaoyue", "radiance_fr003_vice", "radiance_fr004_veronia", "radiance_fr005_luia",
                            "radiance_fr007_balor", "radiance_fr009_yangwei", "radiance_fr010_lotusun",
                            "radiance_fr011_alabai", "radiance_fr012_kicker", "radiance_fr013_xiuyin", "radiance_fr014_yeting",
                            "radiance_fr016_yunzhongzi", "radiance_fr018_morax",
                            "radiance_fr022_bili", "radiance_fr024_yuanwei",
                        ],
                        "radiance_nonhuman": [
                            "radiance_fr001ft_lotustar", "radiance_nh001_luna", "radiance_nh002_leisty", "radiance_nh003_maya",
                            "radiance_nh007_sarah", "radiance_nh008_yinlong",
                            "radiance_nh011_wawel", "radiance_nh012_hydra", "radiance_nh013_tianfa", "radiance_nh014_xiuhcoatl",
                            "radiance_nh016_diewumeng", "radiance_nh017_reona", "radiance_nh019_quanzuo",
                        ],
                        "radiance_null": [
                            "radiance_000_infinity", "radiance_002_airin", "radiance_004_qi",
                        ],
                        "radiance_test": ["radiance_001_aides", "radiance_hv001_luchasiphael", "radiance_ch039_orchestra",
                            "radiance_fr006_julia", "radiance_un010_lucas",
                        ],
                    },
                },
                skill: {},
                translate: {
                    "radiance_magic": "魔法公国希格",
                    "radiance_heng": "大衡帝国",
                    "radiance_union": "赛洛斯联合王国",
                    "radiance_church": "教皇国圣维蒂亚",
                    "radiance_lost": "遗失之地",
                    "radiance_heaven": "上界",
                    "radiance_underworld": "幽冥界",
                    "radiance_nonhuman": "非人类",
                    "radiance_free": "自由者",
                    "radiance_test": "测试中（需点将）",

                    "radiance_ma001_clark": "克拉克",
                    "radiance_ma002_dai": "戴",
                    "radiance_ma004_watersky": "白泽水天",
                    "radiance_ma005_maria": "玛丽亚·伊娃",
                    "radiance_ma007_tima": "蒂玛",
                    "radiance_ma009_draco": "德拉科·马兰",
                    "radiance_ma010_ciel": "夏尔·希格",
                    "radiance_ma011_zero": "零姬",
                    "radiance_ma012_grey": "葛雷·塞毕",
                    "radiance_ma013_einxis": "艾因克希斯",
                    "radiance_ma014_shirona": "城奈",
                    "radiance_ma015_luia": "露雅·加内斯",
                    "radiance_ma017_ginga": "银河",
                    "radiance_ma020_hope": "织神希望",
                    "radiance_ma021_raimund": "雷蒙德",
                    "radiance_ma022_raven": "瑞文",
                    "radiance_ma023_blair": "布莱尔",

                    "radiance_he001_xueli": "薛厉",
                    "radiance_he003_yuchizhongming": "尉迟仲明",
                    "radiance_he004_watersky": "白泽水天",
                    "radiance_he005_zhaoshaolong": "赵少龙",
                    "radiance_he006_liuye": "柳叶",
                    "radiance_he007_xuanzhen": "玄真",
                    "radiance_he009_xuezhao": "薛昭",
                    "radiance_he010_xuening": "薛宁",
                    "radiance_he011_yangtaihou": "羊太后",
                    "radiance_he014_litaicheng": "李泰城",
                    "radiance_he015_lizhaoyue": "李照月",
                    "radiance_he016_liyexin": "李烨薪",
                    "radiance_he017_qilian": "祁连",
                    "radiance_he018_daole": "道乐",
                    "radiance_he020_hope": "织神希望",
                    "radiance_he021_hongjisheng": "洪济盛",

                    "radiance_un001_richard": "理查德",
                    "radiance_un002_schwarz": "舒华兹",
                    "radiance_un003_yanghua": "杨桦",
                    "radiance_un004_reine": "怜音",
                    "radiance_un005_helena": "海伦娜",
                    "radiance_un006_cresa": "克蕾莎",
                    "radiance_un007_huangqiqiao": "凰七巧",
                    "radiance_un008_gelamo": "格拉莫",
                    "radiance_un010_lucas": "卢卡斯",
                    "radiance_un012_leo": "列奥",
                    "radiance_un013_gaius": "盖乌斯",
                    "radiance_un015_vice": "维斯·路格",
                    "radiance_un016_yimei": "伊美",
                    "radiance_un017_qiuguxun": "秋谷寻",
                    "radiance_un018_kinsey": "凯茜",
                    "radiance_un020_hope": "织神希望",
                    "radiance_un021_riemann": "列曼·泽塔",
                    "radiance_un023_achong": "亚崇",

                    "radiance_ch001_agnes": "圣雅妮二世",
                    "radiance_ch002_kelvin": "开尔文",
                    "radiance_ch003_aurora": "欧若拉",
                    "radiance_ch004_watersky": "白泽水天",
                    "radiance_ch005_weiencao": "韦恩·曹",
                    "radiance_ch006_louise": "路易斯",
                    "radiance_ch007_jacob": "圣雅各十世",
                    "radiance_ch009_richelieu": "黎塞留",
                    "radiance_ch010_paul": "保罗五世",
                    "radiance_ch011_janedoe": "简·道伊",
                    "radiance_ch013_fiore": "菲蕾",
                    "radiance_ch015_julia": "尤莉亚",
                    "radiance_ch017_endore": "恩道尔",
                    "radiance_ch020_hope": "织神希望",
                    "radiance_ch021_samael": "萨麦尔",
                    "radiance_ch039_orchestra": "交响",

                    "radiance_hv001_luchasiphael": "路迦斯菲勒",
                    "radiance_hv002_aiffel": "艾菲尔",
                    "radiance_hv003_norn": "诺恩",
                    "radiance_hv004_reine": "怜音",
                    "radiance_hv006_lixian": "璃仙",
                    "radiance_hv007_yinghe": "樱鹤",
                    "radiance_hv012_lysander": "莱山德",
                    "radiance_hv015_veronia": "薇洛妮亚",

                    "radiance_ud002_agares": "阿加雷斯",
                    "radiance_ud003_youfa": "幽伐",
                    "radiance_ud004_rein": "琳",
                    "radiance_ud005_doris": "朵丽丝",
                    "radiance_ud006_pestilence": "佩斯提勒斯",
                    "radiance_ud007_wangruize": "王锐泽",
                    "radiance_ud008_rosa": "萝莎",
                    "radiance_ud009_xunsishen": "巡死神",
                    "radiance_ud010_wheeloffortune": "命运之轮",
                    "radiance_ud011_crimsoul": "猩红之魂",
                    "radiance_ud012_dreadknight": "雷登·惧亡",
                    "radiance_ud015_balor": "巴罗尔",

                    "radiance_lo002_vita": "薇塔",
                    "radiance_lo003_assyria": "亚述",
                    "radiance_lo005_wuyi": "舞依",

                    "radiance_fr001_lotustar": "莲星",
                    "radiance_fr001ft_lotustar": "莲星",
                    "radiance_fr001dk_lotustar": "莲星",
                    "radiance_fr002_lizhaoyue": "李照月",
                    "radiance_fr003_vice": "维斯·路格",
                    "radiance_fr004_veronia": "薇洛妮亚",
                    "radiance_fr005_luia": "露雅·加内斯",
                    "radiance_fr006_julia": "尤莉亚",
                    "radiance_fr007_balor": "巴罗尔",
                    "radiance_fr008_silver": "席尔瓦",
                    "radiance_fr009_yangwei": "扬威",
                    "radiance_fr010_lotusun": "莲曜",
                    "radiance_fr011_alabai": "阿拉白",
                    "radiance_fr012_kicker": "赌徒奇克",
                    "radiance_fr013_xiuyin": "修因",
                    "radiance_fr014_yeting": "夜汀",
                    "radiance_fr016_yunzhongzi": "云中子",
                    "radiance_fr018_morax": "摩拉",
                    "radiance_fr020_hope": "织神希望",
                    "radiance_fr022_bili": "碧&礼",
                    "radiance_fr024_yuanwei": "袁苇",

                    "radiance_nh001_luna": "露娜",
                    "radiance_nh002_leisty": "莉丝蒂",
                    "radiance_nh003_rose": "萝赛",
                    "radiance_nh003_maya": "梅亚",
                    "radiance_nh007_sarah": "塞拉",
                    "radiance_nh008_yinlong": "胤龙",
                    "radiance_nh011_wawel": "瓦维尔",
                    "radiance_nh012_hydra": "海德拉",
                    "radiance_nh013_tianfa": "天·罚",
                    "radiance_nh014_xiuhcoatl": "修考克",
                    "radiance_nh016_diewumeng": "蝶舞梦",
                    "radiance_nh017_reona": "蕾欧娜",
                    "radiance_nh019_quanzuo": "权座",

                    "radiance_000_infinity": "茵菲尼缇",
                    "radiance_001_aides": "爱德丝",
                    "radiance_002_airin": "爱铃",
                    "radiance_004_qi": "白渊祈",
                },
                characterTitle: {
                    "radiance_ma001_clark": "追寻奥秘之人",
                    "radiance_ma002_dai": "大魔导师",
                    "radiance_ma004_watersky": "解析者",
                    "radiance_ma005_maria": "法歌双绝",
                    "radiance_ma007_tima": "悠久的贤人",
                    "radiance_ma009_draco": "屠龙绝艺",
                    "radiance_ma010_ciel": "圣魔导女王",
                    "radiance_ma011_zero": "冰晶之海",
                    "radiance_ma012_grey": "虚空术士",
                    "radiance_ma013_einxis": "法皇剑",
                    "radiance_ma014_shirona": "十八虹的冠绝者",
                    "radiance_ma015_luia": "万灵的魔导师",
                    "radiance_ma017_ginga": "星空的占卜师",
                    "radiance_ma020_hope": "息魂净焰",
                    "radiance_ma021_raimund": "空与物的变换者",

                    "radiance_he001_xueli": "衡太祖",
                    "radiance_he003_yuchizhongming": "威武大将军",
                    "radiance_he004_watersky": "指引者",
                    "radiance_he005_zhaoshaolong": "龙威虎胆",
                    "radiance_he006_liuye": "月下美刃",
                    "radiance_he007_xuanzhen": "武头陀",
                    "radiance_he010_xuening": "当朝天子",
                    "radiance_he015_lizhaoyue": "星离月会",
                    "radiance_he020_hope": "丰稻祭焰",
                    "radiance_he021_hongjisheng": "三不知",

                    "radiance_un001_richard": "商会首脑",
                    "radiance_un003_yanghua": "产业龙头",
                    "radiance_un004_reine": "坠天之羽",
                    "radiance_un005_helena": "幻形的召使",
                    "radiance_un006_cresa": "月痕剑",
                    "radiance_un008_gelamo": "百战老兵",
                    "radiance_un010_lucas": "众议长",
                    "radiance_un012_leo": "诡谲的交涉家",
                    "radiance_un013_gaius": "虚无的侦探",
                    "radiance_un016_yimei": "银之祭司",
                    "radiance_un018_kinsey": "无面的导化",
                    "radiance_un021_riemann": "结果测评师",
                    "radiance_un023_achong": "血锁王",

                    "radiance_ch001_agnes": "女教宗",
                    "radiance_ch002_kelvin": "圣骑士长",
                    "radiance_ch003_aurora": "晓光百合",
                    "radiance_ch004_watersky": "记录者",
                    "radiance_ch005_weiencao": "肃清者",
                    "radiance_ch006_louise": "圣女",
                    "radiance_ch007_jacob": "中部教主",
                    "radiance_ch009_richelieu": "大枢机",
                    "radiance_ch010_paul": "护国的皇子",
                    "radiance_ch011_janedoe": "无名的虔信者",
                    "radiance_ch013_fiore": "首降者",
                    "radiance_ch015_julia": "卫道的圣精灵",
                    "radiance_ch017_endore": "裁决之银弹",
                    "radiance_ch020_hope": "天目圣焰",
                    "radiance_ch021_samael": "邪逆的异端",
                    "radiance_ch039_orchestra": "最高守护者",

                    "radiance_hv001_luchasiphael": "第一神使",
                    "radiance_hv002_aiffel": "圣光天使",
                    "radiance_hv003_norn": "命运女神",
                    "radiance_hv004_reine": "悯天使",
                    "radiance_hv012_lysander": "天之约",
                    "radiance_hv015_veronia": "铠羽晨光",

                    "radiance_ud002_agares": "恶魔大公",
                    "radiance_ud003_youfa": "冥公子",
                    "radiance_ud004_rein": "夜天的告末钟声",
                    "radiance_ud005_doris": "天魔像偶",
                    "radiance_ud006_pestilence": "苍白之王",
                    "radiance_ud007_wangruize": "冥灵唤者",
                    "radiance_ud008_rosa": "魔之花",
                    "radiance_ud011_crimsoul": "暗血的怨灵骑士",
                    "radiance_ud012_dreadknight": "亡龙的梦魇骑士",
                    "radiance_ud015_balor": "魔眼之大君",

                    "radiance_lo002_vita": "幻银之魔女",
                    "radiance_lo003_assyria": "星海指路人",
                    "radiance_lo005_wuyi": "冰宫的舞姬",

                    "radiance_fr001_lotustar": "赤红的勇者",
                    "radiance_fr001ft_lotustar": "崩日的圣者",
                    "radiance_fr001dk_lotustar": "黑血的使者",
                    "radiance_fr002_lizhaoyue": "朗月高照",
                    "radiance_fr004_veronia": "自由游风",
                    "radiance_fr005_luia": "万象的探索者",
                    "radiance_fr006_julia": "迷途的圣精灵",
                    "radiance_fr007_balor": "魔眼之贤者",
                    "radiance_fr009_yangwei": "另一位预言之子",
                    "radiance_fr010_lotusun": "严酷的坚壁",
                    "radiance_fr011_alabai": "沙海巨奸",
                    "radiance_fr013_xiuyin": "元素至尊",
                    "radiance_fr014_yeting": "提灯的少女",
                    "radiance_fr018_morax": "大地的圣祝",
                    "radiance_fr022_bili": "才华的双刃",
                    "radiance_fr024_yuanwei": "森之守护者",

                    "radiance_nh001_luna": "华月美姬",
                    "radiance_nh002_leisty": "绀紫梦幻",
                    "radiance_nh003_maya": "摇曳之蝶",
                    "radiance_nh007_sarah": "剑刃妖精",
                    "radiance_nh011_wawel": "炼狱巨龙",
                    "radiance_nh013_tianfa": "惩戒魔",
                    "radiance_nh014_xiuhcoatl": "狱龙王",
                    "radiance_nh017_reona": "棋魔",
                    "radiance_nh019_quanzuo": "神牙王",

                    "radiance_000_infinity": "阐述者",
                    "radiance_001_aides": "创世之大天使",
                    "radiance_002_airin": "魔力之源",
                    "radiance_004_qi": "混沌旅者",
                },
                characterReplace: {
                    infinity: ["radiance_ma004_watersky", "radiance_he004_watersky", "radiance_ch004_watersky", "radiance_000_infinity"],
                    lotustar: ["radiance_fr001_lotustar", "radiance_fr001ft_lotustar", "radiance_fr001dk_lotustar"],
                    lizhaoyue: ["radiance_fr002_lizhaoyue", "radiance_he015_lizhaoyue"],
                    vice: ["radiance_fr003_vice", "radiance_un015_vice"],
                    veronia: ["radiance_fr004_veronia", "radiance_hv015_veronia"],
                    luia: ["radiance_fr005_luia", "radiance_ma015_luia"],
                    julia: ["radiance_fr006_julia", "radiance_ch015_julia"],
                    balor: ["radiance_fr007_balor", "radiance_ud015_balor"],
                    reine: ["radiance_un004_reine", "radiance_hv004_reine"],
                    hope: ["radiance_ch020_hope", "radiance_fr020_hope", "radiance_he020_hope", "radiance_ma020_hope", "radiance_un020_hope"],
                },
                characterIntro: {
                    // "radiance_001_aides": "人物编号：001<br><br>联合王国首府最繁华的第八大道中，有一座知名的的酒吧《绯红天空》。作为王国最高规格的酒吧，这里除了作为达官贵人的享乐场所，也被作为重要的商业洽谈、情报交易之地。而这里，有一位名为爱丽丝的混血天使也在此作为酒保工作。除去她那令人惊艳的外表以外，更令人称奇得是几乎所有需要的情报都能从她处得知，而她从来不索要物质作为报酬。与之相对的，只有够打动她的奇闻异事奇思妙想才能换得她开口。<br>那一晚，当一名顾客进入酒吧时，她的打扮立刻吸引了所有在场的注意：修女服。尽管教会作为政治实体的存在亦需要同其他团体交涉，因此在场的众人并不会对于教会人员来到此处感到奇怪，但直接表明自身身份来到这种与教义相悖的场所也是前所未闻的。而更令人感到奇怪的是，一向礼貌却又拒人千里之外的爱丽丝，竟主动迎上前去。<br>“没想到您这样的人也会来这种地方？”爱丽丝用一种带点戏谑的口吻笑道。<br>“你以为我想直接来吗，有的东西比起我明显还是你来比较合适吧。”那修女摇了摇头。<br>“是因为皇罪的事？那没什么操心的必要吧。”爱丽丝收起了笑容，但是口气中依然透露出一丝不以为意。<br>“它本身对你我自然没有什么危害。但是从我的角度上来讲，我其实还是希望让人自己解决啊。”修女淡淡得说道。<br>爱丽丝停顿了一下，接道：“那你的意思是让我去提供指引？”<br>修女点了点头：“嗯，具体是什么内容还是你来决定吧，毕竟这些东西我实在不擅长啊。”说完便转身要离开。<br>“来都来了，不喝一杯吗？”爱丽丝却换上了一副营业式的笑容，问道，“就算我请你的哟。”<br>而十天后，位于圣维蒂亚教会总部的圣天殿受到了一条神谕。这便是来自于创世大天使爱德丝的，被后世称为《万罪之罪与日蚀圣者》的预言。<br><br>能力属性：<br>灵性：S/SSS<br>作为事实上创造了世界的大天使，爱德丝的创造力与灵感近乎无穷。而即使是隐居于人世时，她智慧也是人类难以企及的。<br>统筹：AAA/SSS<br>在创世时，爱德丝在神的法则的基础上构建了完整的世界框架，使得世界即使脱离了神的意志也能自动运行。而在人世，她也能够通过巧妙得引导不着痕迹地帮助那些向她求助的人。<br>体能：D/SSS<br>宏观上讲，爱德丝的物质存在与整个世界等同。而以她常态使用的肉体的强度来说只是个一般的弱女子。<br>魔力：E/NA<br>作为神的第一个造物，爱德丝的存在甚至早于魔力之源的诞生，而她行使奇迹所用为创世的权能远非魔力可比；而在人世时，她也并未选择以任何方式使用魔力。<br>技艺：A/SSS<br>爱德丝创造了大部分的分支法则与全部的物质存在，一般意义上的知识仅是她个人思想的冰山一角。而在人世时，她倾向于局限自己的能力使得自身融入社会之中。<br>社会：B/SSS<br>作为圣典记载的创世大天使，爱德丝大陆上无人不知。而她的人类身份亦在地下情报圈子内有一定知名度。",
                },
                dynamicTranslate: {
                    "radiance_x": function(player) {
                        if (player.storage.radiance_zaixin) {
                            return "出牌阶段对每名其他角色限<span class='firetext'>两</span>次，你可以将至少一张牌交给其他角色。每回合限<span class='firetext'>两</span>次，<span class='firetext'>当你的牌被其他角色获得时</span>，你可以获得一张你选择的基本牌或摸两张牌。（每个牌名和摸牌各只能选择一次）";
                        }
                        return "出牌阶段对每名其他角色限一次，你可以将至少一张牌交给其他角色。每回合限一次，当你本回合有累计两张以上的牌被其他角色获得时，你可以获得一张你选择的基本牌或摸两张牌。";
                    },
                    "radiance_tianyi": function(player) {
                        if (player.storage.radiance_tianyi === true) return "转换技，每回合限一次，你可以将：·阴：两张牌；<span class='firetext'>·阳：一张非基本牌</span>当作任意基本或非延时类锦囊牌使用或打出。"
                        return "转换技，每回合限一次，你可以将：<span class='firetext'>·阴：两张牌；</span>·阳：一张非基本牌当作任意基本或非延时类锦囊牌使用或打出。";
                    },
                    "radiance_xingyi": function(player) {
                        if (typeof player.storage.radiance_xingyi_status != 'number') return "转换技，当你使用一张牌后，你根据其类型执行对应的效果：①基本/锦囊/装备②锦囊/装备/基本③装备/基本/锦囊；摸一张牌/回复1点体力/此技能本回合失效。"
                        var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                        var str = "转换技，当你使用一张牌后，你根据其类型执行对应的效果：";
                        if (status == 0) str += "<span class='firetext'>";
                        str += "①基本/锦囊/装备";
                        if (status == 0) str += "</span>";
                        if (status == 1) str += "<span class='firetext'>";
                        str += "②锦囊/装备/基本";
                        if (status == 1) str += "</span>";
                        if (status == 2) str += "<span class='firetext'>";
                        str += "③装备/基本/锦囊";
                        if (status == 2) str += "</span>";
                        str += "；摸一张牌/回复1点体力/";
                        if (player.hasSkill('radiance_xingyi_used')) str += "<span class='firetext'>";
                        str += "此技能本回合失效";
                        if (player.hasSkill('radiance_xingyi_used')) str += "</span>";
                        str += "。";
                        return str;
                    },
                    "radiance_wanling": function(player) {
                        if (player.storage.radiance_cheli === true) return "摸牌阶段，你可以放弃摸牌，改为展示并获得牌堆顶三张牌，然后你根据这些牌的点数和获得以下技能直至回合结束：·不大于18：“灵药”；·不小于24：“万象”；<span class='firetext'>·大于18且小于24：“质素”</span>。";
                        return "摸牌阶段，你可以放弃摸牌，改为展示并获得牌堆顶三张牌，然后你根据这些牌的点数和获得以下技能直至回合结束：·不大于18：“灵药”；·不小于24：“万象”。";
                    },
                    "radiance_diewu": function(player) {
                        if (player.storage.radiance_diewu) {
                            if (player.storage.radiance_diewu == 'female') return "一名<span class='firetext'>女</span>性角色的出牌阶段开始时，你可以摸一张牌，然后其本回合使用【杀】的次数+1，手牌上限-1。"
                            if (player.storage.radiance_diewu == 'male') return "一名<span class='firetext'>男</span>性角色的出牌阶段开始时，你可以摸一张牌，然后其本回合使用【杀】的次数+1，手牌上限-1。";
                        }
                        return "一名男性角色的出牌阶段开始时，你可以摸一张牌，然后其本回合使用【杀】的次数+1，手牌上限-1。";
                    },
                    "radiance_renlin": function(player) {
                        if (player.storage.radiance_renlin) {
                            return "游戏开始时，你可以随机使用一张武器牌。其他角色的武器牌进入弃牌堆后，你可以获得之。你的武器牌不计入手牌上限。<span style='opacity:0.5'>限定技，当一名角色进入濒死状态时，你可以重铸一张武器牌，然后该角色回复等量的体力。</span>";
                        }
                        return "游戏开始时，你可以随机使用一张武器牌。其他角色的武器牌进入弃牌堆后，你可以获得之。你的武器牌不计入手牌上限。限定技，当一名角色进入濒死状态时，你可以重铸任意张武器牌，然后该角色回复等量的体力";
                    },
                    "radiance_tenglong": function(player) {
                        if (player.storage.radiance_juesha === true) return "其他角色的出牌阶段开始时，你可以对该角色或其上下家使用一张【杀】。若如此做，直至回合结束其他角色与你计算距离时+1。你使用【杀】时，<span class='firetext'>所有其他角色的防具和非锁定技全部失效直至此【杀】结算完毕，若为该回合第一次则你再获得一张基本牌</span>。";
                        return "其他角色的出牌阶段开始时，你可以对该角色/其上家或下家使用一张【杀】。若如此做，你获得一张基本牌/摸一张牌，且直至回合结束其他角色与你计算距离+1。你使用【杀】时无视目标角色的防具。";
                    },
                    "radiance_yanzhen": function(player) {
                        if (player.storage.radiance_yanzhen) {
                            return "转换技，当一张非延时类锦囊牌被【无懈可击】响应后：·阴：你可以获得该锦囊牌；<span class='firetext'>·阳：若你非此【无懈可击】的使用者，你可以获得此【无懈可击】。</span>你的非延时类锦囊牌不会被【无懈可击】响应。"
                        };
                        return "转换技，当一张非延时类锦囊牌被【无懈可击】响应后：<span class='firetext'>·阴：你可以获得该锦囊牌；</span>·阳：若你非此【无懈可击】的使用者，你可以获得此【无懈可击】。你的非延时类锦囊牌不会被【无懈可击】响应。"
                    },
                    "radiance_tiancai": function(player) {
                        if (player.storage.radiance_tiancai) {
                            var list = [player.storage.radiance_tiancai.draw, player.storage.radiance_tiancai.give, player.storage.radiance_tiancai.add, player.storage.radiance_tiancai.discard];
                            for (var i = 0; i < 4; i++) {
                                if (['spade', 'club'].contains(list[i])) {
                                    list[i] = "<span class='bluetext'>" + get.translation(list[i]) + "</span>";
                                } else {
                                    list[i] = "<span class='firetext'>" + get.translation(list[i]) + "</span>";
                                };
                            };
                            return "①每回合限四次，当你使用一张牌时，你可以根据其花色执行对应效果：·" + list[0] + "：摸一张牌；·" + list[1] + "：令一名其他角色获得此牌的实体牌；·" + list[2] + "：为此牌增加一个合法目标；·" + list[3] + "：弃置其中一个目标区域内的一张牌。<br>②每次你的回合开始时，你可以切换①中花色与效果的对应顺序。"
                        };
                        return "①每回合限四次，当你使用一张牌时，你可以根据其花色执行对应效果：·♥：摸一张牌；·♦：令一名其他角色获得此牌的实体牌；·♠：为此牌增加一个合法目标；·♣：弃置其中一个目标区域内的一张牌。<br>②每次你的回合开始时，你可以切换①中花色与效果的对应顺序。";
                    },
                    "radiance_zhemian": function(player) {
                        if (typeof player.storage.radiance_zhemian == 'boolean') {
                            if (player.storage.radiance_zhemian) {
                                return "转换技，当你受到伤害时，若伤害来源为<span class='firetext'>女性</span>，你可以摸一张牌并令此伤害-1；若不为，你也可以选择切换至另一项。";
                            } else {
                                return "转换技，当你受到伤害时，若伤害来源为<span class='firetext'>男性</span>，你可以摸一张牌并令此伤害-1；若不为，你也可以选择切换至另一项。";
                            }
                        }
                        return "转换技，当你受到伤害时，若伤害来源为男性/女性，你可以摸一张牌并令此伤害-1；若不为，你也可以选择切换至另一项。";
                    },
                    radiance_shuangbi: function(player) {
                        if (typeof player.storage.radiance_shuangbi == 'boolean') {
                            if (player.storage.radiance_shuangbi) {
                                return "转换技，当你使用伤害牌指定一名其他角色为目标后，你可以<span class='firetext'>摸一张牌</span>。";
                            } else {
                                return "转换技，当你使用伤害牌指定一名其他角色为目标后，你可以<span class='firetext'>令目标角色非锁定技失效直至回合结束且其不能使用或打出牌响应此牌</span>。";
                            }
                        }
                        return "转换技，当你使用伤害牌指定一名其他角色为目标后，你可以：令目标角色非锁定技失效直至回合结束且其不能使用或打出牌响应此牌/摸一张牌。";
                    },
                    radiance_yuanluo: function(player) {
                        if (typeof player.storage.radiance_yuanluo == 'boolean') {
                            if (player.storage.radiance_yuanluo) {
                                return "出牌阶段限一次，你可以选择一项令其他角色执行：1.失去1点体力，然后摸X张牌；2.弃置X张牌，然后回复1点体力。（X为其已损失的体力值）若选择<span class='firetext'>选项2，你可以令其先回复体力再弃牌。</span>";
                            } else {
                                return "出牌阶段限一次，你可以选择一项令其他角色执行：1.失去1点体力，然后摸X张牌；2.弃置X张牌，然后回复1点体力。（X为其已损失的体力值）若选择<span class='firetext'>选项1，你可以令其先摸牌再失去体力。</span>";
                            };
                        };
                        return "出牌阶段限一次，你可以选择一项令其他角色执行：1.失去1点体力，然后摸X张牌；2.弃置X张牌，然后回复1点体力。（X为其已损失的体力值）若你的选择与上一次发动时的选择不同，你可以令其反转操作牌与体力的顺序。";
                    },
                    radiance_quanneng: function(player) {
                        if (!Array.isArray(player.storage.radiance_quanneng_disable)) return "每轮每项限一次，其他角色执行以下操作后，你可以：①不于摸牌阶段摸了至少两张牌后：摸两张牌；②不于弃牌阶段弃牌后：获得其一张手牌；③不因【杀】受到伤害后：视为使用一张【杀】；④不于濒死状态回复体力后：回复1点体力；每轮开始时，若上一轮有选项未执行，你需废除一个选项，且需优先废除该轮执行过的选项。";
                        var str = "每轮每项限一次，其他角色执行以下操作后，你可以：";
                        if (player.storage.radiance_quanneng_disable.contains('draw')) str += "<span style='opacity:0.5'>";
                        str += "①不于摸牌阶段摸了至少两张牌后：摸两张牌；";
                        if (player.storage.radiance_quanneng_disable.contains('draw')) str += "</span>";
                        if (player.storage.radiance_quanneng_disable.contains('discard')) str += "<span style='opacity:0.5'>";
                        str += "②不于弃牌阶段弃牌后：获得其一张手牌；";
                        if (player.storage.radiance_quanneng_disable.contains('discard')) str += "</span>";
                        if (player.storage.radiance_quanneng_disable.contains('damage')) str += "<span style='opacity:0.5'>";
                        str += "③不因【杀】受到伤害后：视为使用一张【杀】；";
                        if (player.storage.radiance_quanneng_disable.contains('damage')) str += "</span>";
                        if (player.storage.radiance_quanneng_disable.contains('recover')) str += "<span style='opacity:0.5'>";
                        str += "④不于濒死状态回复体力后：回复1点体力；";
                        if (player.storage.radiance_quanneng_disable.contains('recover')) str += "</span>";
                        str += "每轮开始时，若上一轮有选项未执行，你需废除一个选项，且需优先废除该轮执行过的选项。";
                        return str;
                    },
                    radiance_shengyu: function(player) {
                        if (player.storage.radiance_shilian === true) return "出牌阶段限一次，<span class='firetext'>你可以：若你有未废除的装备栏，你先废除一个，</span>然后令至多X名角色各摸两张牌。<span class='firetext'>你的攻击范围+X。</span>（X为你已废除的装备区数）";
                        return "出牌阶段限一次，你可以废除你的一个装备栏，然后令至多X名角色各摸两张牌。（X为你已废除的装备栏数）";
                    },
                    radiance_pojian: function(player) {
                        if (player.storage.radiance_zaixin === true) return "游戏开始时，你从牌堆中装备不同类型的装备各一张。<span class='firetext'>结束阶段</span>或当你受到伤害后，你可以废除<span class='firetext'>装备区内的一个装备栏。</span>"
                        return "游戏开始时，你从牌堆中装备不同类型的装备各一张。准备阶段或当你受到伤害后，你可以将装备区内一张牌置于武将牌上并废除其对应的装备栏。";
                    },
                },
            };
            if (config.radianceGroupSetting == "replace") {
                var characters = radiance_pack.character;
                for (var i in characters) {
                    if (i.indexOf('radiance') < 0) continue;
                    var info = characters[i];
                    var special = info[5];
                    if (info[5]) {
                        info[1] = info[5];
                        continue;
                    };
                    var map = {
                        'radiance_group_magic': 'wei',
                        'radiance_group_heng': 'shu',
                        'radiance_group_union': 'wu',
                    };
                    var replace = map[info[1]];
                    if (!replace) replace = 'qun';
                    characters[i][1] = replace;
                };
            };

            if (config.radianceWinRate == "yes") {
                var characters = radiance_pack.character;
                for (var name in characters) {
                    lib.watersky.func.defaultWinRate(name);
                    var database = lib.config.radianceWinRateAccumulated;
                    if (!radiance_pack.characterIntro[name]) radiance_pack.characterIntro[name] = "";

                    var info = database[name];
                    if (!info) info = empty;
                    var str = "<br><br>玩家胜率：<br>";
                    str += "合计" + (info.player.zhu + info.player.zhong + info.player.fan + info.player.nei) + "场 " +
                        (info.player.zhu_win + info.player.zhong_win + info.player.fan_win + info.player.nei_win) + "胜" +
                        (info.player.zhu_lose + info.player.zhong_lose + info.player.fan_lose + info.player.nei_lose) + "负" +
                        (info.player.zhu_tie + info.player.zhong_tie + info.player.fan_tie + info.player.nei_tie) + "平 " +
                        (info.player.zhu + info.player.zhong + info.player.fan + info.player.nei -
                            info.player.zhu_win - info.player.zhong_win - info.player.fan_win - info.player.nei_win -
                            info.player.zhu_tie - info.player.zhong_tie - info.player.fan_tie - info.player.nei_tie -
                            info.player.zhu_lose - info.player.zhong_lose - info.player.fan_lose - info.player.nei_lose) + "未完赛<br>";
                    str += "主公" + info.player.zhu + "场 " + info.player.zhu_win + "胜" + info.player.zhu_lose + "负" + info.player.zhu_tie + "平 " +
                        (info.player.zhu - info.player.zhu_win - info.player.zhu_lose - info.player.zhu_tie) + "未完赛<br>";
                    str += "忠臣" + info.player.zhong + "场 " + info.player.zhong_win + "胜" + info.player.zhong_lose + "负" + info.player.zhong_tie + "平 " +
                        (info.player.zhong - info.player.zhong_win - info.player.zhong_lose - info.player.zhong_tie) + "未完赛（" + info.player.zhong_death + "死亡获胜）<br>";
                    str += "反贼" + info.player.fan + "场 " + info.player.fan_win + "胜" + info.player.fan_lose + "负" + info.player.fan_tie + "平 " +
                        (info.player.fan - info.player.fan_win - info.player.fan_lose - info.player.fan_tie) + "未完赛（" + info.player.fan_death + "死亡获胜）<br>";
                    str += "内奸" + info.player.nei + "场 " + info.player.nei_win + "胜" + info.player.nei_lose + "负" + info.player.nei_tie + "平 " +
                        (info.player.nei - info.player.nei_win - info.player.nei_lose - info.player.nei_tie) + "未完赛（" + info.player.nei_solo + "主内单挑）<br>"

                    if (info.player.stat) {
                        str += "<br>场均数据：<br>";
                        str += "输出" + (Math.round((info.player.stat.total_hit) / info.player.stat.total_game * 100) / 100) +
                            " 扣血" + (Math.round((info.player.stat.total_hitted) / info.player.stat.total_game * 100) / 100) +
                            " 回复" + (Math.round((info.player.stat.total_recover) / info.player.stat.total_game * 100) / 100) +
                            " 治疗" + (Math.round((info.player.stat.total_heal) / info.player.stat.total_game * 100) / 100) +
                            " 过牌" + (Math.round((info.player.stat.total_gain) / info.player.stat.total_game * 100) / 100) +
                            " 用牌" + (Math.round((info.player.stat.total_used) / info.player.stat.total_game * 100) / 100) +
                            " 丢牌" + (Math.round((info.player.stat.total_losex) / info.player.stat.total_game * 100) / 100) +
                            " 击杀" + (Math.round((info.player.stat.total_kill) / info.player.stat.total_game * 100) / 100) +
                            "<br>";
                        str += "回合均数据：<br>";
                        str += "输出" + (Math.round((info.player.stat.total_hit) / info.player.stat.total_phase * 100) / 100) +
                            " 扣血" + (Math.round((info.player.stat.total_hitted) / info.player.stat.total_phase * 100) / 100) +
                            " 回复" + (Math.round((info.player.stat.total_recover) / info.player.stat.total_phase * 100) / 100) +
                            " 治疗" + (Math.round((info.player.stat.total_heal) / info.player.stat.total_phase * 100) / 100) +
                            " 过牌" + (Math.round((info.player.stat.total_gain) / info.player.stat.total_phase * 100) / 100) +
                            " 用牌" + (Math.round((info.player.stat.total_used) / info.player.stat.total_phase * 100) / 100) +
                            " 丢牌" + (Math.round((info.player.stat.total_losex) / info.player.stat.total_phase * 100) / 100) +
                            "<br>";
                        str += "单项最佳数据（单场）：<br>";
                        str += "输出" + info.player.stat.max_hit + " 扣血" + info.player.stat.max_hitted + " 回复" + info.player.stat.max_recover +
                            " 治疗" + info.player.stat.max_heal + " 过牌" + info.player.stat.max_gain + " 用牌" + info.player.stat.max_used +
                            " 击杀" + info.player.stat.max_kill + "<br>";
                    };

                    str += "<br>AI胜率：<br>";
                    str += "合计" + (info.ai.zhu + info.ai.zhong + info.ai.fan + info.ai.nei) + "场 " +
                        (info.ai.zhu_win + info.ai.zhong_win + info.ai.fan_win + info.ai.nei_win) + "胜" +
                        (info.ai.zhu_lose + info.ai.zhong_lose + info.ai.fan_lose + info.ai.nei_lose) + "负" +
                        (info.ai.zhu_tie + info.ai.zhong_tie + info.ai.fan_tie + info.ai.nei_tie) + "平 " +
                        (info.ai.zhu + info.ai.zhong + info.ai.fan + info.ai.nei -
                            info.ai.zhu_win - info.ai.zhong_win - info.ai.fan_win - info.ai.nei_win -
                            info.ai.zhu_tie - info.ai.zhong_tie - info.ai.fan_tie - info.ai.nei_tie -
                            info.ai.zhu_lose - info.ai.zhong_lose - info.ai.fan_lose - info.ai.nei_lose) + "未完赛<br>";
                    str += "主公" + info.ai.zhu + "场 " + info.ai.zhu_win + "胜" + info.ai.zhu_lose + "负" + info.ai.zhu_tie + "平 " +
                        (info.ai.zhu - info.ai.zhu_win - info.ai.zhu_lose - info.ai.zhu_tie) + "未完赛（" +
                        info.ai.zhu_side_win + "玩家方获胜 " + info.ai.zhu_side_lose + "玩家方战败）<br>";
                    str += "忠臣" + info.ai.zhong + "场 " + info.ai.zhong_win + "胜" + info.ai.zhong_lose + "负" + info.ai.zhong_tie + "平 " +
                        (info.ai.zhong - info.ai.zhong_win - info.ai.zhong_lose - info.ai.zhong_tie) + "未完赛（" + info.ai.zhong_death + "死亡获胜 " +
                        info.ai.zhong_side_win + "玩家方获胜 " + info.ai.zhong_side_lose + "玩家方战败）<br>";
                    str += "反贼" + info.ai.fan + "场 " + info.ai.fan_win + "胜" + info.ai.fan_lose + "负" + info.ai.fan_tie + "平 " +
                        (info.ai.fan - info.ai.fan_win - info.ai.fan_lose - info.ai.fan_tie) + "未完赛（" + info.ai.fan_death + "死亡获胜 " +
                        info.ai.fan_side_win + "玩家方获胜 " + info.ai.fan_side_lose + "玩家方战败）<br>";
                    str += "内奸" + info.ai.nei + "场 " + info.ai.nei_win + "胜" + info.ai.nei_lose + "负" + info.ai.nei_tie + "平 " +
                        (info.ai.nei - info.ai.nei_win - info.ai.nei_lose - info.ai.nei_tie) + "未完赛（" + info.ai.nei_solo + "主内单挑战败）<br>"

                    if (info.ai.stat) {
                        str += "<br>场均数据：<br>";
                        str += "输出" + (Math.round((info.ai.stat.total_hit) / info.ai.stat.total_game * 100) / 100) +
                            " 扣血" + (Math.round((info.ai.stat.total_hitted) / info.ai.stat.total_game * 100) / 100) +
                            " 回复" + (Math.round((info.ai.stat.total_recover) / info.ai.stat.total_game * 100) / 100) +
                            " 治疗" + (Math.round((info.ai.stat.total_heal) / info.ai.stat.total_game * 100) / 100) +
                            " 过牌" + (Math.round((info.ai.stat.total_gain) / info.ai.stat.total_game * 100) / 100) +
                            " 用牌" + (Math.round((info.ai.stat.total_used) / info.ai.stat.total_game * 100) / 100) +
                            " 丢牌" + (Math.round((info.ai.stat.total_losex) / info.ai.stat.total_game * 100) / 100) +
                            " 击杀" + (Math.round((info.ai.stat.total_kill) / info.ai.stat.total_game * 100) / 100) +
                            "<br>";
                        str += "回合均数据：<br>";
                        str += "输出" + (Math.round((info.ai.stat.total_hit) / info.ai.stat.total_phase * 100) / 100) +
                            " 扣血" + (Math.round((info.ai.stat.total_hitted) / info.ai.stat.total_phase * 100) / 100) +
                            " 回复" + (Math.round((info.ai.stat.total_recover) / info.ai.stat.total_phase * 100) / 100) +
                            " 治疗" + (Math.round((info.ai.stat.total_heal) / info.ai.stat.total_phase * 100) / 100) +
                            " 过牌" + (Math.round((info.ai.stat.total_gain) / info.ai.stat.total_phase * 100) / 100) +
                            " 用牌" + (Math.round((info.ai.stat.total_used) / info.ai.stat.total_phase * 100) / 100) +
                            " 丢牌" + (Math.round((info.ai.stat.total_losex) / info.ai.stat.total_phase * 100) / 100) +
                            "<br>";
                        str += "单项最佳数据（单场）：<br>";
                        str += "输出" + info.ai.stat.max_hit + " 扣血" + info.ai.stat.max_hitted + " 回复" + info.ai.stat.max_recover +
                            " 治疗" + info.ai.stat.max_heal + " 过牌" + info.ai.stat.max_gain + " 用牌" + info.ai.stat.max_used +
                            " 击杀" + info.ai.stat.max_kill + "<br>";
                    };

                    radiance_pack.characterIntro[name] = radiance_pack.characterIntro[name] + str;
                };
                lib.skill._radiance_winrate = {
                    trigger: {
                        global: ['gameStart'],
                    },
                    forced: true,
                    fixed: true,
                    superCharlotte: true,
                    charlotte: true,
                    popup: false,
                    firstDo: true,
                    priority: Infinity,
                    filter: function(event, player, name) {
                        if (get.mode() != 'identity' || _status.mode == 'purple') return false;
                        return lib.watersky.func.checkPacks(player, 'radiance');
                    },
                    content: function() {
                        'step 0'
                        var identity = player.identity;
                        if (identity == 'mingzhong') identity = 'zhong';
                        var map = (player == game.me ? 'player' : 'ai');
                        if (!lib.config.radianceWinRateAccumulated) lib.config.radianceWinRateAccumulated = {};
                        var database = lib.config.radianceWinRateAccumulated;

                        if (player.name && player.name.indexOf('radiance') == 0) {
                            lib.watersky.func.defaultWinRate(player.name);
                            database[player.name][map][identity] += 1;
                        };
                        if (player.name1 && player.name1.indexOf('radiance') == 0 && player.name != player.name1) {
                            lib.watersky.func.defaultWinRate(player.name1);
                            database[player.name1][map][identity] += 1;
                        };
                        if (player.name2 && player.name2.indexOf('radiance') == 0 && player.name != player.name2 && player.name1 != player.name2) {
                            lib.watersky.func.defaultWinRate(player.name2);
                            database[player.name2][map][identity] += 1;
                        };
                        game.saveConfigValue('radianceWinRateAccumulated');
                    },
                };
                lib.skill._radiance_stat = {
                    trigger: {
                        player: ['loseHpEnd', 'recoverEnd', 'loseEnd'],
                    },
                    forced: true,
                    fixed: true,
                    superCharlotte: true,
                    charlotte: true,
                    popup: false,
                    firstDo: true,
                    priority: Infinity,
                    filter: function(event, player, name) {
                        if (event.name == 'lose') return event.cards2.length > 0;
                        return event.num > 0;
                    },
                    content: function() {
                        var name = trigger.name;
                        var num = trigger.num;
                        if (name == 'lose') num = trigger.cards2.length;
                        if (player.stat[player.stat.length - 1][name] == undefined) {
                            player.stat[player.stat.length - 1][name] = num;
                        } else {
                            player.stat[player.stat.length - 1][name] += num;
                        };
                        if (name == 'loseHp' && trigger.getParent().player != player) {
                            if (trigger.getParent().player.stat[trigger.getParent().player.stat.length - 1].loseSource == undefined) {
                                trigger.getParent().player.stat[trigger.getParent().player.stat.length - 1].loseSource = num;
                            } else {
                                trigger.getParent().player.stat[trigger.getParent().player.stat.length - 1].loseSource += num;
                            };
                        };
                        if (name == 'recover' && trigger.source && trigger.source != player) {
                            if (trigger.source.stat[trigger.source.stat.length - 1].heal == undefined) {
                                trigger.source.stat[trigger.source.stat.length - 1].heal = num;
                            } else {
                                trigger.source.stat[trigger.source.stat.length - 1].heal += num;
                            };
                        };
                        if (name == 'lose' && trigger.type != 'use') {
                            if (player.stat[player.stat.length - 1].losex == undefined) {
                                player.stat[player.stat.length - 1].losex = num;
                            } else {
                                player.stat[player.stat.length - 1].losex += num;
                            };
                            if (trigger.type == 'discard') {
                                if (player.stat[player.stat.length - 1].discard == undefined) {
                                    player.stat[player.stat.length - 1].discard = num;
                                } else {
                                    player.stat[player.stat.length - 1].discard += num;
                                };
                            };
                        };
                    },
                };
                lib.onover.push(function(bool) {
                    if (get.mode() != 'identity' || _status.mode == 'purple') return false;
                    var database = lib.config.radianceWinRateAccumulated;
                    if (!database) return;
                    var updateWinRate = function(player) {
                        var map = (player == game.me ? 'player' : 'ai');
                        var identity = player.identity
                        if (identity == 'mingzhong') identity = 'zhong';
                        var result;
                        if (game.directWinner) {
                            var decider = game.directWinner.identity;
                            if (decider == 'mingzhong') decider = 'zhong';
                            if (['zhu', 'zhong'].contains(decider) && ['zhu', 'zhong'].contains(identity)) {
                                result = 'win';
                            } else if (decider == 'fan' && identity == 'fan') {
                                result = 'win';
                            } else {
                                result = 'lose';
                            };
                        } else {
                            var decider = game.me.identity;
                            if (decider == 'mingzhong') decider = 'zhong';
                            switch (identity) {
                                case 'zhu':
                                    if (typeof bool == 'boolean') {
                                        if (player.isDead()) {
                                            result = 'lose';
                                        } else {
                                            result = 'win';
                                        };
                                    } else {
                                        result = 'tie';
                                    };
                                    break;
                                case 'zhong':
                                    if (typeof bool == 'boolean') {
                                        if (game.zhu.isDead()) {
                                            result = 'lose';
                                        } else {
                                            result = 'win';
                                        };
                                    } else {
                                        result = 'tie';
                                    };
                                    break;
                                case 'fan':
                                    if (typeof bool == 'boolean') {
                                        if ((get.population('fan') + get.population('zhong') > 0 || get.population('nei') > 1) && game.zhu.isDead()) {
                                            result = 'win';
                                        } else {
                                            result = 'lose';
                                        };
                                    } else {
                                        result = 'tie';
                                    };
                                    break;
                                case 'nei':
                                    if (bool === true || bool === false) {
                                        if (game.players.length == 1 && player.isAlive()) {
                                            result = 'win';
                                        } else {
                                            result = 'lose';
                                        };
                                    } else {
                                        result = 'tie';
                                    };
                                    break;
                                default:
                                    result = 'tie';
                                    break;
                            };
                        };
                        if (typeof result == 'string') {
                            var dead = ['zhong', 'fan'].contains(identity) && !player.isAlive() && result == 'win';
                            var solo = identity == 'nei' && game.players.length == 1 && _status.event.name == 'die' && _status.event.player == player && result == 'lose';
                            var side = map == 'ai' && ((['zhu', 'zhong'].contains(identity) && ['zhu', 'zhong'].contains(decider)) || (identity == 'fan' && decider == 'fan'));
                            var against = map == 'ai' && bool === false && result == 'win' && identity != 'nei';
                            if (player.name && player.name.indexOf('radiance') == 0) {
                                database[player.name][map][identity + '_' + result] += 1;
                                if (dead) database[player.name][map][identity + '_death'] += 1;
                                if (solo) database[player.name][map][identity + '_solo'] += 1;
                                if (side) database[player.name][map][identity + '_side_' + result] += 1;
                                if (against) database[player.name][map][identity + '_against'] += 1;
                            };
                            if (player.name1 && player.name1.indexOf('radiance') == 0 && player.name != player.name1) {
                                database[player.name1][map][identity + '_' + result] += 1;
                                if (dead) database[player.name1][map][identity + '_death'] += 1;
                                if (solo) database[player.name1][map][identity + '_solo'] += 1;
                                if (side) database[player.name1][map][identity + '_side_' + result] += 1;
                                if (against) database[player.name1][map][identity + '_against'] += 1;
                            };
                            if (player.name2 && player.name2.indexOf('radiance') == 0 && player.name != player.name2 && player.name1 != player.name2) {
                                database[player.name2][map][identity + '_' + result] += 1;
                                if (dead) database[player.name2][map][identity + '_death'] += 1;
                                if (solo) database[player.name2][map][identity + '_solo'] += 1;
                                if (side) database[player.name2][map][identity + '_side_' + result] += 1;
                                if (against) database[player.name2][map][identity + '_against'] += 1;
                            };
                        };
                    };
                    var updateStat = function(player) {
                        var database = lib.config.radianceWinRateAccumulated;
                        if (!database) return;
                        var map = (player == game.me ? 'player' : 'ai');
                        var phase = Math.max(1, player.phaseNumber);
                        var keys = {
                            damage: 0,
                            damaged: 0,
                            recover: 0,
                            loseHp: 0,
                            loseSource: 0,
                            heal: 0,
                            gain: 0,
                            discard: 0,
                            lose: 0,
                            losex: 0,
                            kill: 0,
                        };
                        for (var i in keys) {
                            for (j = 0; j < player.stat.length; j++) {
                                if (player.stat[j][i] != undefined) keys[i] += player.stat[j][i];
                            };
                        };
                        keys.used = 0;
                        for (j = 0; j < player.stat.length; j++) {
                            for (k in player.stat[j].card) {
                                keys.used += player.stat[j].card[k];
                            };
                        };
                        keys.hit = keys.damage + keys.loseSource;
                        keys.hitted = keys.damaged + keys.loseHp;
                        var updateStatName = function(name) {
                            if (!database[name][map].stat) database[name][map].stat = {};
                            if (!database[name][map].stat.total_phase) database[name][map].stat.total_phase = 0;
                            if (!database[name][map].stat.total_game) database[name][map].stat.total_game = 0;
                            database[name][map].stat.total_phase += phase;
                            database[name][map].stat.total_game += 1;

                            for (var i in keys) {
                                if (!database[name][map].stat['total_' + i]) database[name][map].stat['total_' + i] = 0; //总数值
                                database[name][map].stat['total_' + i] += keys[i];
                                if (!database[name][map].stat['max_' + i]) database[name][map].stat['max_' + i] = -1; //单次最大
                                database[name][map].stat['max_' + i] = Math.max(keys[i], database[name][map].stat['max_' + i]);
                                if (!database[name][map].stat['max_average_' + i]) database[name][map].stat['max_average_' + i] = -1; //回合均最大
                                database[name][map].stat['max_average_' + i] = Math.max(keys[i] / phase, database[name][map].stat['max_average_' + i]);
                            };
                        };

                        if (player.name && player.name.indexOf('radiance') == 0) {
                            updateStatName(player.name);
                        };
                        if (player.name1 && player.name1.indexOf('radiance') == 0 && player.name != player.name1) {
                            updateStatName(player.name1);
                        };
                        if (player.name2 && player.name2.indexOf('radiance') == 0 && player.name != player.name2 && player.name1 != player.name2) {
                            updateStatName(player.name2);
                        };

                    };
                    var list = game.players.slice(0).concat(game.dead);
                    for (var i = 0; i < list.length; i++) {
                        updateWinRate(list[i]);
                        updateStat(list[i]);
                    };
                    game.saveConfigValue('radianceWinRateAccumulated');
                });
            };
            game.addCharacterPack(radiance_pack, "星耀璨然");
        },
        precontent: function() {

        },
        help: {},
        config: {
            "radianceOnly": {
                name: '星耀限定',
                intro: "开启后，只能使用星耀璨然角色（开启其他扩展的类似功能前请关闭此功能）",
                init: false,
                onclick: function(item) {
                    game.saveConfig('extension_星耀璨然_radianceOnly', item);
                    game.saveConfig('radianceOnly', item);
                }
            },
            "radianceGroupSetting": {
                name: '选择势力',
                intro: "调整特定的势力设置",
                init: lib.config.radianceGroupSetting === undefined ? "none" : lib.config.radianceGroupSetting,
                item: {
                    "none": "无改变",
                    "select": "散、遗、圣、冥的角色选择势力",
                    "replace": "将势力替换为官方武将的势力",
                },
                onclick: function(item) {
                    game.saveConfig('extension_星耀璨然_radianceGroupSetting', item);
                    game.saveConfig('radianceGroupSetting', item);
                },
            },
            "radianceEnhanceZhu": {
                name: '主公强化',
                intro: "主公根据存活忠臣数获得额外的体力上限和摸牌阶段摸牌，不会被乐",
                init: false,
                onclick: function(item) {
                    game.saveConfig('extension_星耀璨然_radianceEnhanceZhu', item);
                    game.saveConfig('radianceEnhanceZhu', item);
                },
            },
            "radianceWinRate": {
                name: "胜率统计",
                intro: "开启后，将统计此扩展内的武将胜率及场均数据等，显示在武将介绍中",
                init: lib.config.radianceWinRate === undefined ? "no" : lib.config.radianceWinRate,
                item: {
                    "no": "未开启",
                    "yes": "开启",
                    "clear": "清除（重启后变为未开启）",
                },
                onclick: function(item) {
                    if (item == "clear") {
                        item = "no";
                        game.saveConfig("radianceWinRateAccumulated");
                    };
                    game.saveConfig('extension_星耀璨然_radianceWinRate', item);
                    game.saveConfig('radianceWinRate', item);
                },
            },
            "radianceWinRateByVersion": {
                name: "新版本武将胜率重置",
                intro: "清除当前版本更新过的武将的历史胜率（请先打开胜率统计功能）",
                init: false,
                onclick: function(item) {
                    if (item === true) {
                        item = false;
                        //  var toClearByVersion = ["radiance_he020_hope"];
                        if (lib.config.radianceWinRateAccumulated) {
                            var database = lib.config.radianceWinRateAccumulated;
                            for (var i = 0; i < toClearByVersion.length; i++) {
                                database[toClearByVersion[i]] = {};
                            };
                        };
                        game.saveConfigValue("radianceWinRateAccumulated");
                    };
                    game.saveConfig('extension_星耀璨然_radianceWinRateByVersion', item);
                    game.saveConfig('radianceWinRateByVersion', item);
                },
            },
        },
        package: {
            character: {
                character: {},
                translate: {},
                characterTitle: {},
            },
            card: {
                card: {},
                translate: {},
                list: [],
            },
            skill: {
                skill: {
                    // ggeneral
                    "radiance_zhu": {
                        trigger: {
                            global: 'dieAfter',
                            player: 'phaseDrawBegin1',
                        },
                        filter: function(event, player, name) {
                            if (name == 'dieAfter' && player.maxHp > 1) {
                                switch (player.identity) {
                                    case 'rZhu':
                                        return ['rZhong', 'bNei'].contains(event.player.identity);
                                        break;
                                    case 'bZhu':
                                        return ['bZhong', 'rNei'].contains(event.player.identity);
                                        break;
                                    default:
                                        return event.player.identity == 'zhong';
                                        break;
                                };
                            };
                            if (name == 'phaseDrawBegin1') return !event.numFixed;
                            return false;
                        },
                        forced: true,
                        charlotte: true,
                        fixed: true,
                        content: function() {
                            'step 0'
                            if (trigger.name == 'phaseDraw') {
                                trigger.num += (game.countPlayer(function(target) {
                                    switch (player.identity) {
                                        case 'rZhu':
                                            return ['rZhong', 'bNei'].contains(target.identity);
                                            break;
                                        case 'bZhu':
                                            return ['bZhong', 'rNei'].contains(target.identity);
                                            break;
                                        default:
                                            return target.identity == 'zhong';
                                            break;
                                    };
                                    return false;
                                }) > 0 ? 1 : 0);
                            } else {
                                player.loseMaxHp();
                            }
                        },
                        mod: {
                            targetEnabled: function(card, player, target) {
                                if (get.name(card) == 'lebu' && player != target) return false;
                            },
                        },
                        ai: {
                            threaten: function(viewer, player) {
                                if (player.hp <= 2) return;
                                var num = game.countPlayer(function(target) {
                                    switch (player.identity) {
                                        case 'rZhu':
                                            return ['rZhong', 'bNei'].contains(target.identity);
                                            break;
                                        case 'bZhu':
                                            return ['bZhong', 'rNei'].contains(target.identity);
                                            break;
                                        default:
                                            return target.identity == 'zhong';
                                            break;
                                    };
                                    return false;
                                });
                                return 0.6 / (1 + num);
                            },
                        }
                    },
                    "radiance_losehp1": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.type(card) == 'basic' || get.type(card) == 'trick') return true;
                            return false;
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并无效【' + get.translation(event.card) + '】？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;
                            var card = event.card;
                            var id = player.playerid;
                            var map = event.getParent().customArgs;
                            var need = 1;
                            if (get.tag(card, 'respondSha')) {
                                if (map[id] && typeof map[id].shaReq == 'number') need = map[id].shaReq;
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'respondShan')) {
                                if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'damage') && get.name(card) != 'huogong') {
                                return true;
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            'step 1'
                            trigger.getParent().excluded.add(player);
                            game.delay();
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },
                    "radiance_losehp2": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.type(card, 'trick') != 'equip') return true;
                            return false;
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并取消【' + get.translation(event.card) + '】？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;

                            if (get.tag(event.card, 'respondSha')) {
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) == 0) {
                                    return true;
                                }
                            } else if (get.tag(event.card, 'respondShan')) {
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) == 0) {
                                    return true;
                                }
                            } else if (get.tag(event.card, 'damage')) {
                                if (player.countCards('h') < 2) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            'step 1'
                            if (!event.isMine()) game.delayx();
                            trigger.getParent().targets.remove(player);
                            trigger.getParent().triggeredTargets2.remove(player);
                            'step 2'
                            game.delay();
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },
                    "radiance_losehp3": {
                        trigger: {
                            player: "damageBefore",
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并取消此伤害？';
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            'step 1'
                            player.loseHp();
                        },
                        ai: {
                            threaten: 0.6,
                        },
                    },
                    "radiance_forbid": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        debuff: true,
                        marktext: "禁",
                        mod: {
                            cardEnabled2: function(card) {
                                return false;
                            },
                        },
                        intro: {
                            name: "禁牌",
                            content: "不能使用或打出牌",
                        },
                        ai: {
                            neg: true,
                            forbid_card: true,
                            threaten: 8,
                        },
                    },
                    "radiance_noequip2": {
                        ai: {
                            unequip_ai: true,
                            unequip: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.storage.radiance_noequip2) return true;
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            }
                        },
                        locked: true,
                        charlotte: true,
                        onremove: function(player) {
                            if (player.storage.radiance_noequip2) delete player.storage.radiance_noequip2;
                        },
                    },
                    "radiance_wudi": {
                        trigger: {
                            player: 'damageBefore',
                        },
                        mark: true,
                        marktext: "免",
                        forced: true,
                        charlotte: true,
                        priority: 65536,
                        content: function() {
                            trigger.cancel();
                        },
                        ai: {
                            nofire: true,
                            nothunder: true,
                            noice: true,
                            nodamage: true,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) return 'zerotarget';
                                }
                            },
                        },
                        intro: {
                            content: "Who's Your Daddy?",
                        },
                    },
                    "radiance_used": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        intro: {
                            content: "技能已使用",
                        },
                    },

                    // mmagic
                    "radiance_bofa": {
                        init: function(player) {
                            if (!player.storage.radiance_bofa) player.storage.radiance_bofa = [];
                        },
                        intro: {
                            content: 'cards',
                            onunmark: function(storage, player) {
                                if (storage && storage.length) {
                                    player.$throw(storage, 1000);
                                    game.cardsDiscard(storage);
                                    game.log(storage, '被置入了弃牌堆');
                                    storage.length = 0;
                                }
                            },
                        },
                        trigger: {
                            global: 'useCard2',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;

                            var card = event.card;
                            if (get.type(card, 'trick') == 'equip') return false;
                            for (var i = 0; i < player.storage.radiance_bofa.length; i++) {
                                if (get.suit(event.card) == get.suit(player.storage.radiance_bofa[i])) return true;
                            }
                            return false;
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            player.chooseCardButton(player.storage.radiance_bofa, '选择一张与' + get.translation(trigger.card) + '花色相同的牌来取消该牌的所有目标', 1).set('filterButton', function(button) {
                                var card = button.link;
                                return get.suit(card) == get.suit(trigger.card);
                            }).set('ai', function(button) {
                                //if (trigger.getParent().excluded.contains(player)) return false;

                                var effect = 0;
                                if (trigger.card.name == 'wuxie' || trigger.card.name == 'shan') {
                                    if (get.attitude(player, trigger.player) < -1) {
                                        effect = -1;
                                    }
                                } else if (trigger.targets && trigger.targets.length) {
                                    for (var i = 0; i < trigger.targets.length; i++) {
                                        effect += get.effect(trigger.targets[i], trigger.card, trigger.player, player);
                                    }
                                }

                                var bool = false;
                                if (effect < 0) {
                                    if (player.storage.radiance_bofa.length && player.storage.radiance_bofa.length > 3) bool = true;
                                    if (trigger.card.name == 'sha') {
                                        if (trigger.targets.contains(player)) {
                                            if (player.countCards('h', 'shan') == 0) {
                                                bool = true;
                                            }
                                        } else {
                                            var target = trigger.targets[0];
                                            bool = (target.hp == 1 || (target.countCards('h') <= 2 && target.hp <= 2));
                                        }
                                    } else if (get.tag(trigger.card, 'respondSha')) {
                                        if (player.countCards('h', 'sha') == 0) {
                                            bool = true;
                                        }
                                    } else if (get.tag(trigger.card, 'respondShan')) {
                                        if (player.countCards('h', 'shan') == 0) {
                                            bool = true;
                                        }
                                    } else if (get.tag(trigger.card, 'damage')) {
                                        if (player.getDamagedHp() > 1) bool = true;
                                    } else if (get.name(trigger.card) == 'shunshou') {
                                        bool = true;
                                    } else if (get.tag(trigger.card, 'recover')) {
                                        bool = true;
                                    } else if (trigger.card.name == 'wuxie' || trigger.card.name == 'shan') {
                                        bool = true;
                                    }
                                }

                                if (!bool) return 0;

                                var val = get.value(button.link);
                                if (val < 0) return 100;
                                return 20 - val;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_bofa');
                                game.log(player, '将', result.links, '置于弃牌堆');
                                player.$throw(result.links, 1000);
                                player.storage.radiance_bofa.remove(result.links[0]);
                                game.cardsDiscard(result.links[0]);
                                player.syncStorage('radiance_bofa');

                                if (player.storage.radiance_bofa.length < 1) {
                                    player.unmarkSkill('radiance_bofa');
                                } else {
                                    player.markSkill('radiance_bofa');
                                }

                                if (!event.isMine()) game.delayx();
                                trigger.targets = [];
                                trigger.triggeredTargets2 = [];
                                trigger.all_excluded = true;
                                game.delay();
                            }
                        },
                        ai: {
                            threaten: 0.6,
                        },
                        onremove: function(player) {
                            if (player.storage.radiance_bofa.length) {
                                player.$throw(player.storage.radiance_bofa, 1000);
                                game.log(player.storage.radiance_bofa, '被置入了弃牌堆');
                                game.cardsDiscard(player.storage.radiance_bofa);
                                player.storage.radiance_bofa = [];
                                player.unmarkSkill('radiance_bofa');
                            }
                        },
                        group: 'radiance_bofa_gain',
                        subfrequent: ['gain'],
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: ['phaseZhunbeiBegin', 'damageAfter', 'loseHpAfter'],
                                },
                                frequent: true,
                                filter: function(event, player) {
                                    if (event.num === undefined) return true;
                                    return event.num > 0;
                                },
                                content: function() {
                                    'step 0'
                                    if (!player.storage.radiance_bofa) player.storage.radiance_bofa = [];
                                    if (player.storage.radiance_bofa.length < 5) {
                                        var card1 = get.cards(1);
                                        game.cardsGotoSpecial(card1);
                                        player.storage.radiance_bofa = player.storage.radiance_bofa.addArray(card1);
                                        player.$gain2(card1);
                                        player.syncStorage('radiance_bofa');
                                        player.markSkill('radiance_bofa');
                                        game.log(player, '将', card1, '置于武将牌上');
                                        game.delay();
                                    }
                                    if (player.countCards('h') > 0) {
                                        event.num = player.countCards('h');
                                    } else {
                                        event.finish();
                                    }
                                    'step 1'
                                    var next = player.chooseToMove('请选择保留' + get.cnNumber(event.num) + '张牌作为手牌');
                                    next.set('list', [
                                        ['「博法」牌', player.storage.radiance_bofa],
                                        ['手牌区', player.getCards('h')],
                                    ]);
                                    next.set('filterMove', function(from, to) {
                                        return typeof to != 'number';
                                    });
                                    next.set('processAI', function(list) {
                                        var player = _status.event.player,
                                            cards = list[0][1].concat(list[1][1]).sort(function(a, b) {
                                                return get.useful(a) - get.useful(b);
                                            }),
                                            cards2 = cards.splice(0, player.storage.radiance_bofa.length);
                                        return [cards2, cards];
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var push = result.moved[0],
                                            gain = result.moved[1];
                                        push.removeArray(player.storage.radiance_bofa);
                                        gain.removeArray(player.getCards('h'));
                                        if (!push.length || push.length != gain.length) return;
                                        player.lose(push, ui.special, 'toStorage');
                                        game.log(player, '将', push, '置于武将牌上');
                                        player.gain(gain, 'gain2', 'log', 'fromStorage');
                                        player.storage.radiance_bofa.addArray(push);
                                        player.storage.radiance_bofa.removeArray(gain);
                                        player.markSkill('radiance_bofa');
                                    };
                                },
                            },
                        },
                    },
                    "radiance_xuehui": {
                        trigger: {
                            global: "loseHpAfter",
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('radiance_xuehui', event.player) || player.hasSkill('radiance_xuehui_used')) return false;
                            if (event.num < 1 || !event.player.isIn()) return false;
                            return event.player != player && event.player.group == player.group;
                        },
                        zhuSkill: true,
                        direct: true,
                        content: function() {
                            'step 0'
                            trigger.player.chooseBool('学会：是否令' + get.translation(player) + '摸一张牌？').set('ai', function() {
                                return get.attitude(trigger.player, player) >= 1;
                            });
                            'step 1'
                            if (result.bool) {
                                trigger.player.logSkill('radiance_xuehui', player);
                                player.draw();
                                trigger.player.line(player);
                                trigger.player.addExpose(0.1);
                                trigger.player.popup('radiance_xuehui');
                                player.addTempSkill('radiance_xuehui_used');
                            }
                        },
                        subSkill: {
                            used: {
                                inherit: 'radiance_used',
                            },
                        },
                    },
                    "radiance_tianyi": {
                        usable: 1,
                        enable: ['chooseToUse', 'chooseToRespond'],
                        filter: function(event, player) {
                            if (player.storage.radiance_tianyi && player.countCards('hes', card => get.type(card) != 'basic') > 0) return true;
                            if (!player.storage.radiance_tianyi && player.countCards('hes') > 1) return true;
                            return false;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                }
                                if (list.length == 0) {
                                    return ui.create.dialog('天仪没有可用牌');
                                }
                                return ui.create.dialog('天仪', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                var evt = _status.event.getParent();
                                return evt.filterCard({
                                    name: button.link[2]
                                }, player, evt);
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                var name = button.link[2];

                                if (player.countCards('hs', button.link[2]) > 0) return 0;
                                if (name == 'wugu' || name == 'huogong') return 0;

                                var evt = _status.event.getParent('chooseToUse', true);
                                if (evt && evt.type == 'dying') {
                                    if (player.countCards('hs', function(card) {
                                            return get.tag(card, 'save') && lib.filter.cardSavable(card, player, evt.dying) && player.canUse(card, evt.dying);
                                        })) return 0;
                                    if (evt.dying != player && get.effect(evt.dying, {
                                            name: name
                                        }, player, player) <= 0) return 0;
                                    if (evt.dying == player && name == 'jiu') return 1.9;
                                    return 2;
                                };

                                var effect = player.getUseValue(button.link[2]);
                                if (effect > 0) {
                                    if (!player.storage.radiance_tianyi && player.countCards('hes', function(card) {
                                            return player.getUseValue(card) < effect;
                                        }) > 1) return effect;
                                    if (player.storage.radiance_tianyi && player.countCards('hes', function(card) {
                                            return get.type(card) != 'basic' && player.getUseValue(card) < effect;
                                        }) > 0) return effect;
                                };
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        if (player.storage.radiance_tianyi) return get.type(card) != 'basic';
                                        return true;
                                    },
                                    selectCard: function() {
                                        var player = _status.event.player;
                                        if (player.storage.radiance_tianyi) return 1;
                                        return 2;
                                    },
                                    popname: true,
                                    check: function(card) {
                                        return 9.1 - get.alteredValue(card);
                                    },
                                    position: 'hes',
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3],
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_tianyi');
                                        if (player.storage.radiance_tianyi === true) {
                                            player.storage.radiance_tianyi = false;
                                        } else {
                                            player.storage.radiance_tianyi = true;
                                        };
                                    },
                                    onrespond: function(result, player) {
                                        player.logSkill('radiance_tianyi');
                                        if (player.storage.radiance_tianyi === true) {
                                            player.storage.radiance_tianyi = false;
                                        } else {
                                            player.storage.radiance_tianyi = true;
                                        };
                                    },
                                }
                            },
                            prompt: function(links, player) {
                                var str = "将";
                                if (player.storage.radiance_tianyi === true) {
                                    str += "一张非基本牌";
                                } else {
                                    str += "两张牌";
                                };
                                str += "当做" + (get.translation(links[0][3]) || "") + get.translation(links[0][2]) + "使用或打出";
                                return str;
                            }
                        },
                        hiddenCard: function(player, name) {
                            if (!player.storage.radiance_tianyi && player.countCards('hes') < 2) return false;
                            if (player.storage.radiance_tianyi && player.countCards('hes', card => get.type(card) != 'basic') < 1) return false;
                            var num = player.getStat().skill.radiance_tianyi;
                            if (typeof num != 'number' || num < 1) return name == 'wuxie';
                        },
                        ai: {
                            save: true,
                            respondSha: true,
                            respondShan: true,
                            skillTagFilter: function(player) {
                                var num = player.getStat().skill.radiance_tianyi;
                                if (typeof num == 'number' && num > 0) return false;
                                if (!player.storage.radiance_tianyi && player.countCards('hes') < 2) return false;
                                if (player.storage.radiance_tianyi && player.countCards('hes', card => get.type(card) != 'basic') < 1) return false;
                            },
                            order: 4,
                            result: {
                                player: function(player) {
                                    var allshown = true,
                                        players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                }
                            },
                            threaten: 1.9,
                        },
                    },
                    "radiance_pofa": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        intro: {
                            content: '还能获得#张锦囊',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.type(card, 'trick') == 'trick') return true;
                            return false;
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并取消【' + get.translation(event.card) + '】？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;

                            if (get.tag(event.card, 'respondSha')) {
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) == 0) {
                                    return true;
                                }
                            } else if (get.tag(event.card, 'respondShan')) {
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) == 0) {
                                    return true;
                                }
                            } else if (get.tag(event.card, 'damage')) {
                                if (player.countCards('h') < 2) return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            player.addTempSkill('radiance_pofa_af');
                            player.storage.radiance_pofa = 3;
                            'step 1'
                            if (!event.isMine()) game.delayx();
                            trigger.getParent().targets.remove(player);
                            trigger.getParent().triggeredTargets2.remove(player);
                            game.delay();
                        },
                        ai: {
                            threaten: 0.6,
                        },
                        action_tag: {
                            overall: 4,
                            loseHp_defend: true,
                            reuse: 2,
                        }
                    },
                    "radiance_pofa_af": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter"],
                        },
                        forced: true,
                        charlotte: true,
                        filter: function(event, player) {
                            if (player.countMark('radiance_pofa') < 1) return false;

                            var cards = (event.cards2 || event.cards);
                            if (!cards) return false;
                            if (event.name == 'lose') {
                                if (event.type != 'discard' || event.player == player) return false;
                            } else {
                                var evt = event.getParent();
                                if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player == player) return false;
                            };

                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i], 'trick') == 'trick' && (get.position(cards[i], true) == 'd')) return true;
                            };
                            return false;
                        },
                        onremove: function(player, storage) {
                            player.removeMark('radiance_pofa', 9);
                        },
                        content: function() {
                            'step 0'
                            event.cards = [];
                            var cards = trigger.cards2 || trigger.cards;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i], 'trick') == 'trick' && get.position(cards[i], true) == 'd') {
                                    event.cards.push(cards[i]);
                                    player.removeMark('radiance_pofa', 1);
                                    if (player.countMark('radiance_pofa') == 0) break;
                                };
                            };
                            'step 1'
                            player.gain(event.cards, 'gain2', 'log');
                        },
                        mod: {
                            targetEnabled: function(card, player, target) {
                                if ((get.type2(card) == 'trick') && player != target) return false;
                            },
                        },
                    },
                    "radiance_zhisu": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            if (game.isHonorRadiance === true) {
                                return player.isDamaged();
                            }
                            return true;
                        },
                        content: function() {
                            'step 0'
                            var num = Math.max(player.getDamagedHp(), 1);
                            // event.cards = get.cards(num);
                            // player.gain(event.cards, 'draw');
                            event.next2 = player.draw(num);
                            'step 1'
                            var cards = event.next2.result.slice(0);
                            for (var i = 0; i < cards.length; i++) {
                                if (!lib.watersky.func.isPrime(get.number(cards[i]), true)) {
                                    cards.splice(i--, 1);
                                };
                            };
                            event.cards = cards;
                            if (cards.length > 0) {
                                player.chooseTarget(1, "对一名其他角色造成" + cards.length + "点伤害", lib.filter.notMe).set('ai', function(target) {
                                    var player = _status.event.player;
                                    var eff = get.damageEffect(target, player, player);
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    return eff;
                                });
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                player.showCards(cards, "获得的牌中点数为1或质数的牌");
                                player.line(result.targets[0], 'blue');
                                result.targets[0].damage(player, cards.length, 'nocard');
                            };
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: function(player, target) {
                                    return 1;
                                }
                            },
                            threaten: 0.8,
                        },
                        action_tag: {
                            overall: 4,
                            damage: 0.75,
                            draw: 0.75,
                            deterrence: 1,
                            in: 1,
                        },
                    },
                    "radiance_guiji": {
                        trigger: {
                            target: 'useCardToPlayer',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            if (!game.hasPlayer(function(current) {
                                    return !(event.targets.contains(current));
                                })) return false;

                            var card = event.card;
                            if (get.type(card) != 'equip') return true;
                            return false;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var num = 1;
                            var str = "失去1点体力并改变" + get.translation(trigger.card) + "的目标"
                            if (trigger.targets.length == 1) {
                                if (get.type(trigger.card) != 'delay') num++;
                                str += "（且可增加一个目标）";
                            };
                            event.count = trigger.getParent().targets.length
                            player.chooseTarget(get.prompt('radiance_guiji'), str, [1, num], function(card, player, target) {
                                var trigger = _status.event.getTrigger();
                                return !trigger.targets.contains(target);
                            }).set('ai', function(target) {
                                var trigger = _status.event.getTrigger();
                                var card = trigger.card;
                                var player = _status.event.player;
                                var eff1 = get.effect(player, card, trigger.player, player);

                                if (trigger.excluded.contains(player)) return 0;
                                if (eff1 >= 0) return 0;

                                var check = (1 - get.attitude(player, target)) / 10;
                                if (check <= 0) return 0;

                                var eff2 = get.effect(target, card, trigger.player, player);

                                var id = player.playerid;
                                var map = trigger.getParent().customArgs;
                                var need = 1;

                                if (get.tag(card, 'respondSha')) {
                                    if (map[id] && typeof map[id].shaReq == 'number') need = map[id].shaReq;
                                    if (player.countCards('h', {
                                            name: 'sha'
                                        }) < need) {
                                        return Math.max(check, eff2);
                                    }
                                } else if (get.tag(card, 'respondShan')) {
                                    if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                                    if (player.countCards('h', {
                                            name: 'shan'
                                        }) < need) {
                                        return Math.max(check, eff2);
                                    }
                                } else if (get.tag(card, 'damage') && get.name(card) != 'huogong') {
                                    return Math.max(check, eff2);
                                } else if (!get.tag(card, 'damage')) {
                                    if (get.name(card) == 'tiesuo' && player.hp > 1) return Math.max(check, eff2);
                                    if (!player.isDamaged()) return Math.max(check, eff2);
                                }
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                if (!event.isMine()) game.delayx();
                                event.targets = result.targets;
                                trigger.getParent().targets.remove(player);
                                trigger.getParent().triggeredTargets1.remove(player);
                                trigger.getParent().targets.addArray(event.targets);
                                trigger.getParent().excluded.add(player);
                                player.line(event.targets, 'water');
                                player.logSkill('radiance_guiji', event.targets);
                                game.log(player, "将", trigger.card, "转移给了", event.targets);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (event.count > 1 || !get.tag(trigger.card, 'damage')) player.draw(2);
                            // trigger.untrigger(true);
                            // trigger.getParent().goto(9);
                            'step 3'
                            player.loseHp(1);
                            game.delay(0, 1);
                        },
                        ai: {
                            threaten: 0.6,
                        },
                        action_tag: {
                            overall: 4,
                            loseHp_defend: 1,
                            deterrence: 1,
                        },
                    },
                    "radiance_aofa": {
                        trigger: {
                            player: 'useCard',
                            target: 'useCardToTargeted',
                        },
                        usable: 1,
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_aofa_db')) return false;
                            if (event.name == 'useCard') return true;
                            return get.tag(event.card, 'damage');
                        },
                        check: function(event, player) {
                            if (event.name == 'useCard') return true;
                            if (Array.isArray(player.storage.radiance_jingyao_af) && player.storage.radiance_jingyao_af.length > 0) return true;
                            if (player.hp == 1) return true;
                            if (get.attitude(player, event.player) > 0) return true;
                            return game.getGlobalHistory('useCard', function(evt) {
                                return evt.targets.contains(player);
                            }).length > 1;
                        },
                        prompt2: function(event, player) {
                            var num = 1;
                            if (Array.isArray(player.storage.radiance_jingyao_af) && player.storage.radiance_jingyao_af.length > 0) num += 1;
                            if (event.name == 'useCard') {
                                if (player == _status.currentPhase) num += 1;
                                return '使用了牌，是否摸' + get.cnNumber(num) + '张牌？';
                            };
                            num += 1;
                            return '成为了' + get.translation(event.card) + '的目标，是否摸' + get.cnNumber(num) + '张牌？';
                        },
                        content: function() {
                            'step 0'
                            var num = 1;
                            if (trigger.name != 'useCard') {
                                num += 1;
                            } else if (player == _status.currentPhase) {
                                num += 1;
                            };
                            if (Array.isArray(player.storage.radiance_jingyao_af) && player.storage.radiance_jingyao_af.length > 0) num += 1;
                            player.draw(num);
                            'step 1'
                            if (player != _status.currentPhase && trigger.name != 'useCard') {
                                player.addTempSkill('radiance_aofa_db');
                                trigger.radiance_aofa = true;
                            }
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (target.hasSkill('radiance_aofa_db') && target.countCards('h') > 0) return [2, -2];
                                        if (Array.isArray(target.storage.radiance_jingyao) && target.storage.radiance_jingyao.length > 0) {
                                            return 0;
                                        }
                                        return 0.7;
                                    }
                                },
                            },
                        },
                        action_tag: {
                            overall: 5,
                            draw: 2,
                            deterrence: 0.5,
                        },
                    },
                    "radiance_aofa_db": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        forced: true,
                        silent: true,
                        charlotte: true,
                        filter: function(event, player) {
                            if (event.radiance_aofa || event.player == player) return false;
                            return player.countCards('h') > Math.max(player.hp, 0);
                        },
                        content: function() {
                            player.chooseToDiscard(1, 'h', true);
                        },
                        ai: {
                            neg: true,
                            threaten: 8,
                        }
                    },
                    "radiance_jingyao": {
                        unique: true,
                        enable: 'phaseUse',
                        animationColor: 'metal',
                        skillAnimation: true,
                        limited: true,
                        filterCard: function(card) {
                            return true;
                        },
                        selectCard: [1, 3],
                        discard: false,
                        lose: false,
                        delay: 0,
                        mark: false,
                        check: function(card) {
                            return 10 - get.value(card);
                        },
                        init: function(player) {
                            player.storage.radiance_jingyao = false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_jingyao', true);
                            'step 1'
                            player.addSkill('radiance_jingyao_af');
                            'step 2'
                            player.lose(cards, ui.special, 'toStorage');
                            player.storage.radiance_jingyao_af.addArray(cards);
                            player.syncStorage('radiance_jingyao_af');
                            player.markSkill('radiance_jingyao_af');
                            game.log(player, '将', cards, '置于武将牌上');
                        },
                        ai: {
                            order: 15,
                            result: {
                                player: function(player) {
                                    if (player.countCards('h') < 2) return -1;
                                    return 10;
                                }
                            }
                        },
                        action_tag: {
                            combo: 1,
                            limited: 1,
                        },
                    },
                    "radiance_jingyao_af": {
                        trigger: {
                            player: 'phaseZhunbeiBegin'
                        },
                        charlotte: true,
                        forced: true,
                        filter: function(event, player) {
                            return (Array.isArray(player.storage.radiance_jingyao_af) && player.storage.radiance_jingyao_af.length > 0);
                        },
                        content: function() {
                            'step 0'
                            var cards = player.storage.radiance_jingyao_af;
                            var card = cards.randomGet();
                            player.$throw(card, 1000);
                            player.storage.radiance_jingyao_af.remove(card);
                            game.cardsDiscard(card);
                            player.syncStorage('radiance_jingyao_af');
                            'step 1'
                            if (player.storage.radiance_jingyao_af.length < 1) {
                                player.unmarkSkill('radiance_jingyao_af');
                                player.removeSkill('radiance_jingyao_af');
                            } else {
                                player.markSkill('radiance_jingyao_af');
                            }
                        },
                        intro: {
                            content: 'cards',
                            onunmark: function(storage, player) {
                                if (storage && storage.length) {
                                    player.$throw(storage, 1000);
                                    game.cardsDiscard(storage);
                                    game.log(storage, '被置入了弃牌堆');
                                    storage.length = 0;
                                }
                            },
                        },
                        init: function(player, skill) {
                            if (!Array.isArray(player.storage.radiance_jingyao_af)) player.storage.radiance_jingyao_af = [];
                        },
                        onremove: function(player) {
                            if (player.storage.radiance_jingyao_af.length) {
                                game.log(player.storage.radiance_jingyao_af, '被置入了弃牌堆');
                                game.cardsDiscard(player.storage.radiance_jingyao_af);
                                player.storage.radiance_jingyao_af = [];
                                player.unmarkSkill('radiance_jingyao_af');
                            }
                        },
                        mod: {
                            targetEnabled: function(card, player, target) {
                                if (get.type(card) == 'delay') return false;
                            },
                        },
                    },
                    "radiance_lingyao": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        filterTarget: lib.filter.notMe,
                        filterCard: true,
                        position: 'h',
                        selectCard: [1, 1],
                        discard: false,
                        lose: false,
                        delay: 0,
                        content: function() {
                            'step 0'
                            event.card = cards[0];
                            target.gain(event.card, player, 'give');
                            'step 1'
                            var info = get.info(event.card);
                            var str = "选择使用" + get.translation(event.card) + "的目标并令" + get.translation(player) + "摸一张牌，或者失去1点体力且不能使用牌";
                            if (info.notarget || !info.filterTarget || !info.selectTarget || get.type(event.card) == 'equip' || !game.hasPlayer(function(current) {
                                    if (current == player || current == target) return false;
                                    return target.canUse(card, current);
                                })) {
                                event._result = {
                                    bool: false,
                                    targets: [],
                                };
                            } else {
                                var select = info.selectTarget;
                                if (Array.isArray(select)) {
                                    if (select.length > 2 || select.length === 0) {
                                        select = false;
                                        event._result = {
                                            bool: false,
                                            targets: [],
                                        };
                                    } else if (select.length == 1) {
                                        select = select[0];
                                    }
                                }
                                if (typeof select === 'number') {
                                    if (select > 0) {
                                        select = [select, select];
                                    } else if (select == -1) {
                                        select = [-1, -1];
                                    } else {
                                        select = false;
                                        event._result = {
                                            bool: false,
                                            targets: [],
                                        };
                                    }
                                }
                                if (select) {
                                    target.chooseToUse().set('source', player).set('prompt', str).set('filterTarget', function(card, player, target) {
                                        if (target == _status.event.source || target == _status.event.player) return false;
                                        return _status.event.player.canUse(_status.event.getParent().card, target, true);
                                    }).set('filterCard', function(card) {
                                        return card == _status.event.getParent().card;
                                    });
                                };
                            }
                            'step 2'
                            if (result.bool && result.targets.length) {
                                player.chooseDrawRecover(2, 1);
                                event.finish();
                            } else {
                                target.addTempSkill('radiance_forbid');
                            };
                            'step 3'
                            target.loseHp();
                            game.delay();
                        },
                        ai: {
                            order: function(item, player) {
                                return 9;
                                var hs = player.getCards('h');
                                for (var i = 0; i < hs.length; i++) {
                                    var card = hs[i];
                                    var info = get.info(card);
                                    if (info.notarget || !info.filterTarget || !info.selectTarget || get.type(card) == 'equip') {
                                        if (get.value(card) < 6.1) return 10;
                                    } else if (info.selectTarget == -1) {
                                        return game.hasPlayer(function(current) {
                                            if (current == player) return false;
                                            var eff = 0;
                                            game.countPlayer(function(current2) {
                                                if (current2 != player && current2 != current && current.canUse(card, current2)) eff += get.effect(current2, card, current, player);
                                            });
                                            if (eff > 0 || get.value(card) < 4.1) return Math.min(eff, 9);
                                        })
                                    } else if (game.hasPlayer(function(current) {
                                            if (current == player) return false;
                                            return game.hasPlayer(function(current2) {
                                                return current2 != current && current2 != player && current.canUse(card, current2) && get.effect(current2, card, current, player) > 0
                                            })
                                        })) {
                                        return 6;
                                    } else if (get.value(card) < 3) {
                                        return 4;
                                    }
                                }
                                return 1;
                            },
                            result: {
                                target: function(player, target) {
                                    var card = ui.selected.cards[0];
                                    if (!card) return 0;

                                    var info = get.info(card);
                                    if (info.notarget || !info.filterTarget || !info.selectTarget || get.type(card, target) == 'equip' || !game.hasPlayer(function(current) {
                                            if (current == player || current == target) return false;
                                            return target.canUse(card, current);
                                        })) {
                                        if (get.value(card) < 6.1) return -10;
                                    } else if (info.selectTarget == -1) {
                                        var eff1 = 0,
                                            eff2 = 0;
                                        game.countPlayer(function(current) {
                                            if (current != player && current != target && target.canUse(card, current)) {
                                                eff1 += get.effect(current, card, target, player);
                                                eff2 += get.effect(current, card, target, target);
                                            };
                                        });
                                        if (eff1 > 0) return eff1;
                                        if (eff2 < 0 && get.value(card) < 4.1) return eff2;
                                        return 0;
                                    } else if (game.hasPlayer(function(current) {
                                            return current != player && current != target && target.canUse(card, current) && get.effect(current, card, target, player) > 0;
                                        })) {
                                        return 1.5;
                                    } else if (!game.hasPlayer(function(current) {
                                            return current != player && current != target && target.canUse(card, current);
                                        })) {
                                        return -10;
                                    };
                                    if (get.value(card, player) < 3 && get.value(card, target) < 3) {
                                        return -1;
                                    };
                                    return 0;
                                },
                            },
                        },
                        action_tag: {
                            overall: 3.6,
                            draw: 1,
                            loseHp: 1,
                            forbid: 1,
                        },
                    },
                    "radiance_mingyong": {
                        trigger: {
                            player: "damageBegin",
                        },
                        filter: function(event, player) {
                            return event.num > 0;
                        },
                        forced: true,
                        priority: -10,
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            'step 1'
                            player.loseHp();
                        },
                        group: ["radiance_mingyong_discard"],
                        action_tag: {
                            overall: 5,
                            loseHp_defend: 1,
                            discard: 2,
                            draw: 0.5,
                        },
                        subSkill: {
                            discard: {
                                trigger: {
                                    player: "loseHpAfter",
                                },
                                direct: true,
                                sub: true,
                                filter: function(event, player) {
                                    return event.num > 0;
                                },
                                content: function() {
                                    'step 0'
                                    event.target = _status.currentPhase;
                                    if (event.target == player || !event.target.isIn() || event.target.countCards('h') == 0) {
                                        event.goto(3);
                                    };
                                    'step 1'
                                    var chooseButton = player.chooseButton([1, 3], ["弃置" + get.translation(event.target) + '的手牌', event.target.getCards('h')]);
                                    chooseButton.set('target', event.target);
                                    chooseButton.set('ai', function(button) {
                                        var player = _status.event.player;
                                        if (get.attitude(player, _status.event.target) > 0) return 0;
                                        return get.value(button.link) || 1;
                                    });
                                    chooseButton.set('filterButton', function(button) {
                                        if (ui.selected.buttons.length < 1) return true;
                                        return get.suit(button.link) == get.suit(ui.selected.buttons[0]);
                                    });
                                    'step 2'
                                    if (result.bool && result.links.length > 0) {
                                        player.logSkill('radiance_mingyong', target);
                                        event.target.showHandcards();
                                        target.discard(result.links).set('source', player);
                                        if (player.countCards('h', {
                                                suit: get.suit(result.links[0])
                                            }) == 0) {
                                            event.suits = [get.suit(result.links[0])];
                                            // event.goto(5);
                                        };
                                    };
                                    event.finish();
                                    'step 3'
                                    var suits = ['spade', 'heart', 'club', 'diamond'];
                                    var hs = player.getCards('h');
                                    for (var i = 0; i < hs.length; i++) {
                                        suits.remove(get.suit(hs[i]));
                                    };
                                    if (suits.length == 0) {
                                        event.finish();
                                    } else {
                                        event.suits = suits;
                                        player.chooseBool("是否获得" + (suits.length > 1 ? get.translation(suits) + "的牌各一张？" : "一张" + get.translation(suits) + "牌？")).set('choice', true);
                                    };
                                    'step 4'
                                    if (result.bool) {
                                        player.logSkill('radiance_mingyong');
                                        player.showHandcards();
                                    } else {
                                        event.finish();
                                    };
                                    'step 5'
                                    var togain = [];
                                    for (var i = 0; i < event.suits.length; i++) {
                                        var card = get.cardPile(function(cardx) {
                                            return get.suit(cardx) == event.suits[i];
                                        });
                                        if (card) togain.push(card);
                                    };
                                    if (togain.length) player.gain(togain, 'gain2');
                                },
                            },
                        },
                        ai: {
                            threaten: 0.6,
                            noextra: true,
                        },
                    },
                    "radiance_yingcai": {
                        trigger: {
                            player: 'phaseDrawBegin2'
                        },
                        forced: true,
                        filter: function(event, player) {
                            return !event.numFixed;
                        },
                        content: function() {
                            trigger.num += 1;
                        },
                        mod: {
                            attackRange: function(player, current) {
                                return current + 1;
                            },
                            maxHandcard: function(player, num) {
                                return num + 1;
                            },
                        },
                        action_tag: {
                            overall: 2.5,
                            draw: 1,
                            maxHand: 1,
                            range: 1,
                        }
                    },
                    "radiance_tulong": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        skillAnimation: 'epic',
                        limited: true,
                        animationColor: 'soil',
                        intro: {
                            content: 'limited'
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_tulong != 'boolean') player.storage.radiance_tulong = false;
                        },
                        filter: function(event, player) {
                            return (!player.storage.radiance_tulong);
                        },
                        content: function() {
                            'step 0'
                            event.num = game.roundNumber;
                            player.awakenSkill('radiance_tulong');
                            player.addTempSkill('radiance_tulong_af', 'phaseEnd');
                            'step 1'
                            if (event.num > 0) {
                                player.gain(get.cardPile(function(card) {
                                    return get.name(card) == 'sha';
                                }), 'gain2');
                                event.num--;
                                event.redo();
                            }
                        },
                        ai: {
                            threaten: 4,
                            order: 10,
                            result: {
                                player: function(player) {
                                    if (player.getUseValue('sha') < 1) return 0;
                                    if (player.hp > 2 && game.roundNumber + player.countCards('hs', 'sha') < 4) return 0;
                                    if (player.hp >= 2 && game.roundNumber + player.countCards('hs', 'sha') > 2) return 10;
                                    if (player.hp < 2) {
                                        if (get.zhu(player) == player) return 0;
                                        if (player.getFriends(true).length == 1 && !player.canSave(player)) return 0;
                                    };
                                    return 10;
                                },
                            },
                        },
                    },
                    "radiance_tulong_af": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        filter: function(event) {
                            return event.card.name == 'sha';
                        },
                        forced: true,
                        silent: true,
                        content: function() {
                            var id = trigger.target.playerid;
                            var map = trigger.getParent().customArgs;
                            if (!map[id]) map[id] = {};
                            if (typeof map[id].shanRequired == 'number') {
                                map[id].shanRequired += 1;
                            } else {
                                map[id].shanRequired = 2;
                            }
                        },
                        ai: {
                            unequip_ai: true,
                            unequip: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            }
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return Infinity;
                            }
                        },
                        onremove: function(player, skill) {
                            player.loseHp();
                        },
                    },
                    "radiance_shoushu": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        filter: function(event, player) {
                            var list = [];
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt.name != 'lose' && evt.name != 'cardsDiscard') return false;
                                if (evt.name == 'lose' && (evt.position != ui.discardPile || evt.type != 'discard')) return false;
                                if (evt.name == 'cardsDiscard' && !(evt.getParent().relatedEvent && ['chooseToCompare', 'chooseToCompareMultiple', 'judge'].contains(evt.getParent().relatedEvent.name))) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    if (get.type(card) == 'trick') list.add(card);
                                }
                            });
                            return list.filterInD('d').length > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var list = [];
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt.name != 'lose') return false;
                                if (evt.name == 'lose' && (evt.position != ui.discardPile || evt.type != 'discard')) return false;
                                if (evt.name == 'cardsDiscard' && !(evt.getParent().relatedEvent && ['chooseToCompare', 'chooseToCompareMultiple', 'judge'].contains(evt.getParent().relatedEvent.name))) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    if (get.type(card) == 'trick') list.add(card);
                                };
                            });
                            list = list.filterInD('d');
                            if (list.length == 0) {
                                event.finish();
                                return;
                            };
                            var dialog = ui.create.dialog("收束：获得一张本回合进入弃牌堆的非延时类锦囊牌");
                            dialog.add(list);
                            player.chooseButton(dialog).set('ai', function(button) {
                                return get.alteredValue(button.link, 'hs', _status.event.list);
                            }).set('list', list);
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_shoushu');
                                player.gain(result.links, 'draw2', 'log');
                            };
                        },
                    },
                    "radiance_qiongyu": {
                        init: function(player) {
                            if (!Array.isArray(player.storage.radiance_qiongyu)) player.storage.radiance_qiongyu = [];
                            if (!Array.isArray(player.storage.radiance_qiongyu_zhong)) player.storage.radiance_qiongyu_zhong = [];
                        },
                        mark: true,
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                if (player.storage.radiance_qiongyu_current && player != _status.currentPhase) {
                                    var name = player.storage.radiance_qiongyu_current;
                                    dialog.addText("当前技能：" + get.translation(name));
                                    dialog.addText(get.translation(name + '_info'), false);
                                };
                                if (player.storage.radiance_qiongyu_zhu && player != _status.currentPhase) {
                                    var name = player.storage.radiance_qiongyu_zhu;
                                    dialog.addText("庭院技能：" + get.translation(name));
                                    dialog.addText(get.translation(name + '_info'), false);
                                };
                                if (Array.isArray(player.storage.radiance_qiongyu) && player.storage.radiance_qiongyu.length > 0) {
                                    return ("以下技能已获得：" + get.translation(player.storage.radiance_qiongyu));
                                };
                            },
                        },
                        onremove: function(player) {
                            if (player.storage.radiance_qiongyu_current) player.removeSkill(player.storage.radiance_qiongyu_current);
                            if (player.storage.radiance_qiongyu_zhu) player.removeSkill(player.storage.radiance_qiongyu_zhu);
                        },
                        trigger: {
                            player: ['phaseJieshuBegin'],
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            var list = [],
                                list2 = [];
                            for (var i in lib.skill) {
                                if (lib.watersky.func.radianceSkillActionTag(i, 'loseHp_defend') > 0) {
                                    if (!game.hasPlayer(current => current.getSkills(true, false, false).contains(i))) list.add(i);
                                };
                            };
                            list.removeArray(player.storage.radiance_qiongyu);
                            if (player.hasZhuSkill('radiance_tingyuan', player)) {
                                var players = game.filterPlayer(function(current) {
                                    return current != player && current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current);
                                });
                                for (var i = 0; i < players.length; i++) {
                                    var skills = players[i].getSkills(true, false, false);
                                    for (var j = 0; j < skills.length; j++) {
                                        if (lib.watersky.func.radianceSkillActionTag(skills[j], 'loseHp_defend') > 0) {
                                            list2.add(skills[j]);
                                        };
                                    };
                                };
                            };
                            if (list.length == 0 && list2.length == 0) {
                                event.goto(2);
                                return;
                            };
                            var num = 1;
                            if (player.hasZhuSkill('radiance_tingyuan', player)) {
                                for (var i = 0; i < game.dead.length; i++) {
                                    var current = game.dead[i];
                                    if (current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current) && current.getFriends(true).contains(player)) {
                                        num++;
                                    };
                                };
                            };
                            var choices = list.randomGets(3).concat(list2);
                            choices.push('draw_card');
                            var dialog = ui.create.dialog("穹宇：选择一个技能获得或摸" + get.cnNumber(num) + "张牌", 'hidden');
                            var table = document.createElement('div');
                            table.classList.add('add-setting');
                            table.style.margin = '0';
                            table.style.width = '100%';
                            table.style.position = 'relative';
                            for (var i = 0; i < choices.length; i++) {
                                var current = choices[i];
                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                td.innerHTML = '<span>' + (current == 'draw_card' ? "   摸" + get.cnNumber(num) + "张牌   " : get.translation(current + '_info')) + '</span>';
                                td.link = current;
                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                for (var j in lib.element.button) {
                                    td[j] = lib.element.button[j];
                                }
                                table.appendChild(td);
                                dialog.buttons.add(td);
                            };
                            dialog.content.appendChild(table);
                            player.chooseControl(dialog, choices).set('ai', function(event, player) {
                                var getProfit = function(skill) {
                                    var profit = lib.watersky.func.radianceSkillActionTag(skill, 'profit', null, player);
                                    if (typeof profit != 'number' || profit < 1) profit = 1;
                                    if (player.hasZhuSkill('radiance_tingyuan', player)) {
                                        var targets = game.filterPlayer(current => !player.storage.radiance_qiongyu_zhong.contains(current) && current != player && current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current) && current.getSkills(true, false, false).contains(skill));
                                        for (var i = 0; i < targets.length; i++) {
                                            if (get.attitude(player, targets[i]) > 0) {
                                                profit += 2;
                                                break;
                                            };
                                        };
                                    };
                                    return profit;
                                };
                                var choices = _status.event.controls;
                                var current = 0;
                                for (var i = 1; i < choices.length - 1; i++) {
                                    if (getProfit(choices[i]) > getProfit(choices[current])) current = i;
                                };
                                var num = 1;
                                if (player.hasZhuSkill('radiance_tingyuan', player)) {
                                    for (var i = 0; i < game.dead.length; i++) {
                                        var target = game.dead[i];
                                        if (target.group == player.group && player.hasZhuSkill('radiance_tingyuan', target) && target.getFriends(true).contains(player)) {
                                            num++;
                                        };
                                    };
                                };
                                if (getProfit(choices[current]) >= num) return choices[current];
                                return 'draw_card';
                            });
                            'step 1'
                            if (result.control != 'draw_card') {
                                event.name = result.control;
                                game.log(player, "因“", 'radiance_qiongyu', "”选择并获得了", event.name);
                                player.popup(event.name);
                                player.storage.radiance_qiongyu_current = event.name;
                                player.storage.radiance_qiongyu.add(event.name);
                                player.markSkill('radiance_qiongyu');
                                player.addTempSkill('radiance_qiongyu_clear', {
                                    player: 'phaseBegin'
                                });
                                player.addSkill(event.name);
                                event.targets = game.filterPlayer(current => !player.storage.radiance_qiongyu_zhong.contains(current) && current != player && current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current) && current.getSkills(true, false, false).contains(event.name));
                                event.goto(3);
                            };
                            'step 2'
                            var num = 1;
                            if (player.hasZhuSkill('radiance_tingyuan', player)) {
                                for (var i = 0; i < game.dead.length; i++) {
                                    var current = game.dead[i];
                                    if (current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current) && current.getFriends(true).contains(player)) {
                                        num++;
                                    };
                                };
                            };
                            player.draw(num);
                            event.finish();
                            'step 3'
                            if (event.targets.length == 0) {
                                event.finish();
                                return;
                            };
                            event.current = event.targets.shift();
                            player.line(event.current);
                            event.current.chooseBool("是否令" + get.translation(player) + "摸两张牌？").set('choice', get.attitude(event.current, player) > 0);
                            'step 4'
                            if (result.bool) {
                                player.draw(2);
                                game.log(event.current, "选择令", player, "摸牌");
                                player.storage.radiance_qiongyu_zhong.push(event.current);
                            } else if (event.targets.length > 0) {
                                event.goto(3);
                            };
                        },
                        subSkill: {
                            clear: {
                                charlotte: true,
                                locked: true,
                                onremove: function(player) {
                                    if (player.storage.radiance_qiongyu_current) player.removeSkill(player.storage.radiance_qiongyu_current);
                                    if (player.storage.radiance_qiongyu_zhu) player.removeSkill(player.storage.radiance_qiongyu_zhu);
                                    delete player.storage.radiance_qiongyu_current;
                                    delete player.storage.radiance_qiongyu_zhu;
                                },
                            },
                        },
                    },
                    "radiance_tingyuan": {
                        zhuSkill: true,
                        unique: true,
                        locked: true,
                        direct: true,
                        trigger: {
                            player: 'radiance_qiongyu_tingyuan',
                        },
                        filter: function(event, player) {
                            return player.hasZhuSkill('radiance_tingyuan') && player.hasSkill('radiance_qiongyu');
                        },
                        content: function() {
                            'step 0'
                            var players = game.filterPlayer(function(current) {
                                return current != player && current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current);
                            });
                            var list = [];
                            for (var i = 0; i < players.length; i++) {
                                var skills = players[i].getSkills(true, false, false);
                                for (var j = 0; j < skills.length; j++) {
                                    if (lib.watersky.func.radianceSkillActionTag(skills[j], 'loseHp_defend') > 0) {
                                        list.add(skills[j]);
                                    };
                                };
                            };
                            if (list.length == 0) {
                                event.finish();
                                return;
                            };
                            var choices = list.slice(0);
                            choices.push('cancel2');
                            var dialog = ui.create.dialog("庭院：可以再选择一个场上的技能", 'hidden');
                            var table = document.createElement('div');
                            table.classList.add('add-setting');
                            table.style.margin = '0';
                            table.style.width = '100%';
                            table.style.position = 'relative';
                            for (var i = 0; i < choices.length; i++) {
                                var current = choices[i];
                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                td.innerHTML = '<span>' + (current == 'cancel2' ? "        " : get.translation(current + '_info')) + '</span>';
                                td.link = current;
                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                for (var j in lib.element.button) {
                                    td[j] = lib.element.button[j];
                                }
                                table.appendChild(td);
                                dialog.buttons.add(td);
                            };
                            dialog.content.appendChild(table);
                            player.chooseControl(dialog, choices).set('ai', function(event, player) {
                                var choices = _status.event.controls;
                                var current = 0;
                                var getProfit = function(skill) {
                                    var profit = lib.watersky.func.radianceSkillActionTag(skill, 'profit', null, player);
                                    if (typeof profit == 'number') return profit;
                                    return 1;
                                };
                                for (var i = 1; i < choices.length - 1; i++) {
                                    if (getProfit(choices[i]) > getProfit(choices[current])) current = i;
                                };
                                if (getProfit(choices[current])) return current;
                                return 'cancel2';
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                event.name = result.control;
                                player.logSkill('radiance_tingyuan');
                                game.log(player, "因“", 'radiance_tingyuan', "”额外获得了", event.name);
                                player.popup(event.name);
                                player.storage.radiance_qiongyu_zhu = event.name;
                                player.markSkill('radiance_qiongyu');
                                player.addTempSkill('radiance_qiongyu_clear', {
                                    player: 'phaseBegin'
                                });
                                player.addSkill(event.name);
                                event.targets = game.filterPlayer(current => !player.storage.radiance_qiongyu_zhong.contains(current) && current != player && current.group == player.group && player.hasZhuSkill('radiance_tingyuan', current) && current.getSkills(true, false, false).contains(event.name));
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (event.targets.length == 0) {
                                event.finish();
                                return;
                            };
                            event.current = event.targets.shift();
                            player.line(event.current);
                            event.current.chooseBool("是否令" + get.translation(player) + "摸三张牌？").set('choice', get.attitude(event.current, player) > 0);
                            'step 3'
                            if (result.bool) {
                                player.draw(3);
                                game.log(event.current, "选择令", player, "摸牌");
                                player.storage.radiance_qiongyu_zhong.push(event.current);
                            } else if (event.targets.length > 0) {
                                event.goto(2);
                            };
                        },
                    },
                    "radiance_fengdong": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        filter: function(event, player) {
                            return game.countPlayer(function(current) {
                                return current != player && current.countCards('h') > 0;
                            }) > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget("封冻：选择一个目标", 1, function(card, player, target) {
                                return target != player && target.countCards('h') > 0;
                            }).set('ai', function(target) {
                                return target.countCards('h');
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                event.target = result.targets[0];
                                player.logSkill('radiance_fengdong', event.target);
                                player.line(event.target);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            event.target.showHandcards();
                            var hs = event.target.getCards('h');
                            player.chooseButton(1, true, ["封冻：请选择一个花色的牌", hs]).set('ai', function(button) {
                                var card = button.link;
                                var count = 0;
                                for (var i = 0; i < _status.event.cards.length; i++) {
                                    if (get.suit(card) == get.suit(_status.event.cards[i])) count++;
                                };
                                return count;
                            }).set('cards', hs);
                            'step 3'
                            event.suit = get.suit(result.links[0]);
                            event.count = event.target.countCards('h', {
                                suit: event.suit
                            });
                            event.count = Math.min(5, event.count);
                            game.log(player, "选择了", event.suit, "牌");
                            player.popup(event.suit);
                            event.videoId = lib.status.videoId++;
                            var func = function(id, list) {
                                var choiceList = ui.create.dialog('封冻：请选择要执行的选项');
                                choiceList.videoId = id;
                                for (var i = 0; i < list.length; i++) {
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    str += get.translation(list[i]);
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = i;
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[i];
                                    }
                                    choiceList.buttons.add(next.firstChild);
                                }
                                return choiceList;
                            };
                            event.str1 = "摸" + get.cnNumber(event.count) + "张牌";
                            event.str2 = "封禁其非" + get.translation(event.suit) + "牌且" + get.translation(event.suit) + "牌对其增伤";

                            event.dialog = func(event.videoId, [event.str1, event.str2]);
                            if (player != game.me || _status.auto) {
                                event.dialog.style.display = 'none';
                            }
                            var next = player.chooseButton();
                            next.set('dialog', event.videoId);
                            next.set('selectButton', [1, 2]);
                            next.set('forced', true);
                            next.set('ai', function(button) {
                                if (button.link == 0) return 1;
                                return 0;
                            });
                            'step 4'
                            event.dialog.close();
                            event.bool1 = false;
                            event.bool2 = false;
                            if (result.bool) {
                                for (var i = 0; i < result.links.length; i++) {
                                    var index = result.links[i] + 1;
                                    event['bool' + index] = true;
                                }
                            } else {
                                event.finish();
                            }
                            'step 5'
                            if (event.bool1 && event.bool2) {
                                game.log(player, "同时选择了摸牌和封印效果");
                                player.draw(event.count);
                                event.target.storage.radiance_fengdong_forbid = event.suit;
                                event.target.addTempSkill('radiance_fengdong_forbid');
                            } else if (event.bool1) {
                                game.log(player, "选择了摸牌");
                                player.draw(event.count);
                            } else if (event.bool2) {
                                game.log(player, "选择了封印");
                                event.target.storage.radiance_fengdong_forbid = event.suit;
                                event.target.addTempSkill('radiance_fengdong_forbid');
                            }
                            'step 6'
                            if (event.bool1 && event.bool2) {
                                player.loseHp();
                            };
                        },
                    },
                    "radiance_fengdong_forbid": {
                        trigger: {
                            player: 'damageBegin3',
                        },
                        forced: true,
                        locked: true,
                        charlotte: true,
                        debuff: true,
                        filter: function(event, player) {
                            return event.num > 0 && event.card && get.suit(event.card, event.source || player) == player.storage.radiance_fengdong_forbid;
                        },
                        content: function() {
                            trigger.num++;
                        },
                        mark: true,
                        marktext: "冻",
                        intro: {
                            mark: function(dialog, content, player) {
                                return '只能使用或打出' + get.translation(player.storage.radiance_fengdong_forbid) + '牌';
                            },
                        },
                        mod: {
                            cardEnabled2: function(card, player) {
                                if (player.storage.radiance_fengdong_forbid != get.suit(card)) {
                                    return false;
                                }
                            },
                        },
                        onremove: function(player) {
                            delete player.storage.radiance_fengdong_forbid;
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage') && get.suit(card, player) == target.storage.radiance_fengdong_forbid) return 2;
                                },
                            },
                        },
                    },
                    "radiance_jingti": {
                        trigger: {
                            player: 'damageBegin4',
                        },
                        filter: function(event, player) {
                            var ds = player.getHistory('damage', function(evt) {
                                return evt.num > 0;
                            });
                            if (ds.length > 0) return false;
                            return (!event.nature && !player.getEquip(2) && event.num > 0);
                        },
                        forced: true,
                        usable: 1,
                        content: function() {
                            trigger.cancel();
                            player.addTempSkill('radiance_jingti_used');
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                        ai: {
                            noextra: true,
                            skillTagFilter: function(player, tag, arg) {
                                return !player.hasSkill('radiance_jingti_used');
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) {
                                        if (target.getHistory('damage').length > 0 || target.getEquip(2)) return [1, -2, 1, 0];
                                        if (target.hasSkill('radiance_jingti_used')) return [1, -2, 1, 0];
                                        if (get.nature(card, player)) return [1, -2, 1, 0];
                                        if (get.attitude(target, player) >= 0 && get.attitude(player, target) >= 0) {
                                            return 0;
                                        } else {
                                            var bs = player.getCards('hs', function(card2) {
                                                return get.name(card, player) != get.name(card2, player) && get.tag(card2, 'damage') && player.canUse(card2, target, true);
                                            });
                                            if (bs.length < 1) return 0;
                                            return [1, 0, 1, -0.5];
                                        };
                                    } else if (player == target && get.subtype(card) == 'equip2') {
                                        if (get.equipValue(card) <= 7.5) return 0;
                                    };
                                },
                            },
                        },
                        action_tag: {
                            overall: 3,
                            direct_defend: 1,
                            damage_prevent: 1,
                        },
                    },
                    "radiance_heidong": {
                        enable: 'phaseUse',
                        usable: 1,
                        skillAnimation: 'epic',
                        animationColor: 'thunder',
                        filterTarget: function(card, player, target) {
                            return target != player;
                        },
                        selectTarget: -1,
                        content: function() {
                            'step 0'
                            target.damage();
                            'step 1'
                            if (target.isIn()) {
                                target.discardPlayerCard("是否弃置" + get.translation(player) + "的一张牌？", player, 'he', 1);
                            };
                        },
                        ai: {
                            threaten: 4,
                            order: 1,
                            result: {
                                player: function(player) {
                                    return 0 - Math.min(player.countCards('he') / 2, 1);

                                    var friends = game.countPlayer(function(current) {
                                        return current != player && get.attitude(player, current) > 0 && current.hp > 2;
                                    });
                                    var friends_danger = game.countPlayer(function(current) {
                                        return current != player && get.attitude(player, current) > 0 && current.hp < 3;
                                    });
                                    var enemies = game.countPlayer(function(current) {
                                        return current != player && get.attitude(player, current) < 0 && current.hp > 2;
                                    });
                                    var enemies_danger = game.countPlayer(function(current) {
                                        return current != player && get.attitude(player, current) < 0 && current.hp < 3;
                                    });

                                    return enemies_danger * 3 + enemies * 1.5 - friends_danger * 2 - friends * 1.5;
                                },
                                target: function(player, target) {
                                    var eff = get.damageEffect(target, player, player);
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    return 0 - Math.abs(eff);
                                },
                            },
                        },
                    },
                    "radiance_xuling": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.type(card) == 'basic' || get.type(card) == 'trick') return true;
                            return false;
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并无效【' + get.translation(event.card) + '】？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;
                            var card = event.card;
                            var id = player.playerid;
                            var map = event.getParent().customArgs;
                            var need = 1;
                            if (get.tag(card, 'respondSha')) {
                                if (map[id] && typeof map[id].shaReq == 'number') need = map[id].shaReq;
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'respondShan')) {
                                if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'damage') && get.name(card) != 'huogong') {
                                return true;
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            'step 1'
                            trigger.getParent().excluded.add(player);
                            trigger.getParent().targets.remove(player);
                            trigger.getParent().triggeredTargets2.remove(player);
                            game.delay();
                            'step 2'
                            player.chooseTarget(1, get.prompt2('radiance_xuling'), function(card, player, target) {
                                return target.hp != target.countCards('h');
                            }).set('ai', function(target) {
                                var base = 1;
                                if (target == player) {
                                    base = target.hp > target.countCards('h') ? 2.1 : 0;
                                } else if (target.countCards('h') < target.hp) {
                                    base = 2 / target.hp;
                                } else {
                                    base = -4 / (Math.max(target.hp, 0.5) * target.countCards('h'));
                                };
                                var num = target.countCards('h') - target.hp;
                                return base * get.attitude(player, target);
                            });
                            'step 3'
                            if (result.bool && result.targets.length) {
                                var target = result.targets[0];
                                player.line(target, 'red');
                                game.log('radiance_xuling', player, "选择令", target, (target.countCards('h') < target.hp ? "摸牌" : "弃牌"));
                                if (target.countCards('h') < target.hp) {
                                    target.draw(2);
                                } else {
                                    target.chooseToDiscard(2, 'h', true);
                                };
                            };
                        },
                        ai: {
                            threaten: function(viewer, player) {
                                if (player.countCards('h') < player.hp - 1) return 0.7;
                            },
                        },
                    },
                    "radiance_mojian": {
                        mod: {
                            attackRange: function(player, current) {
                                return current + 5;
                            },
                        },
                        locked: true,
                        ai: {
                            unequip: true,
                            unequip_ai: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (tag == 'unequip_ai' || tag == 'unequip') {
                                    if (arg && arg.name == 'sha') return true;
                                    return false;
                                };
                            },
                        },
                    },
                    "radiance_guanduan": {
                        init: function(player) {
                            if (player.storage.radiance_guanduan) return;
                            player.storage.radiance_guanduan = {
                                "hand": [function(player, target) {
                                    return target.countCards('h') <= player.countCards('h');
                                }, "手牌数不大于你"],
                                "hp": [function(player, target) {
                                    return target.hp <= player.hp;
                                }, "体力值不大于你"],
                                "equip": [function(player, target) {
                                    return target.countCards('e') <= player.countCards('e');
                                }, "装备区的牌数不大于你"],
                            };
                        },
                        intro: {
                            mark: function(dialog, content, player) {
                                var count = 0;
                                var str = "当前可以使用的条件：";
                                for (var i in player.storage.radiance_guanduan) {
                                    str += "·" + player.storage.radiance_guanduan[i][1] + " ";
                                    count++;
                                };
                                if (count == 0) return "“贯断”没有可以使用的条件";
                                return str.substring(0, str.length - 1);
                            },
                        },
                        mark: true,
                        marktext: "贯",
                        trigger: {
                            player: 'useCardToPlayered'
                        },
                        logTarget: 'target',
                        shaRelated: true,
                        check: function(event, player) {
                            return get.attitude(player, event.target) < 0;
                        },
                        prompt2: function(event, player) {
                            var num = 0;
                            for (var i in player.storage.radiance_guanduan) {
                                if (player.storage.radiance_guanduan[i][0](player, event.target)) {
                                    num++;
                                };
                            };
                            var str = "令" + get.translation(event.target);
                            if (num > 0) {
                                str += "需要额外使用一张【闪】响应此【杀】";
                            }
                            if (num > 1) {
                                str += "，非锁定技失效";
                            }
                            if (num > 2) {
                                str += "，弃置一张牌";
                            }
                            return str;
                        },
                        filter: function(event, player) {
                            if (event.card.name != 'sha') return false;
                            for (var i in player.storage.radiance_guanduan) {
                                if (player.storage.radiance_guanduan[i][0](player, event.target)) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        content: function() {
                            var num = 0;
                            for (var i in player.storage.radiance_guanduan) {
                                if (player.storage.radiance_guanduan[i][0](player, trigger.target)) {
                                    num++;
                                };
                            };
                            game.log(trigger.target, "满足了" + get.cnNumber(num), "项");

                            if (num > 0) {
                                var id = trigger.target.playerid;
                                var map = trigger.getParent().customArgs;
                                if (!map[id]) map[id] = {};
                                if (typeof map[id].shanRequired == 'number') {
                                    map[id].shanRequired += 1;
                                } else {
                                    map[id].shanRequired = 2;
                                }
                            };
                            if (num > 1) {
                                if (!trigger.target.hasSkill('fengyin')) {
                                    trigger.target.addTempSkill('fengyin');
                                }
                            };
                            if (num > 2) {
                                trigger.target.chooseToDiscard(1, 'he', true);
                            };
                        },
                    },
                    "radiance_cangkong": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            if (!player.storage.radiance_guanduan) return false;
                            var count = 0;
                            for (var i in player.storage.radiance_guanduan) {
                                count++;
                            };
                            return (count > 0 || player.maxHp > 1) && game.hasPlayer(function(target) {
                                return player.inRange(target);
                            });
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var choiceList = ui.create.dialog('苍空', 'forcebutton', 'hidden');
                                choiceList.add("废除一个选项，然后选择技能目标");
                                for (var i in player.storage.radiance_guanduan) {
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    str += player.storage.radiance_guanduan[i][1];
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = i;
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[i];
                                    }
                                    choiceList.buttons.add(next.firstChild);
                                };
                                if (player.maxHp > 1) {
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    str += "体力上限";
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = 'maxHp';
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[i];
                                    }
                                    choiceList.buttons.add(next.firstChild);
                                };
                                choiceList.add(game.filterPlayer());
                                return choiceList;
                            },
                            filter: function(button, player) {
                                if (ui.selected.buttons.length == 0) {
                                    if (get.itemtype(button.link) == 'player') return false;
                                    if (button.link == 'maxHp' && player.maxHp <= 1) return false;
                                    return true;
                                } else if (ui.selected.buttons.length > 0) {
                                    if (typeof button.link == 'string') return false;
                                    return player.inRange(button.link);
                                };
                                return false;
                            },
                            select: 2,
                            complexSelect: true,
                            check: function(button) {
                                var player = _status.currentPhase;
                                if (ui.selected.buttons.length == 0) {
                                    if (get.itemtype(button.link) == 'player') return -1;
                                    if (button.link == 'maxHp') {
                                        if (player.isDamaged() && player.maxHp > 2) return 3;
                                        return -1;
                                    };
                                    var enemies = player.getEnemies();
                                    var eff = 0;
                                    var choices = player.storage.radiance_guanduan;
                                    for (var i = 0; i < enemies.length; i++) {
                                        if (!player.inRange(enemies[i])) continue;
                                        if (choices[button.link][0](player, enemies[i])) {
                                            eff++;
                                        }
                                    };
                                    if (enemies.length <= 2) return 1 - eff;
                                    return enemies.length - eff - 1;
                                } else {
                                    var target = button.link;
                                    if (typeof target == 'string') return -1;
                                    if (target.countCards('he') == 0 && target.hp > 1) return -0.5;
                                    var effect = get.damageEffect(target, player, player);
                                    if (effect <= 0) return 0;
                                    if (target.countCards('h') > 0) effect *= 1.1;
                                    if (target.countCards('e') > 0) effect *= 1.3;
                                    return effect;
                                };
                                return -1;
                            },
                            backup: function(links, player) {
                                lib.skill.radiance_cangkong.link = links[0];
                                lib.skill.radiance_cangkong.targetx = links[1];
                                return {
                                    direct: true,
                                    prompt: "令一名其他角色随机弃置装备区和手牌区中较多区域的一张牌，然后受到1点伤害",
                                    content: function() {
                                        'step 0'
                                        event.target = lib.skill.radiance_cangkong.targetx;
                                        player.line(event.target, 'water');
                                        player.logSkill('radiance_cangkong', target);
                                        if (lib.skill.radiance_cangkong.link == 'maxHp') {
                                            player.popup("减少体力上限");
                                            player.loseMaxHp(1);
                                        } else {
                                            player.popup(player.storage.radiance_guanduan[lib.skill.radiance_cangkong.link][1]);
                                            game.log(player, "废除了", 'radiance_guanduan', "的“", player.storage.radiance_guanduan[lib.skill.radiance_cangkong.link][1], "”条件");
                                            delete player.storage.radiance_guanduan[lib.skill.radiance_cangkong.link];
                                            var count = 0;
                                            for (var i in player.storage.radiance_guanduan) {
                                                count++;
                                            };
                                            if (count == 0) {
                                                player.unmarkSkill('radiance_guanduan');
                                            };
                                        };
                                        'step 1'
                                        var pos = 'h';
                                        if (target.countCards('h') == target.countCards('e')) pos = 'he';
                                        if (target.countCards('h') < target.countCards('e')) pos = 'e';
                                        target.randomDiscard(pos, 1);
                                        'step 2'
                                        target.damage('nocard', 1, player);
                                    },
                                    ai: {
                                        order: 8,
                                        result: {
                                            player: function(player, target) {
                                                return 1;
                                            },
                                        },
                                    },
                                };
                            },
                        },
                        ai: {
                            order: 7,
                            result: {
                                player: function(player) {
                                    var enemies = player.getEnemies();
                                    var choices = player.storage.radiance_guanduan;
                                    for (var choice in choices) {
                                        var eff = 0;
                                        for (var i = 0; i < enemies.length; i++) {
                                            if (!player.inRange(enemies[i])) continue;
                                            if (choices[choice][0](player, enemies[i])) {
                                                eff++;
                                            }
                                        };
                                        if (enemies.length <= 2) {
                                            if (eff == 0) return 1;
                                        } else if (enemies.length - eff > 1) {
                                            return 1;
                                        };
                                    };
                                    if (player.isDamaged() && player.maxHp > 2) {
                                        for (var i = 0; i < enemies.length; i++) {
                                            if (!player.inRange(enemies[i])) continue;
                                            if (get.damageEffect(enemies[i], player, player) > 0 && enemies[i].countCards('he') > 0) {
                                                return 1;
                                            };
                                        };
                                    };
                                    return -1;
                                },
                            },
                            combo: 'radiance_guanduan',
                        },
                        action_tag: {
                            overall: 5,
                            damage: 3,
                            in: 1,
                        }
                    },
                    "radiance_ponian": {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return player != target && target.countCards('h') > 0;
                        },
                        content: function() {
                            'step 0'
                            player.choosePlayerCard(target, 'h', 1, true, '展示' + get.translation(target) + '的一张手牌');
                            'step 1'
                            event.card = result.cards[0];
                            target.showCards(event.card, get.translation(target) + '的一张手牌');
                            game.delay(1.5);
                            'step 2'
                            if (!player.countCards('h')) {
                                event.finish();
                            } else {
                                var dialog = ui.create.dialog("弃置一张牌来执行后续效果？");
                                dialog.add([event.card]);
                                player.chooseToDiscard('h', dialog, 1).set('ai', function(card) {
                                    var valt = get.value(_status.event.card2, _status.event.target);
                                    var valp = get.value(_status.event.card2, _status.event.player);
                                    var val = get.alteredValue(card);

                                    if (valt < 0) {
                                        return 3 - val;
                                    } else if (get.suit(card) == get.suit(_status.event.card2)) {
                                        return 3.1 + valp + valt - val;
                                    } else if (valt > 0 && get.color(card) == get.color(_status.event.card2)) {
                                        return valp + valt - val;
                                    }
                                    return valt + 1 - val;
                                }).set('card2', event.card).set('target', target);
                            }
                            'step 3'
                            if (result.bool) {
                                var cardx = result.cards[0];
                                if (get.color(cardx) == get.color(event.card)) {
                                    player.gain([event.card], false, target, 'give');
                                    event.finish();
                                } else {
                                    target.discard([event.card], 'notBySelf');
                                };
                                if (get.suit(cardx) == get.suit(event.card)) {
                                    target.damage('nocard');
                                };
                            };
                        },
                        ai: {
                            order: function(item, player) {
                                var min = 15.1;
                                var hs = player.getCards('h');
                                for (var i = 0; i < hs.length; i++) {
                                    if (!get.tag(hs[i], 'draw')) continue;
                                    var name = get.name(hs[i]);
                                    var temp = get.order({
                                        name: name
                                    });
                                    min = Math.min(min, temp);
                                }
                                return min - 0.1;
                            },
                            result: {
                                target: function(player, target) {
                                    var eff = get.damageEffect(target, player);
                                    if (target.hasSkillTag('nodamage')) return eff * 0.3;
                                    return eff;
                                }
                            }
                        },
                    },
                    "radiance_hongguan": {
                        trigger: {
                            player: 'phaseDiscardBefore',
                        },
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        locked: false,
                        content: function() {
                            'step 0'
                            player.showHandcards();
                            var suits = [];
                            var hs = player.getCards('h');
                            for (var i = 0; i < hs.length; i++) {
                                suits.add(get.suit(hs[i]));
                            };
                            event.num = suits.length;
                            'step 1'
                            var str1 = '摸一张牌';
                            var str2 = '手牌上限+1';
                            player.chooseControl([str1, str2]).set('prompt', "虹冠：选择一项：（还能选择" + event.num + "次，当前手牌上限为" + player.getHandcardLimit() + "）").set('ai', function(event, player) {
                                if (player.needsToDiscard()) return 1;
                                return 0;
                            });
                            'step 2'
                            if (result.index == 0) {
                                player.draw(1);
                            } else {
                                player.addTempSkill('radiance_hongguan_maxHand');
                                player.storage.radiance_hongguan_maxHand++;
                            };
                            event.num--;
                            if (event.num > 0) event.goto(1);
                        },
                        subSkill: {
                            maxHand: {
                                charlotte: true,
                                mod: {
                                    maxHandcardBase: function(player, num) {
                                        return num + player.storage.radiance_hongguan_maxHand;
                                    },
                                },
                                init: function(player, skill) {
                                    if (typeof player.storage.radiance_hongguan_maxHand != 'number') player.storage.radiance_hongguan_maxHand = 0;
                                },
                                onremove: function(player, skill) {
                                    player.storage.radiance_hongguan_maxHand = 0;
                                },
                            },
                        },
                    },
                    "radiance_wanling": {
                        trigger: {
                            player: 'phaseDrawBegin1'
                        },
                        frequent: true,
                        derivation: ['radiance_lingyao', 'radiance_wanxiang'],
                        content: function() {
                            'step 0'
                            if (!event.numFixed) trigger.changeToZero();
                            var num = 3;
                            var cards = get.cards(num);
                            event.count = 0;
                            for (var i = 0; i < cards.length; i++) {
                                event.count += cards[i].number;
                            }
                            player.showCards(cards);
                            player.gain(cards, 'gain2');
                            'step 1'
                            var num1 = 18;
                            var num2 = 24;
                            if (event.count <= num1) {
                                player.addTempSkill('radiance_lingyao');
                                player.popup('radiance_lingyao');
                            } else if (event.count >= num2) {
                                player.addTempSkill('radiance_wanxiang');
                                player.popup('radiance_wanxiang');
                            } else if (player.storage.radiance_cheli) {
                                player.addTempSkill('radiance_zhisu');
                                player.popup('radiance_zhisu');
                            }
                        },
                        ai: {
                            threaten: 1.5
                        },
                    },
                    "radiance_wanlingx": {},
                    "radiance_fuxing": {
                        trigger: {
                            global: ['phaseDiscardEnd'],
                        },
                        filter: function(event, player) {
                            if (game.isHonorRadiance && event.player != player) return false;
                            var cards = [];
                            event.player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == event && evt.hs) cards.addArray(evt.hs);
                            });
                            return cards.length > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            if (trigger.player != player) {
                                player.chooseBool(get.prompt2('radiance_fuxing', trigger.player, player)).set('choice', get.attitude(player, trigger.player) > 1);
                            } else {
                                var cards = [];
                                trigger.player.getHistory('lose', function(evt) {
                                    if (evt && evt.getParent('phaseDiscard') == trigger && evt.hs) cards.addArray(evt.hs);
                                });
                                event.count = Math.min(cards.length, 3);
                                var dialog = ui.create.dialog(get.prompt('radiance_fuxing'));
                                dialog.addText('令一名其他角色摸' + get.cnNumber(event.count) + '张牌');
                                player.chooseTarget(dialog, lib.filter.notMe).set('ai', function(target) {
                                    var player = _status.event.player;
                                    if (get.attitude(player, target) < 1) return 0;
                                    return get.attitude(player, target) / (0.5 + target.hp * 1.3 + target.countCards('h') * 0.8);
                                });
                            };
                            'step 1'
                            if (result.bool) {
                                if (trigger.player != player) {
                                    player.logSkill('radiance_fuxing', trigger.player);
                                    trigger.player.draw(1, player);
                                } else {
                                    var target = result.targets[0];
                                    player.logSkill('radiance_fuxing', target);
                                    player.line(target);
                                    target.draw(event.count);
                                }
                            };
                        },
                        ai: {
                            expose: 0.3,
                        },
                    },
                    "radiance_cheli": {
                        skillAnimation: true,
                        animationColor: 'water',
                        unique: true,
                        juexingji: true,
                        derivation: ['radiance_wanlingx', 'radiance_pofa'],
                        trigger: {
                            player: 'dyingBegin'
                        },
                        //priority:10,
                        forced: true,
                        filter: function(event, player) {
                            var evt = event.getParent();
                            if (evt.player != player || evt.name != 'damage') return false;
                            if (evt.card && evt.card.name == 'sha') return false;
                            return !player.storage.radiance_cheli;
                        },
                        init: function(player) {
                            if (!player.storage.radiance_cheli) player.storage.radiance_cheli = false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_cheli');
                            player.removeSkill('radiance_fuxing');
                            player.loseMaxHp();
                            'step 1'
                            if (player.hp < 2) {
                                player.recover(2 - player.hp);
                            };
                            'step 2'
                            player.addSkill('radiance_pofa');
                            player.storage.radiance_cheli = true;
                        },
                    },
                    "radiance_huangdao": {
                        trigger: {
                            global: 'phaseZhunbeiBegin',
                        },
                        filter: function(event, player) {
                            if (event.player != player) return ui.discardPile.childNodes.length > 0;
                            return player.countDiscardableCards(player, 'he') > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            event.list = [];
                            for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                var current = ui.discardPile.childNodes[i];
                                event.list.push(current);
                            };
                            if (0 != 1) {
                                player.chooseToDiscard(1, 'he', get.translation(trigger.player) + "的回合开始了，是否弃一张牌来发动“黄道”？").set('ai', function(card) {
                                    var player = _status.event.player;
                                    var trigger = _status.event.getTrigger();
                                    var list = _status.event.getParent().list;
                                    var judges = trigger.player.getCards('j');
                                    var att_cur = get.sgn(get.attitude(player, trigger.player));
                                    if (judges.length > 0 && att_cur != 0) {
                                        var judge = get.judge(judges[judges.length - 1]);
                                        var max = judge(card) * att_cur;
                                        for (var i = 0; i < list.length; i++) {
                                            var current = list[i];
                                            var result = judge(current) * att_cur;
                                            max = Math.max(result, max);
                                        };
                                        if (max == 0) return -1;
                                        var top = _status.pileTop;
                                        if (get.itemtype(top) == 'card') {
                                            if (judge(top) >= max) return -1;
                                        };
                                        return result - get.value(card) / 2;
                                    };
                                    if (get.value(card) <= 0 && get.attitude(player, trigger.player) < 0) return 0 - get.value(card);
                                    return -1;
                                }).set('logSkill', ['radiance_huangdao', trigger.player]);
                            } else {
                                event.bool = true;
                            };
                            'step 1'
                            if (result.bool || event.bool) {
                                if (result.cards && get.position(result.cards[0]) == 'd') event.list.push(result.cards[0]);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            var next = player.chooseButton([event.bool ? "是否发动“黄道”将一张牌置于牌堆顶？" : "将一张牌置于牌堆顶", event.list]).set('ai', function(button) {
                                var card = button.link;
                                var player = _status.event.player;
                                var trigger = _status.event.getTrigger();
                                var judges = trigger.player.getCards('j');
                                var att_cur = get.sgn(get.attitude(player, trigger.player));
                                if (judges.length > 0 && att_cur != 0) {
                                    var judge = get.judge(judges[judges.length - 1]);
                                    return judge(card) * att_cur;
                                };
                                return att_cur * get.value(card, trigger.player);
                            });
                            if (!event.bool) next.set('forced', true);
                            'step 3'
                            if (result.bool) {
                                var card = result.links[0];
                                ui.cardPile.insertBefore(card, ui.cardPile.firstChild);
                                if (event.bool) player.logSkill('radiance_huangdao');
                                game.log(player, "将" + get.translation(card) + "置于牌堆顶");
                                game.broadcastAll(function(player) {
                                    var cardx = ui.create.card();
                                    cardx.classList.add('infohidden');
                                    cardx.classList.add('infoflip');
                                    player.$throw(cardx, 1000, 'nobroadcast');
                                }, player);
                            };
                            'step 4'
                            game.updateRoundNumber();
                        },
                    },
                    "radiance_xingyi": {
                        mark: true,
                        marktext: "⇑",
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                var list = [],
                                    str = "使用";
                                if (player.hasSkill('radiance_xingyi_used')) str = "当前回合不再生效，下一次发动时：<br>使用"
                                if (status == 0) list = ['basic', 'trick', 'equip'];
                                else if (status == 1) list = ['trick', 'equip', 'basic'];
                                else list = ['equip', 'basic', 'trick'];
                                str += get.translation(list[0]) + "牌时摸一张牌<br>使用";
                                str += get.translation(list[1]) + "牌时回复1点体力<br>使用";
                                str += get.translation(list[2]) + "牌后此技能本回合失效";
                                return str;
                            },
                        },
                        init: function(player, skill) {
                            if (typeof player.storage.radiance_xingyi_status != 'number') player.storage.radiance_xingyi_status = -1;
                        },
                        trigger: {
                            player: 'useCard2',
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_xingyi_used')) return false;
                            return ['basic', 'trick', 'equip'].contains(get.type2(event.card));
                        },
                        forced: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            player.storage.radiance_xingyi_status++;
                            game.broadcastAll(function(player, skill) {
                                var mark = player.marks[skill];
                                var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                if (mark) {
                                    if (status == 0) {
                                        mark.firstChild.style.transform = 'none';
                                    } else if (status == 1) {
                                        mark.firstChild.style.transform = 'rotate(120deg)';
                                    } else {
                                        mark.firstChild.style.transform = 'rotate(240deg)';
                                    };
                                }
                            }, player, 'radiance_xingyi');
                            'step 1'
                            var type = get.type2(trigger.card);
                            var index = (999999 + ['basic', 'trick', 'equip'].indexOf(type) - player.storage.radiance_xingyi_status) % 3;
                            if (index == 0) {
                                player.draw();
                            } else if (index == 1) {
                                player.recover('nocard');
                            } else {
                                player.addTempSkill('radiance_xingyi_used');
                            };
                        },
                        ai: {
                            reverseEquip: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.hasSkill('radiance_xingyi_used')) return false;
                                var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                if (status == 0) return false;
                                if (status == 1 && !player.isDamaged()) return false;
                            },
                        },
                        mod: {
                            aiOrder: function(player, card, num) {
                                if (player.hasSkill('radiance_xingyi_used')) return;
                                var list;
                                var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                if (status == 0) list = ['basic', 'trick', 'equip'];
                                else if (status == 1) list = ['trick', 'equip', 'basic'];
                                else list = ['equip', 'basic', 'trick'];
                                if (num > 0) {
                                    var type = get.type2(card, player);
                                    if (type == list[0]) return num + 5;
                                    if (type == list[1]) {
                                        if (player.hp > 2 || !player.isDamaged()) return;
                                        if (player.hp <= 1) return num + 6;
                                        return num * 1.5;
                                    };
                                    return num / 2;
                                };
                                return;
                            },
                        },
                        subSkill: {
                            used: {
                                locked: true,
                                charlotte: false,
                                init: function(player, skill) {
                                    player.unmarkSkill('radiance_xingyi');
                                },
                                onremove: function(player, skill) {
                                    player.markSkill('radiance_xingyi');
                                    game.broadcastAll(function(player, skill) {
                                        var mark = player.marks[skill];
                                        var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                        if (mark) {
                                            if (status == 0) {
                                                mark.firstChild.style.transform = 'none';
                                            } else if (status == 1) {
                                                mark.firstChild.style.transform = 'rotate(120deg)';
                                            } else {
                                                mark.firstChild.style.transform = 'rotate(240deg)';
                                            };
                                        };
                                    }, player, 'radiance_xingyi');
                                },
                                mark: true,
                                marktext: "停",
                                intro: {
                                    mark: function(dialog, storage, player, skill) {
                                        var status = (player.storage.radiance_xingyi_status + 1000000) % 3;
                                        var list = [],
                                            str = "使用";
                                        if (player.hasSkill('radiance_xingyi_used')) str = "当前回合不再生效，下一次发动时：<br>使用"
                                        if (status == 0) list = ['basic', 'trick', 'equip'];
                                        else if (status == 1) list = ['trick', 'equip', 'basic'];
                                        else list = ['equip', 'basic', 'trick'];
                                        str += get.translation(list[0]) + "牌时摸一张牌<br>使用";
                                        str += get.translation(list[1]) + "牌时回复1点体力<br>使用";
                                        str += get.translation(list[2]) + "牌后此技能本回合失效";
                                        return str;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_jiegong": {
                        usable: 1,
                        enable: "phaseUse",
                        content: function() {
                            player.chooseUseTarget({
                                name: 'taoyuan',
                                radiance_jiegong: true,
                            }, true, false);
                        },
                        ai: {
                            threaten: 1.8,
                            order: function(card, player) {
                                return get.order({
                                    name: 'taoyuan',
                                }, player) + 0.5;
                            },
                            result: {
                                player: function(player) {
                                    if (player.hasSkill('radiance_jiegong_used')) return player.getUseValue('taoyuan');
                                    var eff = 0;
                                    for (var i = 0; i < game.players.length; i++) {
                                        var target = game.players[i];
                                        if (target == player || !target.isDamaged() || get.attitude(player, target) > 0 || !target.isIn()) continue;
                                        var num = player.countCards('hs', function(card) {
                                            return get.tag(card, 'damage') && player.canUse(card, target, false) && player.getUseValue(card) > 0 && get.effect(target, card, player, player);
                                        });
                                        if (num > 0) {
                                            var eff1 = get.damageEffect(target, player, player);
                                            if (target.hp <= 1) eff1 *= 1.5;
                                            else if (target.hp <= 2 && num > 1) eff1 * 1.2;
                                            if (!game.hasPlayer(function(current) {
                                                    return current != target && current.canSave(target) && get.attitude(current, target) > 1;
                                                })) eff1 *= 1.5;
                                            eff = Math.max(eff, eff1);
                                        };
                                    };
                                    return player.getUseValue('taoyuan') + eff;
                                },
                            },
                        },
                        group: ['radiance_jiegong_execute', 'radiance_jiegong_mark'],
                        subSkill: {
                            mark: {
                                trigger: {
                                    global: 'recoverEnd',
                                },
                                forced: true,
                                silent: true,
                                firstDo: true,
                                charlotte: true,
                                filter: function(event, player) {
                                    return event.num > 0 && event.player != player;
                                },
                                content: function() {
                                    var parent = trigger.parent;
                                    if (trigger._modparent && game.online) {
                                        parent = trigger._modparent;
                                    };
                                    for (var i = 0; i < 30; i++) {
                                        if (!parent) return;
                                        if (parent.name == 'useCard' && parent.player == player) {
                                            if (!Array.isArray(parent.radiance_jiegong)) parent.radiance_jiegong = [];
                                            parent.radiance_jiegong.add(trigger.player);
                                        };
                                        parent = parent.parent;
                                    };
                                },
                            },
                            execute: {
                                trigger: {
                                    player: 'useCardEnd',
                                },
                                filter: function(event, player) {
                                    if (player.hasSkill('radiance_jiegong_used')) return false;
                                    if (!Array.isArray(event.radiance_jiegong)) return false;
                                    return event.radiance_jiegong.length > 0;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("是否对一名角色发动【洁弓】？", 'hidden');
                                    dialog.addText("你可以令一名回复过体力的角色不能使用或打出牌响应牌，且你对其使用牌无距离限制，对其造成的下一次伤害+1，直至回合结束");
                                    player.chooseTarget([1, 1], dialog, function(card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('ai', function(target) {
                                        var player = _status.event.player;
                                        var base = -1 - player.countCards('hs', function(card) {
                                            return get.tag(card, 'damage') && player.canUse(card, target, false) && player.getUseValue(card) > 0 && get.effect(target, card, player, player);
                                        });
                                        if (target.hasSkillTag('nodamage')) base = -0.5;
                                        return base * get.attitude(player, target);
                                    }).set('targets', trigger.radiance_jiegong);
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.storage.radiance_jiegong_used = target;
                                        player.addTempSkill('radiance_jiegong_used');
                                        player.logSkill('radiance_jiegong', target);
                                        target.addTempSkill('radiance_jiegong_forbid');
                                    } else {
                                        event.finish();
                                    };
                                },
                            },
                            forbid: {
                                trigger: {
                                    global: 'useCard1',
                                },
                                forced: true,
                                silent: true,
                                charlotte: true,
                                firstDo: true,
                                content: function() {
                                    trigger.directHit.add(player);
                                },
                                ai: {
                                    neg: true,
                                    forbid_card: true,
                                    skillTagFilter: function(player, tag, arg) {
                                        if (tag == 'forbid_card' && player.hp <= 0) return false;
                                    },
                                    threaten: 5,
                                },
                            },
                            used: {
                                intro: {
                                    content: "洁弓的封印效果本回合已对$使用",
                                },
                                usable: 1,
                                trigger: {
                                    source: 'damageBegin1',
                                },
                                filter: function(event, player) {
                                    return event.player == player.storage.radiance_jiegong_used && event.num > 0;
                                },
                                forced: true,
                                charlotte: true,
                                mark: true,
                                content: function() {
                                    trigger.num++;
                                },
                                mod: {
                                    targetInRange: function(card, player, target) {
                                        if (target == player.storage.radiance_jiegong_used) return true;
                                    },
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_jiegong_used;
                                },
                            },
                        },
                    },
                    "radiance_hunji": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        frequent: true,
                        direct: true,
                        filter: function(event, player) {
                            if (player.getHistory('custom', evt => evt.radiance_hunji_draw).length > 0) return true;
                            return player.isDamaged() && player.getHistory('custom', evt => evt.radiance_hunji_recover).length > 1;
                        },
                        content: function() {
                            'step 0'
                            event.logged = false;
                            var str = "###是否发动【魂纪】？###本回合已有角色体力变为1，可以摸一张牌";
                            if (player.getHistory('custom', evt => evt.radiance_hunji_draw).length > 0) player.chooseBool(str).set('frequentSkill', 'radiance_hunji');
                            'step 1'
                            if (result.bool) {
                                event.logged = true;
                                player.logSkill('radiance_hunji');
                                player.draw();
                            };
                            if (player.getHistory('custom', evt => evt.radiance_hunji_recover).length < 2 || player.isHealthy()) event.finish();
                            'step 2'
                            var str = "本回合体力值变化合计大于1，可以回复1点体力";
                            if (!event.logged) str = "###是否发动【魂纪】？###" + str;
                            player.chooseBool(str).set('frequentSkill', 'radiance_hunji');
                            'step 3'
                            if (result.bool) {
                                if (!event.logged) {
                                    event.logged = true;
                                    player.logSkill('radiance_hunji');
                                };
                                player.recover();
                            };
                        },
                        group: 'radiance_hunji_mark',
                        subSkill: {
                            mark: {
                                charlotte: true,
                                forced: true,
                                silent: true,
                                firstDo: true,
                                priority: 500,
                                trigger: {
                                    global: ['changeHp'],
                                },
                                content: function() {
                                    if (trigger.player.hp == 1) {
                                        player.getHistory('custom').push({
                                            radiance_hunji_draw: true,
                                        });
                                    };
                                    if (trigger.player == player) {
                                        var num = Math.abs(trigger.num);
                                        for (var i = 0; i < num; i++) {
                                            player.getHistory('custom').push({
                                                radiance_hunji_recover: true,
                                            });
                                        };
                                    };
                                },
                            },
                        },
                    },
                    "radiance_xianggan": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget('相干：将一名其他角色横置或重置', lib.filter.notMe).set('ai', function(target) {
                                var att = get.attitude(player, target);

                                if (att > 0 && target.isLinked()) return 10 * att;
                                if (att < 0 && !target.isLinked()) return -8 * att;

                                return att - 1;
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                player.logSkill('radiance_xianggan', result.targets[0]);
                                player.line(result.targets[0], 'blue');
                                player.link();
                                result.targets[0].link();
                            };
                        },
                        group: 'radiance_xianggan_draw',
                        subfrequent: 'draw',
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: ['linkAfter', 'turnOverAfter'],
                                },
                                frequent: true,
                                sub: true,
                                content: function() {
                                    var num = 1;
                                    var evt = trigger.getParent('damage', true);
                                    if (evt && evt.nature && evt.player == player && !evt.notLink()) num += 1;

                                    player.draw(num);
                                },
                            },
                        },
                    },
                    "radiance_zhihuan": {
                        inherit: 'radiance_losehp2',
                        group: 'radiance_zhihuan_gain',
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: ['loseHpEnd', 'damageEnd'],
                                },
                                sub: true,
                                filter: function(event, player, name) {
                                    if (name == 'damageEnd' && !event.nature) return false;
                                    return event.num > 0 && player.isDamaged();
                                },
                                content: function() {
                                    'step 0'
                                    event.count = trigger.num;
                                    event.num = player.getDamagedHp() + 1;
                                    'step 1'
                                    var cards = get.cards(event.num);
                                    game.cardsGotoOrdering(cards);
                                    player.showCards(cards, "置换");
                                    game.delay(1, 0.5);
                                    var suits = [];
                                    for (var i = 0; i < cards.length; i++) {
                                        suits.add(get.suit(cards[i]));
                                    };
                                    event.suits = suits;
                                    event.countx = 0;
                                    'step 2'
                                    player.chooseTarget('置换：选择一名区域内有牌的角色').set('filterTarget', function(card, player, target) {
                                        return target.countCards('hej') > 0;
                                    }).set('ai', function(target) {
                                        var att = get.attitude(player, target);

                                        if (att > 1 && target.countCards('j') > 0) return 10 * att;
                                        return -att * target.countCards('he');
                                    });
                                    'step 3'
                                    if (result.bool && result.targets.length) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.choosePlayerCard('hej', "弃置" + get.translation(target) + "区域内的一张牌" + (event.suits.length > 0 ? "或将一张花色为" + get.translation(event.suits) + "的牌移动给另外一名角色" : ""), true, function(button) {
                                            var player = _status.event.player;
                                            var card = button.link;
                                            var target = _status.event.getParent().target;
                                            if (get.attitude(player, target) > 0) {
                                                if (get.position(card) == 'j') return 4;
                                                if (get.value(card, target) <= 0) return -get.effect(target, card, target, player);
                                            } else {
                                                if (get.position(card) == 'e' && !target.hasSkillTag('noe')) {
                                                    var max = game.countPlayer(function(current) {
                                                        if (get.effect(current, card, current, player) > 1 && get.effect(target, card, target, player) < 0) return get.value(card, target);
                                                        return 0;
                                                    });
                                                    if (max > 0) return get.value(card, target) + max;
                                                    return get.value(card, target);
                                                } else if (get.position(card) == 'j') {
                                                    return -1;
                                                } else {
                                                    return get.buttonValue(button);
                                                };
                                            };
                                            return -1;
                                        }, target).set('filterButton', function(button) {
                                            return true;
                                        });
                                    } else {
                                        event.goto(7);
                                    };
                                    'step 4'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        event.card = card;
                                        if (get.position(card) == 'j' && event.suits.contains(get.suit(card))) {
                                            player.chooseTarget(1, "是否将" + get.translation(card) + "移动至另一名角色的判定区？", function(card, player, target) {
                                                return target.canAddJudge(_status.event.card);
                                            }).set('ai', function(target) {
                                                return get.effect(target, _status.event.card, player, player);
                                            }).set('card', card);
                                        } else if (get.position(card) == 'e' && event.suits.contains(get.suit(card))) {
                                            player.chooseTarget(1, "是否将" + get.translation(card) + "移动至另一名角色的装备区？", function(card, player, target) {
                                                return target.canEquip(_status.event.card);
                                            }).set('ai', function(target) {
                                                return get.effect(target, _status.event.card, player, player);
                                            }).set('card', card);
                                        } else {
                                            event.directresult = true;
                                        };
                                    } else {
                                        event.finish();
                                    };
                                    'step 5'
                                    if (result.targets && !event.directresult) {
                                        var target2 = result.targets[0];
                                        target.$give(card, target2);
                                        event.suits.remove(get.suit(card));
                                        if (get.position(card) == 'e') {
                                            target2.equip(card);
                                        } else {
                                            target2.addJudge(card);
                                        };
                                        game.delay();
                                    } else {
                                        event.countx++;
                                        target.discard(card, (target == player ? 'notBySelf' : null));
                                        delete event.directresult;
                                    };
                                    'step 6'
                                    if (event.suits.length - event.countx > 0) {
                                        event.goto(2)
                                    };
                                    'step 7'
                                    event.count--;
                                    if (event.count > 0) {
                                        player.chooseBool("是否继续发动“置换”？").set('choice', true);
                                    } else {
                                        event.finish();
                                    };
                                    'step 8'
                                    if (result.bool) {
                                        event.goto(1);
                                    };
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            draw: 1.5,
                            discard: 1,
                            loseHp_defend: 2,
                        },
                    },
                    "radiance_weiguan": {
                        trigger: {
                            player: ['phaseJudgeBegin', 'phaseDrawBegin', 'phaseUseBegin', 'phaseDiscardBegin'],
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            var cards = get.cards(1);
                            game.cardsGotoOrdering(cards);
                            var next = player.chooseToMove();
                            next.set('list', [
                                ['牌堆顶', cards],
                                ['牌堆底'],
                            ]);
                            next.set('prompt', "微观：可以将牌堆顶的一张牌牌移动到牌堆底");
                            next.set('type', trigger.name);
                            next.processAI = function(list) {
                                var cards = list[0][1],
                                    player = _status.event.player;
                                var next2 = player.getNext();
                                var top = [];

                                switch (_status.event.type) {
                                    case 'phaseJudge':
                                        next2 = player;
                                        var judges = next2.getCards('j');
                                        if (!next2.hasWuxie() && judges.length > 0) {
                                            var judge = get.judge(judges[0]);
                                            if (judge(cards[0]) > 0) {
                                                top.unshift(cards.shift());
                                            };
                                        } else {
                                            top = cards.filter(card => get.alteredValue(card) > 4.5);
                                        };
                                        break;
                                    case 'phaseUse':
                                        if (player.storage.radiance_weiguan_bottom === true) {
                                            var last = ui.cardPile.lastChild;
                                            if (get.suit(last) == get.suit(cards[0]) && player.countCards('h', function(card) {
                                                    return get.suit(card, player) == get.suit(last) && get.alteredValue(card) < 5;
                                                }) && player.hasSkill('radiance_jiancai')) {
                                                top.push(cards[0]);
                                                break;
                                            };
                                        };
                                    case 'phaseDiscard':
                                        var ongoing = true;
                                        while (next2 && next2 != player && ongoing) {
                                            if (!next2.isTurnedOver()) {
                                                ongoing = false;
                                            } else {
                                                next2 = next2.next;
                                            };
                                        };
                                        if (!next2) next2 = _status.currentPhase.next;
                                        var judges = next2.getCards('j');
                                        if (player.hasActionTag('phaseJieshuDeck', null, 'in')) {
                                            top = cards.filter(card => get.alteredValue(card) > 4.5);
                                        } else if (next2.hasActionTag('phaseZhunbeiDeck', null, 'in')) {
                                            top = cards.filter(function(card) {
                                                if (get.attitude(player, next2) > 0) return get.alteredValue(card, next2) > 4.5;
                                                return get.alteredValue(card, next2) < 3.5;
                                            });
                                        } else if (!next2.hasWuxie() && judges.length > 0) {
                                            var judge = get.judge(judges[0]);
                                            var att_cur = get.attitude(player, next2) > 0 ? 1 : -1;
                                            if (judge(cards[0]) * att_cur > 0) {
                                                top.unshift(cards.shift());
                                            };
                                        };
                                        break;
                                    default:
                                        top = cards.filter(card => get.alteredValue(card) > 4.5);
                                        break;
                                };
                                cards.removeArray(top)
                                return [top, cards];
                            };
                            'step 1'
                            var top = result.moved[0];
                            var bottom = result.moved[1];
                            top.reverse();
                            for (var i = 0; i < top.length; i++) {
                                ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                            };
                            for (i = 0; i < bottom.length; i++) {
                                ui.cardPile.appendChild(bottom[i]);
                            };
                            if (top.length) {
                                player.storage.radiance_weiguan_top = true;
                            } else {
                                delete player.storage.radiance_weiguan_top;
                            };
                            if (bottom.length) player.storage.radiance_weiguan_bottom = true;
                            player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');
                            game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                            game.updateRoundNumber();
                            game.delayx();

                            if (player.storage.radiance_weiguan_cleared !== true) {
                                player.storage.radiance_weiguan_cleared = true;
                                var next = game.createEvent('radiance_weiguan_clear');
                                next.player = player;
                                _status.event.next.remove(next);
                                var phase = _status.event.getParent('phase', true);
                                if (phase) phase.after.push(next);
                                next.setContent(function() {
                                    delete player.storage.radiance_weiguan_cleared;
                                    delete player.storage.radiance_weiguan_top;
                                    delete player.storage.radiance_weiguan_bottom;
                                });
                            };
                        },
                    },
                    "radiance_jiancai": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('h') > 0 && game.hasPlayer(function(target) {
                                if (target == player) return false;
                                return target.countCards('h') > 0;
                            });
                        },
                        filterTarget: function(card, player, target) {
                            if (target == player) return false;
                            return target.countCards('h') > 0;
                        },
                        filterCard: true,
                        position: 'h',
                        discard: false,
                        lose: false,
                        delay: 0,
                        check: function(card) {
                            var player = _status.event.player;
                            var top, bottom;
                            if (player.storage.radiance_weiguan_top === true) {
                                top = get.suit(ui.cardPile.firstChild);
                            };
                            if (player.storage.radiance_weiguan_bottom === true) {
                                bottom = get.suit(ui.cardPile.lastChild);
                            };
                            var base = get.value(card, player, 'raw') + 1;
                            if (top && bottom) {
                                if (top == bottom && get.suit(card, player) == top) base += 2;
                                if (top != bottom) {
                                    if (get.suit(card, player) == top || get.suit(card, player) == bottom) base -= 1;
                                    base += 2;
                                };
                            } else if (top && get.suit(card, player) == top) {
                                base += 1;
                            } else if (bottom && get.suit(card, player) == bottom) {
                                base += 1;
                            };
                            return Math.max(base - get.alteredValue(card, player), 0.5);
                        },
                        content: function() {
                            'step 0'
                            player.showCards(cards);
                            event.card = cards[0];
                            'step 1'
                            player.choosePlayerCard(target, 'h', true).set('ai', function(card) {
                                var player = _status.event.player;
                                var cardx = _status.event.player;
                                return Math.random();
                            });
                            'step 2'
                            target.showCards(result.cards);
                            event.cardx = result.cards[0];
                            'step 3'
                            event.top = get.cards()[0];
                            player.showCards(event.top, "牌堆顶的牌");
                            'step 4'
                            event.bottom = get.bottomCards()[0];
                            player.showCards(event.bottom, "牌堆底的牌");
                            'step 5'
                            delete player.storage.radiance_weiguan_top;
                            delete player.storage.radiance_weiguan_bottom;
                            var suits = [];
                            var cardsx = [event.card, event.cardx, event.top, event.bottom];
                            event.cardsx = cardsx.slice(0);
                            for (var i = 0; i < cardsx.length; i++) {
                                suits.add(get.suit(cardsx[i]));
                            };
                            if (suits.length == 1) {
                                var dialog = ui.create.dialog("令一名角色获得这些牌并受到3点伤害");
                                dialog.addSmall(cardsx);
                                player.chooseTarget(dialog, 1, true).set('ai', function(target) {
                                    var num = 3;
                                    if (get.attitude(_status.event.player, target) > 0) {
                                        return 0;
                                    } else if (target.hasSkillTag('noextra') || target.getEquip('baiyin')) {
                                        num = 1;
                                    };
                                    var cards = _status.event.getParent().cardsx;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (lib.filter.cardSavable(cards[i], target, target)) num--;
                                    };
                                    if (num >= target.hp) {
                                        num++;
                                    } else num--;
                                    return num * get.damageEffect(target, _status.event.player, _status.event.player);
                                });
                            } else if (suits.length == 2) {
                                var dialog = ui.create.dialog("选择一种花色的牌获得并令" + get.translation(target) + "获得其余的");
                                dialog.addSmall(cardsx);
                                player.chooseControl(dialog, suits).set('ai', function(event, player) {
                                    var color = _status.event.controls[0];
                                    var cards = event.cardsx.filter(card => get.suit(card) == color);
                                    if (event.target.getAlteredValue(cards) > player.getAlteredValue(cards)) return 1;
                                    return 0;
                                });
                                event.goto(8);
                            } else if (suits.length == 3) {
                                var map = {
                                    'spade': cardsx.filter(function(current) {
                                        return get.suit(current) == 'spade';
                                    }),
                                    'heart': cardsx.filter(function(current) {
                                        return get.suit(current) == 'heart';
                                    }),
                                    'club': cardsx.filter(function(current) {
                                        return get.suit(current) == 'club';
                                    }),
                                    'diamond': cardsx.filter(function(current) {
                                        return get.suit(current) == 'diamond';
                                    }),
                                };
                                event.cards2 = [];
                                for (var i in map) {
                                    if (map[i].length == 2) {
                                        event.cards2 = map[i];
                                        break;
                                    };
                                };
                                event.cardsx.removeArray(event.cards2);
                                var dialog = ui.create.dialog("选择同或异花色的牌获得并令" + get.translation(target) + "获得其余的");
                                dialog.addSmall(cardsx);
                                player.chooseControl(dialog, ["同花色", "异花色"]).set('ai', function(event, player) {
                                    if (event.target.getAlteredValue(event.cardsx) > player.getAlteredValue(event.cards2)) return 1;
                                    return 0;
                                });
                                event.goto(10);
                            } else {
                                event.targets2 = [];
                                event.goto(12);
                            };
                            'step 6'
                            result.targets[0].gain(event.cardsx, 'gain2', 'log');
                            'step 7'
                            result.targets[0].damage(3, 'nocard');
                            event.finish();
                            'step 8'
                            var list = event.cardsx.filter(function(current) {
                                return get.suit(current) == result.control;
                            });
                            event.cardsx.removeArray(list);
                            list.remove(event.card);
                            if (list.length) player.gain(list, 'gain2', 'log');
                            'step 9'
                            event.cardsx.remove(event.cardx);
                            if (event.cardsx.length) target.gain(event.cardsx, 'gain2');
                            event.finish();
                            'step 10'
                            var togain = result.control == "同花色" ? event.cards2 : event.cardsx;
                            togain.remove(event.card);
                            if (togain.length) player.gain(togain, 'gain2', 'log');
                            'step 11'
                            var togain = result.control == "异花色" ? event.cards2 : event.cardsx;
                            togain.remove(event.cardx);
                            if (togain.length) target.gain(togain, 'gain2', 'log');
                            event.finish();
                            'step 12'
                            var dialog = ui.create.dialog("分配一张牌");
                            dialog.add(event.cardsx);
                            player.chooseButton(dialog, true).set('ai', function(button) {
                                return 10 - get.alteredValue(button.link);
                            });
                            'step 13'
                            event.current = result.links[0];
                            event.cardsx.remove(event.current);
                            var dialog = ui.create.dialog("令一名角色获得此牌");
                            dialog.add([event.current])
                            player.chooseTarget(1, true, dialog).set('ai', function(target) {
                                var base = 1;
                                if (!_status.event.getParent().targets2.contains(target) && get.recoverEffect(target, _status.event.player, _status.event.player) > 0) base++;
                                return get.attitude(_status.event.player, target) * target.getAlteredValue(_status.event.getParent().current) * base;
                            });
                            'step 14'
                            var owner = get.owner(event.current);
                            if (!owner || owner != result.targets[0]) result.targets[0].gain(event.current, owner ? 'giveAuto' : 'gain2', owner);
                            event.targets2.add(result.targets[0]);
                            if (event.cardsx.length > 0) event.goto(12);
                            'step 15'
                            event.targets2.sort(lib.sort.seat);
                            for (var i = 0; i < event.targets2.length; i++) {
                                event.targets2[i].recover();
                            };
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: 3,
                                target: 1,
                            },
                        },
                    },
                    "radiance_juzhu": {
                        trigger: {
                            player: 'useCardEnd',
                        },
                        forced: true,
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_juzhu_used')) return false;
                            return get.name(event.card) == 'shan' || get.type2(event.card) == 'trick';
                        },
                        content: function() {
                            'step 0'
                            player.draw(2);
                            player.addTempSkill('radiance_juzhu_used');
                            'step 1'
                            if (player.hp > 1) player.loseHp();
                        },
                        group: 'radiance_juzhu_damage',
                        subSkill: {
                            used: {
                                inherit: 'radiance_used',
                                marktext: "著",
                            },
                            damage: {
                                trigger: {
                                    player: 'damageBegin4',
                                },
                                filter: function(event, player) {
                                    if (!event.card || get.type(event.card) != 'trick') return false;
                                    if (player.hasSkill('radiance_juzhu_used')) return false;
                                    return player.getHistory('damage', evt => evt.card && get.name(evt.card) == 'sha' && evt.num > 0).length == 0;
                                },
                                forced: true,
                                content: function() {
                                    trigger.cancel();
                                },
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage') && get.type(card) == 'trick') {
                                        if (player.hasSkill('radiance_juzhu_used')) return;
                                        if (player.getHistory('damage', evt => evt.card && get.name(evt.card) == 'sha' && evt.num > 0).length == 0) return 'zerotarget';
                                    };
                                },
                            },
                            halfneg: true,
                        },
                    },

                    // hheng
                    "radiance_yanzhen": {
                        trigger: {
                            global: ['respond', 'useCard2'],
                        },
                        getx: function(event, player) {
                            var cards = [];
                            if (!player.storage.radiance_yanzhen) {
                                if (get.itemtype(event.respondTo[1]) == 'card' && event.respondTo[1] != event.card) {
                                    cards.push(event.respondTo[1]);
                                };
                                if (get.itemtype(event.respondTo[1]) == 'cards') {
                                    cards.addArray(event.respondTo[1]);
                                };
                                if (event.respondTo[1].cards) {
                                    cards.addArray(event.respondTo[1].cards);
                                };
                                if (event.cards) {
                                    for (var i = 0; i < event.cards.length; i++) {
                                        cards.remove(event.cards[i]);
                                    }
                                };
                            } else if (event.player != player) {
                                if (event.cards && event.cards.length > 0) {
                                    cards.addArray(event.cards);
                                } else if (event.card) {
                                    cards.add(event.card);
                                };
                            };
                            cards = cards.filterInD('od')
                            return cards;
                        },
                        filter: function(event, player) {
                            if (!event.respondTo) return false;
                            if (get.name(event.card) != 'wuxie') return false;

                            return lib.skill.radiance_yanzhen.getx(event, player).length > 0;
                        },
                        prompt2: function(event, player) {
                            return "获得" + get.translation(lib.skill.radiance_yanzhen.getx(event, player)) + "";
                        },
                        check: function(event, player) {
                            return get.value(lib.skill.radiance_yanzhen.getx(event, player)) > 0;
                        },
                        content: function() {
                            'step 0'
                            event.cards = lib.skill.radiance_yanzhen.getx(trigger, player);
                            player.storage.radiance_yanzhen = player.storage.radiance_yanzhen ? false : true;
                            'step 1'
                            player.gain(cards, 'gain2', 'log');
                        },
                        group: ['radiance_yanzhen_wuxie'],
                        subSkill: {
                            wuxie: {
                                trigger: {
                                    player: 'useCardBegin'
                                },
                                forced: true,
                                firstDo: true,
                                sub: true,
                                silent: true,
                                filter: function(event) {
                                    return get.type(event.card) == 'trick';
                                },
                                content: function() {
                                    trigger.nowuxie = true;
                                },
                            },
                            gain: {
                                trigger: {
                                    global: ["loseAfter", "cardsDiscardAfter"],
                                },
                                filter: function(event, player) {
                                    var cards = (event.cards2 || event.cards);
                                    if (!cards) return false;
                                    if (event.name == 'lose') {
                                        if (event.type != 'discard' || event.player == player) return false;
                                    } else {
                                        var evt = event.getParent();
                                        if (evt.name != 'orderingDiscard' || !evt.relatedEvent || evt.relatedEvent.player == player || evt.relatedEvent.name == 'useCard') return false;
                                    };

                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.name(cards[i]) == 'wuxie' && get.position(cards[i], true) == 'd') return true;
                                    };
                                    return false;
                                },
                                frequent: true,
                                content: function() {
                                    var cards = (trigger.cards2 || trigger.cards),
                                        togain = [];
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.name(cards[i]) == 'wuxie' && get.position(cards[i], true) == 'd') togain.push(cards[i]);
                                    };
                                    player.gain(togain, 'gain2', 'log');
                                },
                            },
                        },
                        global: 'radiance_yanzhen_ai',
                    },
                    'radiance_yanzhen_ai': {
                        mod: {
                            aiValue: function(player, card, num) {
                                if (player.hasSkill('radiance_yanzhen')) return;
                                var targets = game.filterPlayer(function(target) {
                                    return target.hasSkill('radiance_yanzhen');
                                });
                                if (get.name(card) == 'wuxie' && targets.length > 0) {
                                    targets.sort(function(a, b) {
                                        return get.distance(_status.currentPhase, a, 'absolute') - get.distance(_status.currentPhase, b, absolute);
                                    });
                                    if (get.attitude(player, targets[0]) < 0) return -1;
                                };
                            },
                            aiUseful: function(player, card, num) {
                                if (player.hasSkill('radiance_yanzhen')) return;
                                var targets = game.filterPlayer(function(target) {
                                    return target.hasSkill('radiance_yanzhen');
                                });
                                if (get.name(card) == 'wuxie' && targets.length > 0) {
                                    targets.sort(function(a, b) {
                                        return get.distance(_status.currentPhase, a, 'absolute') - get.distance(_status.currentPhase, b, absolute);
                                    });
                                    if (get.attitude(player, targets[0]) < 0) return -1;
                                };
                            },
                            cardEnabled: function(card, player) {
                                return;
                                if (player.hasSkill('radiance_yanzhen') || player == game.me) return;
                                var targets = game.filterPlayer(function(target) {
                                    return target.hasSkill('radiance_yanzhen');
                                });
                                if (get.name(card) == 'wuxie' && targets.length > 0) {
                                    targets.sort(function(a, b) {
                                        return get.distance(_status.currentPhase, a, 'absolute') - get.distance(_status.currentPhase, b, absolute);
                                    });
                                    if (get.attitude(player, targets[0]) < 0) return false;
                                };
                            },
                        },
                        trigger: {
                            player: 'chooseToUseBefore',
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_yanzhen')) return false;
                            return event.type == 'wuxie';
                        },
                        forced: true,
                        charlotte: true,
                        silent: true,
                        firstDo: true,
                        content: function() {
                            trigger.old_ai1 = trigger.ai1;
                            trigger.ai1 = function() {
                                var evt = _status.event;
                                var player = _status.event.player;
                                if (evt.getParent().triggername == 'phaseJudge') {
                                    return evt.old_ai1();
                                };
                                var targets = game.filterPlayer(function(target) {
                                    return target.hasSkill('radiance_yanzhen');
                                });
                                targets.sort(function(a, b) {
                                    return get.distance(_status.currentPhase, a, 'absolute') - get.distance(_status.currentPhase, b, absolute);
                                });
                                if (get.attitude(player, targets[0]) < 0) return -1;
                                return evt.old_ai1();
                            };
                        },
                    },
                    "radiance_hongwei": {
                        trigger: {
                            global: 'costJunhun',
                        },
                        usable: 1,
                        frequent: true,
                        content: function() {
                            player.draw();
                        },
                    },
                    "radiance_hunlie": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        skillAnimation: true,
                        limited: true,
                        animationColor: 'orange',
                        intro: {
                            content: 'limited'
                        },
                        marktext: "魂",
                        init: function(player) {
                            if (typeof player.storage.radiance_hunlie != 'boolean') player.storage.radiance_hunlie = false;
                        },
                        filter: function(event, player) {
                            if (game.isHonorRadiance === true && !player.isDamaged()) return false;
                            return !player.storage.radiance_hunlie;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_hunlie');
                            'step 1'
                            var num = 1 + Math.max(2, player.getDamagedHp());
                            if (game.isHonorRadiance === true) num = player.getDamagedHp();
                            player.addJunhun(num);
                            player.draw(num);
                            'step 2'
                            player.recover();
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.hp < 2) return 99;
                                if (player.hp == 2 && player.countCards('h') <= 2) return 99;
                                return 0;
                            },
                            result: {
                                player: function(player) {
                                    if (player.getDamagedHp() > 2) return 10;
                                    if (player.hp <= 2 && player.countCards('h') <= 2) return 10;
                                    return 0;
                                }
                            },
                        },
                        derivation: ['radiance_junhun'],
                        group: 'radiance_hunlie_zhu',
                        subSkill: {
                            zhu: {
                                trigger: {
                                    player: 'dyingBegin',
                                },
                                filter: function(event, player) {
                                    return player.hasZhuSkill('radiance_shangwu', player) && !player.storage.radiance_hunlie;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("是否发动魂烈（尚武）？");
                                    dialog.add("限定技，当你濒死时，你可以回复1点体力，然后摸X张牌并获得X个“军魂”标记。（X为你的已损失体力值+1且至少为3）");
                                    player.chooseBool(dialog).set('ai', function() {
                                        return true;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.awakenSkill('radiance_hunlie');
                                        player.logSkill('radiance_hunlie');
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    player.recover();
                                    'step 3'
                                    var num = 1 + Math.max(2, player.getDamagedHp());
                                    if (game.isHonorRadiance === true) num = player.getDamagedHp();
                                    player.addJunhun(num);
                                    player.draw(num);
                                },
                            },
                        },
                    },
                    "radiance_junhun": {
                        intro: {
                            name: "军魂",
                            content: 'mark',
                        },
                        marktext: "军",
                    },
                    "radiance_junhun_sha": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        viewAs: {
                            name: 'sha',
                            isCard: false,
                        },
                        filterCard: function() {
                            return false;
                        },
                        viewAsFilter: function(player) {
                            if (game.isHonorRadiance === true) return false;
                            return player.hasMark('radiance_junhun');
                        },
                        selectCard: -1,
                        precontent: function() {
                            player.removeMark('radiance_junhun', 1);
                            event.trigger('costJunhun');
                        },
                        prompt: '移除一个“军魂”标记，视为使用或打出一张【杀】',
                        ai: {
                            order: function() {
                                var player = _status.event.player;
                                if (player.hp <= 2 && !game.hasPlayer(function(current) {
                                        return player.canUse('sha', current) && current.hp == 1 && get.effect(current, {
                                            name: 'sha'
                                        }, player, player) > 0;
                                    })) {
                                    return 0;
                                }
                                return 2.95;
                            },
                            skillTagFilter: function(player, tag, arg) {
                                if (!player.hasMark('radiance_junhun') || game.isHonorRadiance === true) return false;
                            },
                            respondSha: true,
                        },
                    },
                    "radiance_junhun_damage": {
                        trigger: {
                            player: ['damageBegin3'],
                        },
                        prompt: '移除一个“军魂”标记，令此伤害-1',
                        filter: function(event, player) {
                            return player.hasMark('radiance_junhun') && event.num > 0;
                        },
                        content: function() {
                            trigger.num--;
                            player.removeMark('radiance_junhun', 1);
                            event.trigger('costJunhun');
                        },
                    },
                    "radiance_shangwu": {
                        trigger: {
                            global: 'gameDrawAfter'
                        },
                        filter: function(event, player) {
                            return player.hasZhuSkill('radiance_shangwu');
                        },
                        forced: true,
                        zhuSkill: true,
                        content: function() {
                            'step 0'
                            var num = game.countPlayer(function(current) {
                                return current.group == player.group && player.hasZhuSkill('radiance_shangwu', current);
                            });
                            player.addJunhun(num);
                        },
                        derivation: ['radiance_junhun'],
                    },
                    "radiance_weipo": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        locked: false,
                        frequent: true,
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.draw();
                            'step 1'
                            player.chooseCard([1, 3], function(card, player) {
                                return get.tag(card, 'damage');
                            }).set('ai', function(card) {
                                var player = _status.event.player;
                                var val = get.name(card, player) == 'sha' ? 3 : 1;
                                if (ui.selected.cards.length < 1) return val / (100 - player.getUseValue(card));
                                if (player.countCards('h') > 5 && ui.selected.cards.length == 1) return 0;
                                if (!player.hasSha() || lib.filter.cardUsable({
                                        name: 'sha',
                                        isCard: true,
                                    }, player) == 0) return val / (100 - player.getUseValue(card));
                                if (game.hasPlayer(function(current) {
                                        if (get.attitude(player, current) >= 0) return false;
                                        var num1 = player.countCards('hs', function(card) {
                                            return get.name(card, player) != 'sha' && get.tag(card, 'damage') && player.canUse(card, current) && player.getUseValue(card) > 0;
                                        });
                                        return current.hp <= num1;
                                    })) return val / (100 - player.getUseValue(card));
                                var save = [];
                                var tosave = game.countPlayer(function(current) {
                                    if (!player.getFriends(true).contains(current) || current.hp > 1) return false;
                                    var num2 = player.countCards('hs', function(card) {
                                        if (lib.filter.cardSavable(card, player, current)) {
                                            save.add(card);
                                            return true;
                                        };
                                    });
                                    return true;
                                });
                                if (tosave > save.length) return val / (100 - player.getUseValue(card));
                                if (game.hasPlayer(function(current) {
                                        if (get.attitude(player, current) >= 0) return false;
                                        var num1 = player.countCards('hs', function(card) {
                                            return get.name(card, player) != 'sha' && get.tag(card, 'damage') && player.canUse(card, current) && player.getUseValue(card) > 0;
                                        });
                                        var num2 = Math.min(lib.filter.cardUsable({
                                            name: 'sha',
                                            isCard: true,
                                        }, player), player.countCards('hs', function(card) {
                                            return get.name(card, player) == 'sha' && player.canUse(card, current) && get.effect(current, card, player, player, current.isLinked()) > 0;
                                        }));
                                        return current.hp <= num1 + num2;
                                    })) return -1;
                                return val / (100 - player.getUseValue(card));
                            }).set('prompt', '威迫：选择至多三张伤害牌并展示');
                            'step 2'
                            if (result.bool) {
                                player.showCards(result.cards);
                                var num = result.cards.length;
                                player.addGaintag(result.cards, 'radiance_weipo');
                                player.addTempSkill('radiance_weipo_af');
                                if (result.cards.length > 1) {
                                    player.storage.radiance_weipo = true;
                                    if (result.cards.length > 2) player.addJunhun(1);
                                };
                                player.draw(num);
                            };
                        },
                        action_tag: {
                            profit: 2,
                            draw: 3,
                            negative: 0.5,
                        },
                    },
                    "radiance_weipo_af": {
                        marktext: "威",
                        intro: {
                            content: "expansion",
                            markcount: function(storage, player) {
                                return player.getExpansions('radiance_weipo').length;
                            },
                        },
                        charlotte: true,
                        mod: {
                            cardEnabled: function(card, player) {
                                if (card.name == 'sha' && player.storage.radiance_weipo === true) return false;
                            },
                            ignoredHandcard: function(card, player) {
                                return card.hasGaintag('radiance_weipo');
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && card.hasGaintag('radiance_weipo')) {
                                    return false;
                                };
                            },
                            aiOrder: function(player, card, num) {
                                var cards = player.getExpansions('radiance_weipo');
                                for (var i = 0; i < cards.length; i++) {
                                    var card2 = cards.radiance_weipo[i];
                                    if (get.number(card) == get.number(card2) && get.suit(card) == get.suit(card2) && get.name(card) == get.name(card2) && get.nature(card) == get.nature(card2)) {
                                        return num - 0.3;
                                    }
                                }
                            },
                        },
                        onremove: function(player, skill) {
                            delete player.storage.radiance_weipo;
                            player.removeGaintag('radiance_weipo');
                        },
                        ai: {
                            neg: true,
                        },
                    },
                    "radiance_zhenyan": {
                        trigger: {
                            player: "phaseDrawBegin",
                        },
                        frequent: true,
                        filter: function(event, player) {
                            return !event.numFixed;
                        },
                        content: function() {
                            'step 0'
                            event.num = trigger.num;
                            if (ui.cardPile.childNodes.length < event.num) {
                                if (_status.maxShuffle != undefined) {
                                    if (_status.maxShuffle == 0) {
                                        if (_status.maxShuffleCheck) {
                                            game.over(_status.maxShuffleCheck());
                                        } else {
                                            game.over('平局');
                                        }
                                        return [];
                                    }
                                    _status.maxShuffle--;
                                }
                                game.shuffleNumber++;
                                var cards = [],
                                    i;
                                for (var i = 0; i < lib.onwash.length; i++) {
                                    if (lib.onwash[i]() == 'remove') {
                                        lib.onwash.splice(i--, 1);
                                    }
                                }
                                if (_status.discarded) {
                                    _status.discarded.length = 0;
                                }
                                for (i = 0; i < ui.discardPile.childNodes.length; i++) {
                                    var currentcard = ui.discardPile.childNodes[i];
                                    currentcard.vanishtag.length = 0;
                                    if (get.info(currentcard).vanish || currentcard.storage.vanish) {
                                        currentcard.remove();
                                        continue;
                                    }
                                    cards.push(currentcard);
                                };
                                cards.randomSort();
                                for (var i = 0; i < cards.length; i++) {
                                    ui.cardPile.appendChild(cards[i]);
                                };
                                // event.trigger('washCard');
                            };
                            'step 1'
                            var cards = [];
                            for (i = 0; i < ui.cardPile.childNodes.length; i++) {
                                var currentcard = ui.cardPile.childNodes[i];
                                cards.push(currentcard);
                            };
                            cards.sort(lib.sort.random);
                            player.chooseCardButton(num, true, cards, "获得" + get.cnNumber(num) + "牌").set('ai', function(button) {
                                var card = button.link;
                                var player = _status.event.player;
                                if (player.getUseValue(card) > 0 || get.info(card, false).notarget) {
                                    return 20 + get.useful(button.link);
                                };
                                return get.value(card);
                            }).set('filterButton', function(button) {
                                var card = button.link;
                                var num = 0;
                                var types = [];
                                for (i = 0; i < ui.cardPile.childNodes.length; i++) {
                                    var currentcard = ui.cardPile.childNodes[i];
                                    types.add(get.type2(currentcard));
                                    if (types.length > 2) break;
                                };

                                if (ui.selected.buttons.length >= types.length) return true;
                                for (var i = 0; i < ui.selected.buttons.length; i++) {
                                    if (get.type2(card) == get.type2(ui.selected.buttons[i])) return false;
                                };
                                return true;
                            });
                            'step 2'
                            if (result.bool && result.links.length) {
                                player.gain(result.links, 'log', 'draw');
                                trigger.changeToZero();
                            };
                            'step 3'
                            game.updateRoundNumber();
                        },
                    },
                    "radiance_zhongluan": {
                        trigger: {
                            global: 'phaseEnd',
                        },
                        filter: function(event, player, name) {
                            if (event.player == player) return false;
                            var used = event.player.getHistory('useCard', function(evt) {
                                return get.tag(evt.card, 'damage');
                            });
                            if (used.length == 0) return true;
                            if (used.length > Math.max(player.getDamagedHp(), 1)) return false;
                            var num = 0;
                            event.player.getHistory('sourceDamage', function(evt) {
                                if (!evt.card) return false;
                                if (evt.getParent().name == evt.card.name) {
                                    num += evt.num;
                                    return true;
                                };
                                return false;
                            });
                            return num == 0;
                        },
                        logTarget: function(event, player) {
                            var used = event.player.getHistory('useCard', function(evt) {
                                return get.tag(evt.card, 'damage');
                            });
                            if (used.length == 0) return;
                            return event.player;
                        },
                        prompt2: function(event, player) {
                            var used = event.player.getHistory('useCard', function(evt) {
                                return get.tag(evt.card, 'damage');
                            });
                            if (used.length == 0) return "摸一张牌";
                            return "对其造成1点伤害";
                        },
                        check: function(event, player) {
                            var used = event.player.getHistory('useCard', function(evt) {
                                return get.tag(evt.card, 'damage');
                            });
                            if (used.length == 0) return true;
                            return get.damageEffect(event.player, player, player) > 1;
                        },
                        content: function() {
                            'step 0'
                            var used = trigger.player.getHistory('useCard', function(evt) {
                                return get.tag(evt.card, 'damage');
                            });
                            if (used.length == 0) {
                                player.draw(1);
                            } else {
                                trigger.player.damage(1, player, 'nocard');
                                if (!trigger.player.isUnknown(player)) player.addExpose(0.1);
                            };
                        },
                    },
                    "radiance_xianzhuo": {
                        group: ['radiance_xianzhuo_sha', 'radiance_xianzhuo_shan', 'radiance_xianzhuo_wuxie'],
                        ai: {
                            respondSha: true,
                            respondShan: true,
                            skillTagFilter: function(player) {
                                return player.countCards('h') > 0;
                            },
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage') && target.hasMark('radiance_junhun')) return 0.5;
                                },
                            },
                        },
                    },
                    "radiance_xianzhuo_sha": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        filterCard: true,
                        selectCard: function() {
                            return _status.event.player.countCards('h');
                        },
                        position: 'h',
                        viewAs: {
                            name: 'sha'
                        },
                        complexCard: true,
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        prompt: '将所有手牌当作【杀】使用或打出',
                        onuse: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        onrespond: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        check: function(card) {
                            var player = _status.event.player
                            var num = player.countCards('h');
                            var base = 6;
                            if (card.name == 'sha' && num > 2) return 0;
                            if (num == 1) {
                                base = 8;
                                if (player.hasMark('radiance_junhun')) return 1;
                            } else if (num == 2) {
                                base = 7;
                                if (player.hasMark('radiance_junhun')) return 1;
                            };
                            return base - get.useful(card);
                        },
                    },
                    "radiance_xianzhuo_shan": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        filterCard: true,
                        selectCard: function() {
                            return _status.event.player.countCards('h');
                        },
                        position: 'h',
                        viewAs: {
                            name: 'shan'
                        },
                        complexCard: true,
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        prompt: '将所有手牌当作【闪】使用或打出',
                        onuse: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        onrespond: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        check: function(card) {
                            var player = _status.event.player
                            var num = player.countCards('h');
                            var base = 6;
                            if (card.name == 'shan' && num > 2) return 0;
                            if (num == 1) {
                                return 1;
                            } else if (num == 2) {
                                base = 7;
                                if (player.hp > 2 || player.hasMark('radiance_junhun')) return 1;
                            }
                            return base - get.useful(card);
                        },
                    },
                    "radiance_xianzhuo_wuxie": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        prompt: function() {
                            return '将所有手牌当作【无懈可击】使用';
                        },
                        position: 'h',
                        check: function(card, event) {
                            if (_status.event.player.countCards('h') == 1) return 1;
                            return 7 - get.useful(card);
                        },
                        selectCard: function() {
                            return _status.event.player.countCards('h');
                        },
                        viewAs: {
                            name: 'wuxie'
                        },
                        onuse: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        onrespond: function(result, player) {
                            if (!player.hasMark('radiance_junhun') && false) player.addJunhun(1);
                        },
                        viewAsFilter: function(player) {
                            return player.countCards('h') > 0;
                        },
                        filterCard: true,
                    },
                    "radiance_danlue": {
                        trigger: {
                            global: 'phaseJieshu'
                        },
                        frequent: true,
                        filter: function(event, player) {
                            return player.countCards('h') < 2;
                        },
                        content: function() {
                            'step 0'
                            player.drawTo(2);
                        },
                        group: 'radiance_danlue_damage',
                        derivation: 'radiance_junhun',
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: 'damageEnd',
                                },
                                filter: function(event, player, name) {
                                    return event.num > 0 && player.countCards('h') == 0;
                                },
                                forced: true,
                                content: function() {
                                    player.addJunhun(1);
                                },
                            },
                        },
                    },

                    "radiance_feiren": {
                        mod: {
                            attackRange: function(player, current) {
                                return current + 1;
                            },
                            selectTarget: function(card, player, range) {
                                if (range[1] == -1) return;
                                if (card.name == 'sha') range[1] += 1;
                            },
                        },
                    },
                    "radiance_qiaowu": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        usable: 1,
                        filter: function(event, player) {
                            return !player.hasSkill('radiance_qiaowu_used');
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                }
                                if (list.length == 0) {
                                    return ui.create.dialog('巧舞没有可用牌');
                                }
                                return ui.create.dialog('巧舞', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                var evt = _status.event.getParent();
                                return evt.filterCard({
                                    name: button.link[2]
                                }, player, evt);
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                var name = button.link[2];

                                if (player.countCards('h', name) > 0) return 0;
                                if (name == 'shan') return 1;

                                var evt = _status.event.getParent('chooseToUse');
                                if (evt && evt.type == 'dying') {
                                    if (evt.dying != player && get.effect(evt.dying, {
                                            name: name
                                        }, player, player) <= 0) return 0;
                                    if (evt.dying == player && name == 'jiu') return 2.1;
                                    return 2;
                                }

                                if (player.countUsed('sha', true) > 0 && name == 'jiu') return 0;
                                var effect = player.getUseValue(name) || 0.5;
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        return false;
                                    },
                                    selectCard: -1,
                                    popname: true,
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3]
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_qiaowu');
                                        player.addTempSkill('radiance_qiaowu_used');
                                    },
                                    onrespond: function(result, player) {
                                        player.logSkill('radiance_qiaowu');
                                        player.addTempSkill('radiance_qiaowu_used');
                                    },
                                };
                            },
                            prompt: function(links, player) {
                                return '视为使用或打出了' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '';
                            }
                        },
                        ai: {
                            save: true,
                            respondSha: true,
                            respondShan: true,
                            skillTagFilter: function(player) {
                                if (player.hasSkill('radiance_qiaowu_used')) return false;
                            },
                            order: 7,
                            result: {
                                player: function(player) {
                                    var allshown = true,
                                        players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                }
                            },
                            threaten: 1.3,
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                forced: true,
                                silent: true,
                                trigger: {
                                    global: ['phaseEnd'],
                                },
                                content: function() {
                                    'step 0'
                                    player.judge(function(card) {
                                        if (get.type(card) == 'basic') return -1;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.judge < 0) {
                                        player.gain(result.card, 'gain2');
                                    } else {
                                        event.finish();
                                    }
                                    'step 2'
                                    player.loseHp();
                                },
                            },
                        },
                    },
                    "radiance_shouwu": {
                        trigger: {
                            global: 'shaMiss'
                        },
                        direct: true,
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_shouwu_shaed') && player.hasSkill('radiance_shouwu_shaned')) return false;
                            return event.cards || event.responded;
                        },
                        mark: true,
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                var bool1 = true;
                                var bool2 = true;
                                if (player.hasSkill('radiance_shouwu_shaed')) bool1 = false;
                                if (player.hasSkill('radiance_shouwu_shaned')) bool2 = false;
                                if (bool1 && bool2) {
                                    return "获得【杀】、【闪】的效果均可以发动";
                                } else if (bool1) {
                                    return "可以发动获得【杀】的效果";
                                } else if (bool2) {
                                    return "可以发动获得【闪】的效果";
                                };
                                return "两个效果本轮均已发动";
                            },
                        },
                        onremove: function(player) {
                            player.removeSkill('radiance_shouwu_shaed');
                            player.removeSkill('radiance_shouwu_shaned');
                        },
                        content: function() {
                            'step 0'
                            var choices = [];
                            var choice_info = [];
                            if (trigger.cards && trigger.cards.filterInD('od').length > 0 && !player.hasSkill('radiance_shouwu_shaed')) { //&& player != trigger.player
                                event.sha = trigger.cards.filterInD('od');
                                choices.push("获得杀");
                                choice_info.push("将此次被闪避的【杀】交给一名角色，你摸一张牌");
                            }
                            if (trigger.responded.cards && get.itemtype(trigger.responded.cards) == 'cards' && trigger.responded.cards.filterInD('od').length > 0 && !player.hasSkill('radiance_shouwu_shaned')) { // && player != trigger.target
                                event.shan = trigger.responded.cards.filterInD('od');
                                choices.push("获得闪");
                                choice_info.push("将此次使用的【闪】交给一名角色");
                            }
                            if (choices.length < 1) {
                                event.finish();
                            } else {
                                choices.push('cancel2');
                                player.chooseControl(choices, function() {
                                    if (choices.contains('获得闪')) {
                                        if (game.countPlayer(function(current) {
                                                return get.attitude(player, current) >= 1 && (!current.hasCard('h', 'shan') || current.hp < 3);
                                            }) > 0) return '获得闪';
                                    }
                                    if (choices.contains('获得杀')) {
                                        if (game.countPlayer(function(current) {
                                                return get.attitude(player, current) >= 1 && (!current.hasCard('h', 'sha') || current.needsToDiscard(1) < 1);
                                            }) > 0) {
                                            return '获得杀';
                                        }
                                        if (!player.needsToDiscard(2)) return '获得杀';
                                    }
                                    return choices[0];
                                }).set('prompt', get.prompt("radiance_shouwu")).set('choiceList', choice_info);
                            }
                            'step 1'
                            if (result.control != 'cancel2') {
                                event.choice = result.control;
                                event.cards = event.choice == '获得杀' ? event.sha : event.shan;
                                player.chooseTarget('将' + get.translation(event.cards) + '交给一名角色', true, function(card, player, target) {
                                    return true;
                                }).set('ai', function(target) {
                                    var base = 4;
                                    var att = get.attitude(player, target);
                                    if (event.choice == '获得闪') {
                                        if (target.countCards('h', 'shan') < 1) {
                                            base -= 2;
                                        }
                                        if (target.countCards('h', 'shan') < 2) {
                                            base -= 2;
                                        }
                                        base += Math.max(target.hp, 1);
                                    } else {
                                        if (target.countCards('h', 'sha') < 1) {
                                            base -= 3;
                                        }
                                        base += target.countCards('h');
                                    }
                                    if (base > 1 && target == player) base -= 1;
                                    return att / base;
                                });
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_shouwu', target);
                                result.targets[0].gain(event.cards, 'gain2');
                                if (event.choice == '获得杀') {
                                    player.draw();
                                    player.addTempSkill('radiance_shouwu_shaed', 'roundStart');
                                } else {
                                    player.addTempSkill('radiance_shouwu_shaned', 'roundStart');
                                };
                            } else {
                                event.finish();
                            };
                            'step 3'
                            if (player.hasMark('radiance_junhun') && target != player) {
                                player.chooseBool("是否将一个“军魂”移给" + get.translation(target) + "？").set('ai', function(event, player) {
                                    var target = event.target;
                                    return get.attitude(player, target) > 1 && target.hp + target.countMark('radiance_junhun') < player.hp + player.countMark('radiance_junhun');

                                });
                            } else {
                                event.finish();
                            };
                            'step 4'
                            if (result.bool) {
                                player.removeMark('radiance_junhun', 1, false);
                                target.addJunhun(1);
                            };
                        },
                        subSkill: {
                            shaed: {
                                charlotte: true,
                            },
                            shaned: {
                                charlotte: true,
                            },
                        },
                        derivation: 'radiance_junhun',
                        action_tag: {
                            overall: 4,
                            sha_bonus: 1,
                            search: 2,
                            draw: 0.5,
                        }
                    },
                    "radiance_zhige": {
                        enable: ['chooseToRespond'],
                        filterCard: true,
                        selectCard: 1,
                        position: 'hes',
                        viewAs: {
                            name: 'sha'
                        },
                        filter: function(event, player) {
                            return player.countCards('hes') > 0;
                        },
                        prompt: '将一张牌当作【杀】打出',
                        onrespond: function(result, player) {
                            player.addJunhun(1);
                        },
                        check: function(card) {
                            return 10 / Math.max(0.5, get.alteredValue(card));
                        },
                        ai: {
                            respondSha: true,
                            skillTagFilter: function(player) {
                                return player.countCards('hes') > 0;
                            },
                            order: 20,
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'respondSha')) {
                                        var hs = target.countCards('hes');
                                        if (hs > 0) return [0, 0];
                                    };
                                },
                            },
                        },
                        mod: {
                            aiValue: function(player, card, num) {
                                if (get.name(card, player) == 'sha' && player.countCards('hs', 'sha') + player.countMark('radiance_junhun') > 0) {
                                    return 1;
                                };
                            },
                            aiUseful: function(player, card, num) {
                                if (get.name(card, player) == 'sha' && player.countCards('hs', 'sha') + player.countMark('radiance_junhun') > 0) {
                                    return 1;
                                };
                            },
                        },
                        group: ['radiance_zhige_add'],
                        subSkill: {
                            add: {
                                trigger: {
                                    player: ['loseAfter', 'shaHit'],
                                },
                                forced: true,
                                locked: false,
                                sub: true,
                                filter: function(event, player, name) {
                                    if (player.countMark('radiance_junhun') >= Math.floor(game.players.length / 2)) return false;
                                    if (name == 'shaHit') return event.cards.length == 1 && get.name(event.cards[0], player) == 'sha';
                                    if (event.type != 'discard') return false;

                                    var cards = event.cards2 || event.cards;
                                    if (!cards) return false;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.name(cards[i]) == 'sha') return true;
                                    };
                                    return false;
                                },
                                content: function() {
                                    var num = 0;
                                    if (trigger.name == 'lose') {
                                        var cards = trigger.cards2 || trigger.cards;
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.name(cards[i]) == 'sha') num++;
                                        };
                                    } else {
                                        num++;
                                    };
                                    if (num > Math.floor(game.players.length / 2) - player.countMark('radiance_junhun')) num = Math.floor(game.players.length / 2) - player.countMark('radiance_junhun');
                                    player.addMark('radiance_junhun', num);
                                },
                            },
                        },
                        derivation: 'radiance_junhun',
                    },


                    "radiance_tangong": {
                        trigger: {
                            player: 'useCardToPlayered'
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_tangong_used')) return false;
                            return event.card.name == 'sha';
                        },
                        locked: false,
                        shaRelated: true,
                        check: function(event, player) {
                            if (player.hasSkill('radiance_tangong_db')) return 1;
                            var target = event.target;
                            if (player.stat[player.stat.length - 1].card.sha > 0) {
                                return (target.countCards('h', 'shan') < 1 || (player.hp >= 3 && !player.needsToDiscard(-1)));
                            };

                            var base = target.countCards('h') * 0.2;
                            if (target.hasSkillTag('respondShan')) base += 0.3;
                            if (player.hp >= 3 && !player.needsToDiscard(-1)) base -= 0.3;
                            return Math.max(1 - Math.random() * 0.9 - base, 0);
                        },
                        content: function() {
                            'step 0'
                            player.draw(2);
                            player.addTempSkill('radiance_tangong_db');
                            player.addTempSkill('radiance_tangong_used');
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                            db: {
                                trigger: {
                                    player: ['shaMiss', 'useCardAfter'],
                                },
                                forced: true,
                                charlotte: true,
                                silent: true,
                                firstDo: true,
                                sub: true,
                                content: function() {
                                    if (trigger.name != 'useCard') {
                                        player.loseHp(1);
                                        player.removeSkill('radiance_tangong_used');
                                    };
                                    player.removeSkill('radiance_tangong_db');
                                },
                            },
                        },
                    },
                    "radiance_zhengbian": {
                        trigger: {
                            player: "phaseAfter",
                        },
                        unique: true,
                        mark: true,
                        skillAnimation: true,
                        limited: true,
                        animationColor: 'fire',
                        intro: {
                            content: 'limited'
                        },
                        marktext: "变",
                        init: function(player) {
                            if (typeof player.storage.radiance_zhengbian != 'boolean') player.storage.radiance_zhengbian = false;
                        },
                        filter: function(event, player) {
                            if (game.roundNumber <= 1) return false;
                            return !player.storage.radiance_zhengbian;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_zhengbian'), function(card, player, target) {
                                return player != target && target.hp >= player.hp;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                if (target.isTurnedOver() && get.attitude(player, target) > 1) return 10;
                                if (target.isTurnedOver() && get.attitude(player, target) < 0) return -10;
                                return 1 - get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool) {
                                player.awakenSkill('radiance_zhengbian');
                                player.logSkill('radiance_zhengbian', result.targets);
                                result.targets[0].turnOver();
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.insertPhase();
                        },
                        ai: {
                            expose: 0.9,
                        },
                    },
                    "radiance_shouyue": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('h', function(card) {
                                return get.name(card) == 'sha' || get.subtype(card) == 'equip1';
                            }) > 0;
                        },
                        filterTarget: lib.filter.notMe,
                        filterCard: function(card, player) {
                            return get.name(card) == 'sha' || get.subtype(card) == 'equip1';
                        },
                        check: function(card) {
                            var base = card.name == 'sha' ? 2 : 3;
                            return base / Math.max(0.1, get.alteredValue(card));
                        },
                        position: 'he',
                        selectCard: [1, 1],
                        discard: false,
                        lose: false,
                        delay: 0,
                        content: function() {
                            'step 0'
                            event.card = cards[0];
                            target.gain(event.card, player, 'give');
                            'step 1'
                            var num = event.card.name == 'sha' ? 2 : 3;
                            player.draw(num);
                            player.addTempSkill('radiance_shouyue_hand');
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.countCards('he', function(card) {
                                        return get.subtype(card) == 'equip1';
                                    }) > 1) return 11;
                                if (player.countCards('he', function(card) {
                                        return get.name(card) == 'sha';
                                    }) > 1) return 9;
                                var temp = get.order({
                                    name: 'sha'
                                });
                                if (!temp || temp <= 1) temp = 6;
                                return temp + 1;
                            },
                            result: {
                                target: function(player, target) {
                                    var base = 3;
                                    if (lib.watersky.func.radiancePlayerActionTag(target, 'demand_sha') > 0) base += 2;
                                    if (target.hasSkillTag('nogain')) base -= 1;
                                    return base / (1 + target.countCards('h', 'sha'));
                                },
                                player: 3,
                            },
                        },
                        action_tag: {
                            overall: 2.5,
                            draw: 2,
                            support_give: 1,
                            in: 1,
                        },
                        subSkill: {
                            hand: {
                                charlotte: true,
                                mod: {
                                    maxHandcard: function(player, num) {
                                        return num + 2;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_tongguan": {
                        trigger: {
                            player: ['phaseJieshuBegin'],
                        },
                        frequent: true,
                        filter: function(event, player, name) {
                            var num = 0;
                            return true;
                        },
                        content: function() {
                            'step 0'
                            var num = Math.min(3, Math.max(1, player.getDamagedHp()));
                            if (player.getHistory('sourceDamage', function(evt) {
                                    return evt.num > 0; // && evt.card && get.name(evt.card) == 'sha';
                                }).length > 0) {
                                player.draw(num);
                                event.finish();
                            } else {
                                var cards = get.cards(3 + num);
                                var next2 = player.next;
                                var ongoing = true;
                                while (next2 && next2 != player && ongoing) {
                                    if (!next2.isTurnedOver()) {
                                        ongoing = false;
                                    } else {
                                        next2 = next2.next;
                                    };
                                };
                                if (!next2) next2 = player.next;

                                var next = player.chooseToMove();
                                next.set('list', [
                                    ["牌堆顶", cards],
                                    ["获得"],
                                    ["牌堆底"],
                                ]);
                                next.set('prompt', "统观：选择至多" + get.cnNumber(num) + "张牌并获得，将其余牌置于牌堆顶或底");
                                next.set('num', num);
                                next.set('next2', next2);
                                next.set('filterMove', function(from, to, moved) {
                                    var num = _status.event.num || 1
                                    if (to == 1 && moved[1].length >= num) return false;
                                    return true;
                                });
                                next.set('filterOk', function(moved) {
                                    var num = _status.event.num || 1;
                                    return moved[1].length <= num;
                                });
                                next.processAI = function(list) {
                                    var cards = list[0][1],
                                        player = _status.event.player,
                                        next2 = _status.event.next2,
                                        num = _status.event.num;
                                    cards.sort(function(a, b) {
                                        return get.value(b, player) - get.value(a, player);
                                    });
                                    var togain = [];
                                    for (var i = 0; i < num; i++) {
                                        if (get.value(cards[i], player) > 0) togain.push(cards[i]);
                                    };
                                    cards.removeArray(togain);
                                    var top = [];
                                    var judges = next2.getCards('j');
                                    var att_cur = get.attitude(player, next2) > 0 ? 1 : -1;
                                    var stopped = false;
                                    if (!next2.hasWuxie()) {
                                        for (var i = 0; i < judges.length; i++) {
                                            var judge = get.judge(judges[i]);
                                            cards.sort(function(a, b) {
                                                return (judge(b) - judge(a)) * att_cur;
                                            });
                                            if (judge(cards[0]) < 0) {
                                                stopped = true;
                                                break;
                                            } else {
                                                top.unshift(cards.shift());
                                            };
                                        };
                                    };
                                    var bottom;
                                    if (!stopped) {
                                        cards.sort(function(a, b) {
                                            return (get.value(b, next2) - get.value(a, next2)) * att_cur;
                                        });
                                        while (cards.length) {
                                            if (get.value(cards[0], next2) < 5 && att_cur > 0) break;
                                            if (get.value(cards[0], next2) > 4 && att_cur < 0) break;
                                            top.unshift(cards.shift());
                                        };
                                    };
                                    return [top, togain, cards];
                                };
                            };
                            'step 1'
                            if (result.bool) {
                                var togain = result.moved[1];
                                player.gain(togain, 'draw');
                            };
                            'step 2'
                            var top = result.moved[0];
                            var bottom = result.moved[2];
                            top.reverse();
                            for (var i = 0; i < top.length; i++) {
                                ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                            }
                            for (i = 0; i < bottom.length; i++) {
                                ui.cardPile.appendChild(bottom[i]);
                            }
                            player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');
                            game.log(player, "将" + get.cnNumber(top.length) + "张牌置于牌堆顶");
                            game.log(player, "将" + get.cnNumber(bottom.length) + "张牌置于牌堆底");
                            'step 3'
                            game.updateRoundNumber();
                            game.delayx();
                        },
                    },
                    "radiance_kuanzhi": {
                        trigger: {
                            global: 'shaMiss'
                        },
                        filter: function(event, player) {
                            if (player == event.player || event.player.group != player.group) return false;
                            return player.hasZhuSkill('radiance_kuanzhi', event.player);
                        },
                        direct: true,
                        zhuSkill: true,
                        content: function() {
                            'step 0'
                            trigger.player.chooseBool('是否令' + get.translation(player) + '发动【宽治】？').set('choice', get.attitude(trigger.player, player) > 1);
                            'step 1'
                            if (result.bool) {
                                trigger.player.logSkill('radiance_kuanzhi', player);
                                player.addJunhun(1);
                            } else {
                                event.finish();
                            }
                        },
                        derivation: 'radiance_junhun',
                    },
                    "radiance_muyi": {
                        global: 'radiance_muyi_gl',
                    },
                    "radiance_muyi_gl": {
                        trigger: {
                            source: 'damageSource',
                        },
                        locked: true,
                        charlotte: true,
                        filter: function(event, player) {
                            if (!event.num || !event.card || get.name(event.card) != 'sha') return false;
                            return game.filterPlayer(function(current) {
                                return current.hasSkill('radiance_muyi') && current.isDamaged();
                            }).length > 0 && player.countCards('he');
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseCardTarget({
                                prompt: get.prompt('radiance_muyi'),
                                prompt2: ("是否弃置一张牌，令一名有“母仪”的角色回复1点体力？"),
                                filterCard: function(card, player) {
                                    return lib.filter.cardDiscardable(card, player)
                                },
                                position: 'he',
                                filterTarget: function(card, player, target) {
                                    return target.hasSkill('radiance_muyi');
                                },
                                ai1: function(card) {
                                    var player = _status.event.player;
                                    var effect = 0;
                                    for (var i = 0; i < game.players.length; i++) {
                                        if (!game.players[i].hasSkill('radiance_muyi')) continue;
                                        effect = Math.max(effect, get.recoverEffect(game.players[i], player, player));
                                    };
                                    if (effect <= 0) return 0;
                                    if (!player.needsToDiscard()) return effect - player.getUseValue(card);
                                    return 1 / Math.max(0.1, player.getUseValue(card));
                                },
                                ai2: function(target) {
                                    var player = _status.event.player;
                                    return get.recoverEffect(target, player, player);
                                },
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_muyi', result.targets);
                                player.line(result.targets, 'red');
                                player.discard(result.cards[0]);
                                result.targets[0].recover(player, 1, result.cards[0], result.cards);
                            } else {
                                event.finish();
                            };
                        },
                    },
                    "radiance_shezheng": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        filterCard: true,
                        filterTarget: function(card, player, target) {
                            return target != player && !target.getExpansions('radiance_shezheng_af').length;
                        },
                        check: function(card) {
                            return 6 - get.value(card);
                        },
                        position: 'h',
                        discard: false,
                        content: function() {
                            'step 0'
                            target.addTempSkill('radiance_shezheng_af', {
                                player: 'phaseAfter',
                            });
                            target.storage.radiance_shezheng_source = player;
                            target.addToExpansion(cards, 'giveAuto', player).gaintag.add('radiance_shezheng_af');
                        },
                        ai: {
                            order: 7,
                            result: {
                                target: function(player, target) {
                                    var next = get.distance(player, target, 'absolute');
                                    if (target.isTurnedOver()) next += game.countPlayer();
                                    return (target.hp + 1) / (next + 1);
                                },
                            },
                        },
                    },
                    "radiance_shezheng_af": {
                        trigger: {
                            player: 'gainAfter',
                        },
                        mark: true,
                        intro: {
                            name: '摄政',
                            mark: function(dialog, storage, player, skill) {
                                var cards = player.getExpansions('radiance_shezheng_af');
                                if (cards.length) {
                                    dialog.addText('牌');
                                    dialog.addSmall(cards);
                                    dialog.addText('来源');
                                    dialog.addSmall([player.storage.radiance_shezheng_source]);
                                };
                            },
                            onunmark: function(storage, player) {
                                var cards = player.getExpansions('radiance_shezheng_af');
                                if (cards.length) {
                                    player.$throw(cards, 1000);
                                    game.cardsDiscard(cards);
                                    game.log(cards, '被置入了弃牌堆');
                                };
                            },
                        },
                        direct: true,
                        locked: true,
                        charlotte: true,
                        filter: function(event, player) {
                            if (event.getParent().name == 'draw' && event.getParent(2).name == 'phaseDraw') return false;
                            var cards = event.cards;
                            if (!cards || !cards.length) return false;
                            return player.storage.radiance_shezheng_source && player.storage.radiance_shezheng_source.isIn() && player.getExpansions('radiance_shezheng_af').length;
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_shezheng_source.logSkill('radiance_shezheng_af', player);
                            player.line(player.storage.radiance_shezheng_source, 'green');
                            player.storage.radiance_shezheng_af++;
                            player.storage.radiance_shezheng_source.draw(1);
                            'step 1'
                            if (player.storage.radiance_shezheng_af >= 5) player.removeSkill('radiance_shezheng_af');
                            else player.markSkill('radiance_shezheng_af');
                        },
                        init: function(player, skill) {
                            player.storage.radiance_shezheng_af = 0;
                        },
                        onremove: function(player) {
                            var cards = player.getExpansions('radiance_shezheng_af');
                            if (cards.length) {
                                player.$throw(cards, 1000);
                                game.cardsDiscard(cards);
                                game.log(cards, '被置入了弃牌堆');
                            };
                            delete player.storage.radiance_shezheng_source;
                        },
                        group: 'radiance_shezheng_af_sha',
                        subSkill: {
                            sha: {
                                trigger: {
                                    player: 'phaseJieshuBegin',
                                },
                                forced: true,
                                charlotte: true,
                                priority: -20,
                                filter: function(event, player) {
                                    return player.getExpansions('radiance_shezheng_af').length > 0 && player.storage.radiance_shezheng_af < 5;
                                },
                                content: function() {
                                    'step 0'
                                    player.gain(player.getExpansions('radiance_shezheng_af'), 'gain2');
                                    if (player.storage.radiance_shezheng_af >= 3) event.goto(2);
                                    'step 1'
                                    var str = "###摄政###视为使用一张无距离限制的【杀】";
                                    player.chooseTarget(1, str, function(card, player, target) {
                                        return target != player && player.canUse('sha', target, false);
                                    }).set('ai', function(target) {
                                        if (target.hasSkillTag('nodamage')) return 0;
                                        var player = _status.event.player;
                                        return get.effect(target, {
                                            name: 'sha',
                                            isCard: false
                                        }, player, player);
                                    });
                                    'step 2'
                                    if (result.targets && result.targets.length) {
                                        player.useCard({
                                            name: 'sha',
                                            isCard: false
                                        }, false, result.targets[0]).set('animate', true);
                                    };
                                    player.removeSkill('radiance_shezheng_af');
                                },
                            },
                        },
                    },
                    "radiance_wubei": {
                        trigger: {
                            player: ['phaseUseBegin', 'phaseUseEnd']
                        },
                        filter: function(event, player) {
                            var card = get.autoViewAs({
                                name: 'sha',
                                isCard: true,
                            }, null, player);
                            var info = get.info(card);
                            var num = info.usable;
                            if (typeof num == 'function') num = num(card, player);
                            num = game.checkMod(card, player, num, 'cardUsable', player);
                            player.getHistory('useCard', function(evt) {
                                if (evt.card.name != 'sha' || evt.getParent('phaseUse', true) != event) return false;
                                if (evt.addCount === false) return false;
                                num--;
                                return true;
                            });
                            player.getHistory('custom', function(evt) {
                                if (!evt.radiance_wubei) return false;
                                if (evt.phase != event) return false;
                                num--;
                                return true;
                            });
                            return num > 0;
                        },
                        check: function(event, player) {
                            if (event.step == 4) return true;
                            return !(player.hasSha() && player.getUseValue('sha') > 0);
                        },
                        content: function() {
                            'step 0'
                            player.draw();
                            if (player.stat[player.stat.length - 1].card['sha'] == undefined) {
                                player.stat[player.stat.length - 1].card['sha'] = 0;
                            };
                            player.stat[player.stat.length - 1].card['sha']++;
                            player.getHistory('custom').push({
                                radiance_wubei: true,
                                phase: trigger,
                            });
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        action_tag: {
                            overall: 1,
                            draw: 1,
                        },
                    },
                    "radiance_douji": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        filter: function(event, player) {
                            if (event.card.name != 'sha') return false;
                            return true;
                        },
                        logTarget: 'target',
                        check: function(event, player) {
                            return get.attitude(player, event.target) <= 0;
                        },
                        locked: false,
                        shaRelated: true,
                        content: function() {
                            'step 0'
                            var next = trigger.target.chooseToRespond({
                                name: 'sha'
                            });
                            next.set('ai', function(card) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.player;
                                if (player.hasSkillTag('nodamage')) return 0;
                                if (get.effect(player, trigger.card, trigger.player, player) >= 0) return 0;
                                return 11 - get.useful(card);
                            });
                            next.autochoose = lib.filter.autoRespondSha;
                            'step 1'
                            if (result.bool) {
                                player.draw();
                                trigger.getParent().excluded.add(trigger.target);
                                if (trigger.getParent().addCount !== false) {
                                    trigger.getParent().addCount = false;
                                    if (player.stat[player.stat.length - 1].card.sha > 0) {
                                        player.stat[player.stat.length - 1].card.sha--;
                                    };
                                };
                            } else {
                                trigger.target.damage().set('card', trigger.card).set('cards', trigger.cards).set('nature', get.nature(trigger.card));
                            };
                        },
                        action_tag: {
                            overall: 4,
                            sha_bonus: 2,
                            demand_sha: 2,
                            change: 0.5,
                        }
                    },
                    "radiance_kaiyang": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        filter: function(event, player) {
                            if (event.player == player) return false;
                            var black = [],
                                red = [];
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt.name != 'lose' && evt.name != 'cardsDiscard') return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    if (get.color(card) == 'red') {
                                        red.add(card);
                                    } else if (get.color(card) == 'black') {
                                        black.add(card);
                                    }
                                }
                            });
                            if (red.length == black.length && event.player.countCards('he') == 0) return false;
                            return red.length >= Math.max(1, black.length);
                        },
                        multiline: true,
                        line: 'fire',
                        logTarget: 'player',
                        check: function(event, player) {
                            if (get.attitude(player, event.player) < 0 && event.player.countDiscardableCards(player, 'he') > 0) return true;
                            return get.damageEffect(event.player, player, player, 'fire') > 0;
                        },
                        prompt2: function(event, player) {
                            var black = [],
                                red = [];
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt.name != 'lose' && evt.name != 'cardsDiscard') return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    if (get.color(card) == 'red') {
                                        red.add(card);
                                    } else if (get.color(card) == 'black') {
                                        black.add(card);
                                    }
                                }
                            });
                            if (red.length > black.length) return "对其造成1点火焰伤害或弃置其一张牌";
                            return "弃置其一张牌";
                        },
                        content: function() {
                            'step 0'
                            var black = [],
                                red = [];
                            game.getGlobalHistory('cardMove', function(evt) {
                                if (evt.name != 'lose' && evt.name != 'cardsDiscard') return false;
                                if (evt.name == 'lose' && evt.position != ui.discardPile) return false;
                                for (var i = 0; i < evt.cards.length; i++) {
                                    var card = evt.cards[i];
                                    if (get.color(card) == 'red') {
                                        red.add(card);
                                    } else if (get.color(card) == 'black') {
                                        black.add(card);
                                    }
                                }
                            });
                            var bool = (red.length > black.length);
                            event.bool = bool;
                            player.discardPlayerCard(1, trigger.player, !bool, 'he').set('ai', function(button) {
                                var target = _status.event.getTrigger().player;
                                var player = _status.event.player;
                                if (_status.event.bool && get.damageEffect(target, player, player, 'fire') > 0) return -1;
                                var val = get.buttonValue(button);
                                if (get.attitude(_status.event.player, target) > 0) return -val;
                                return val;
                            }).set('bool', bool).set('prompt', "弃置" + get.translation(trigger.player) + "一张牌" + (bool ? "，若不弃置则对其造成1点火焰伤害" : ""));
                            'step 1'
                            if (!result.bool && event.bool) {
                                trigger.player.damage(1, player, 'nocard', 'fire');
                            };
                        },
                        action_tag: {
                            overall: 1.5,
                            damage: 1,
                        },
                        ai: {
                            expose: 0.5,
                            threaten: 1.5
                        },
                    },
                    "radiance_kaiyang_db": {
                        init: function(player, skill) {
                            player.addSkillBlocker(skill);
                        },
                        onremove: function(player, skill) {
                            player.removeSkillBlocker(skill);
                        },
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte;
                        },
                        mark: true,
                        marktext: "阳",
                        charlotte: true,
                        locked: true,
                        debuff: true,
                        intro: {
                            content: function(storage, player, skill) {
                                var str = "不能使用或打出牌，";
                                var list = player.getSkills(null, false, false).filter(function(i) {
                                    return lib.skill.radiance_kaiyang_db.skillBlocker(i, player);
                                });
                                if (list.length) return str + "失效技能：" + get.translation(list);
                                return "不能使用或打出牌";
                            }
                        },
                        mod: {
                            cardEnabled2: function(card) {
                                return false;
                            },
                        },
                        ai: {
                            neg: true,
                            forbid_card: true,
                        },
                    },
                    "radiance_wuying": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            return player != _status.currentPhase && event.player != player;
                        },
                        usable: 1,
                        forced: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            event.card = trigger.card;
                            trigger.player.chooseControl(["选项一", "选项二"]).set('ai', function(event, player) {
                                var card = event.card;
                                if (get.attitude(player, event.player) > 0) {
                                    if (get.effect(event.player, card, player, event.player) >= 0) return 0;
                                    if (event.player.hp > 1 || !get.tag(card, 'damage')) return 0;
                                    if (get.tag(card, 'respondSha') && event.player.hasSha(true)) return 0;
                                    if (get.tag(card, 'respondShan') && event.player.hasShan()) return 0;
                                    return 1;
                                };
                                if (event.player.countCards('h') > 4) return 1;
                                if (player.hp - event.player.hp < 2 && event.player.countCards('h') >= 2) return 0;
                                return 1;
                            }).set('choiceList', [
                                "令" + get.translation(player) + "获得" + get.cnNumber(Math.max(1, trigger.player.hp - player.hp)) + "张♥牌",
                                "令" + get.translation(player) + "本回合可以将任意牌当做【杀】或【闪】用"
                            ]);
                            'step 1'
                            if (result.index == 0) {
                                var num = Math.max(1, trigger.player.hp - player.hp);
                                var togain = [];
                                for (var i = 0; i < num; i++) {
                                    var card = get.cardPile(function(cardx) {
                                        return get.suit(cardx) == 'heart' && !togain.contains(cardx);
                                    });
                                    if (card) togain.add(card);
                                };
                                if (togain.length) player.gain(togain, 'draw2');
                            } else {
                                player.addTempSkill('radiance_wuying_af');
                            };
                        },
                        mod: {
                            aiValue: function(player, card, num) {
                                if (get.suit(card) == 'heart') {
                                    return num * 1.1;
                                }
                            },
                            aiUseful: function(player, card, num) {
                                if (get.suit(card) == 'heart') {
                                    return num * 1.1;
                                }
                            },
                            aiOrder: function(player, card, num) {
                                if (get.suit(card) == 'heart' && num > 0) {
                                    //if (player = _status.currentPhase) return 1.2 * num;
                                    return num - 0.3;
                                }
                            },
                            ignoredHandcard: function(card, player) {
                                if (get.suit(card) == 'heart') {
                                    return true;
                                }
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && get.suit(card) == 'heart') {
                                    return false;
                                }
                            },
                        },
                        subSkill: {
                            af: {
                                mark: true,
                                intro: {
                                    content: "可以将一张牌当做【杀】或【闪】使用或打出",
                                },
                                charlotte: true,
                                locked: true,
                                group: ['radiance_wuying_sha', 'radiance_wuying_shan'],
                                ai: {
                                    respondSha: true,
                                    respondShan: true,
                                    skillTagFilter: function(player) {
                                        if (!player.countCards('hes')) return false;
                                    },
                                    effect: {
                                        target: function(card, player, target, current) {
                                            if ((get.tag(card, 'respondSha') || get.tag(card, 'respondShan')) && player.countCards('hes')) return 0.6;
                                        }
                                    },
                                },
                            },
                            sha: {
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filterCard: function(card) {
                                    return true;
                                },
                                viewAs: {
                                    name: 'sha'
                                },
                                viewAsFilter: function(player) {
                                    return player.countCards('hes') > 0;
                                },
                                charlotte: true,
                                locked: true,
                                position: 'hes',
                                prompt: '将一张牌当【杀】使用或打出',
                                check: function(card) {
                                    return 10 - get.value(card);
                                },
                                ai: {
                                    order: 3,
                                },
                            },
                            shan: {
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filterCard: function(card) {
                                    return true;
                                },
                                viewAs: {
                                    name: 'shan'
                                },
                                viewAsFilter: function(player) {
                                    return player.countCards('hes') > 0;
                                },
                                charlotte: true,
                                locked: true,
                                position: 'hes',
                                prompt: '将一张牌当【闪】使用或打出',
                                check: function(card) {
                                    return 10 - get.value(card);
                                },
                                ai: {
                                    order: 3,
                                },
                            },
                        },
                    },
                    "radiance_duanju": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.countCards('he') < 1) return false;

                            var card = event.card;
                            if (!get.tag(card, 'damage')) return false;
                            if (get.color(card) != 'black') return false;
                            if (get.type(card) == 'trick' || get.name(card) == 'sha') return true;
                            return false;
                        },
                        init: function(player) {
                            if (!player.storage.radiance_duanju) player.storage.radiance_duanju = [];
                        },
                        check: function(event, player) {
                            var card1 = event.card;
                            if (get.effect(player, card1, event.player, player) >= 0) return false;
                            if (event.getParent().excluded.contains(player)) return false;

                            var bool1 = false;
                            if (get.tag(event.card, 'respondSha')) {
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) == 0) {
                                    bool1 = true;
                                }
                            } else if (get.tag(event.card, 'respondShan')) {
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) == 0) {
                                    bool1 = true;
                                }
                            } else if (get.tag(event.card, 'damage')) {
                                bool1 = true;
                            } else if (event.card.name == 'shunshou' || event.card.name == 'guohe') {
                                return (get.attitude(player, event.player) < 0);
                            };

                            var range = event.player.getAttackRange();
                            var distance = get.distance(event.player, player);
                            if (get.attitude(player, event.player) > 0 && range - 1 >= distance) return false;
                            return bool1;
                        },
                        content: function() {
                            'step 0'
                            event.source = trigger.player;
                            event.source.discardPlayerCard(player, 'he', true);
                            'step 1'
                            if (result.bool) {
                                event.num = get.type(result.cards[0]) == 'equip' ? 2 : 1;
                                if (typeof event.source.storage.radiance_duanju_db == 'number') {
                                    event.source.storage.radiance_duanju_db += event.num;
                                } else {
                                    event.source.storage.radiance_duanju_db = event.num;
                                };
                                if (!event.source.hasSkill('radiance_duanju_db')) event.source.addTempSkill('radiance_duanju_db');
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (!event.source.inRange(player)) {
                                if (!event.isMine()) game.delayx();
                                // trigger.getParent().targets.remove(player);
                                // trigger.getParent().triggeredTargets2.remove(player);
                                trigger.getParent().excluded.add(player);
                            };
                            if (!trigger.getParent().radiance_duanju) trigger.getParent().radiance_duanju = {};
                            trigger.getParent().radiance_duanju[player.playerid] = num;
                        },
                        group: ['radiance_duanju_damage'],
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: 'damageEnd'
                                },
                                logTarget: 'source',
                                forced: true,
                                sub: true,
                                popup: false,
                                filter: function(event, player) {
                                    if (!event.card || event.num == 0) return false;
                                    var evt = event.getParent('useCard', true);
                                    if (evt && evt.radiance_duanju && evt.radiance_duanju[player.playerid] && event.card == evt.card) {
                                        return evt.player.isIn() && evt.player.countGainableCards(player, 'he') > 0;
                                    };
                                    return false;
                                },
                                content: function() {
                                    'step 0'
                                    var num = trigger.getParent('useCard', true).radiance_duanju[player.playerid];
                                    player.gainPlayerCard('he', "获得" + get.translation(trigger.source) + "的" + get.cnNumber(num) + "张牌", num, trigger.getParent('useCard', true).player);
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            active_defend: 1,
                            range: 1,
                        },
                    },
                    "radiance_duanju_db": {
                        mod: {
                            attackRange: function(player, current) {
                                if (player.storage.radiance_duanju_db) return current - player.storage.radiance_duanju_db;
                            },
                        },
                        mark: true,
                        marktext: "断",
                        locked: true,
                        charlotte: true,
                        debuff: true,
                        intro: {
                            content: "攻击范围-# ",
                        },
                        onremove: function(player, skill) {
                            delete player.storage.radiance_duanju_db;
                        },
                        ai: {
                            neg: true,
                        },
                    },
                    "radiance_yingmu": {
                        enable: "phaseUse",
                        usable: 1,
                        content: function() {
                            'step 0'
                            var targets = game.filterPlayer(function(target) {
                                return target.inRange(player);
                            });
                            var num = player.getAttackRange();
                            for (var i = 0; i < targets.length; i++) {
                                num = Math.max(num, targets[i].getAttackRange() - get.distance(targets[i], player));
                            };
                            num = Math.max(1, Math.min(5, num));
                            player.draw(num);
                        },
                        mod: {
                            aiValue: function(player, card, num) {
                                if (lib.watersky.func.getWeaponRange(card) && lib.watersky.func.getWeaponRange(card) > 1) {
                                    var equip = player.getEquip(1);
                                    var num2 = equip ? lib.watersky.func.getWeaponRange(equip) : 1;
                                    return num + 2 * Math.max(0, lib.watersky.func.getWeaponRange(card) - num2);
                                };
                            },
                            aiUseful: function(player, card, num) {
                                if (lib.watersky.func.getWeaponRange(card) && lib.watersky.func.getWeaponRange(card) > 1) {
                                    var equip = player.getEquip(1);
                                    var num2 = equip ? lib.watersky.func.getWeaponRange(equip) : 1;
                                    return num + 2 * Math.max(0, lib.watersky.func.getWeaponRange(card) - num2);
                                };
                            },
                            aiOrder: function(player, card, num) {
                                if (lib.watersky.func.getWeaponRange(card) && lib.watersky.func.getWeaponRange(card) > 1) {
                                    var equip = player.getEquip(1);
                                    var num2 = equip ? lib.watersky.func.getWeaponRange(equip) : 1;
                                    return num + 2 * Math.max(0, lib.watersky.func.getWeaponRange(card) - num2);
                                };
                            },
                            maxHandcard: function(player, current) {
                                var targets = game.filterPlayer(function(target) {
                                    return target.inRange(player);
                                });
                                var num = player.getAttackRange();
                                for (var i = 0; i < targets.length; i++) {
                                    num = Math.max(num, targets[i].getAttackRange() - get.distance(targets[i], player));
                                };
                                num = Math.max(1, Math.min(5, num));
                                return current + num;
                            },
                        },
                        ai: {
                            order: function(item, player) {
                                var list = player.getCards('h', function(card) {
                                    return (lib.watersky.func.getWeaponRange(card) && lib.watersky.func.getWeaponRange(card) > 1);
                                });
                                var max = 0;
                                for (var i = 0; i < list.length; i++) {
                                    var card = list[i];
                                    var temp = get.order({
                                        name: name
                                    });
                                    if (temp > max) max = temp;
                                }
                                var weapon = player.getEquip(1);
                                if (weapon && get.order(weapon) > max) {
                                    return 15;
                                } else if (max > 0) return max - 0.5;
                                return 3;
                            },
                            result: {
                                player: function(player) {
                                    return 1;
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            limited: 0.5,
                            draw: 3,
                            demand_equip: 1,
                        },
                    },
                    "radiance_lunxin": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return game.countPlayer(function(current) {
                                return current.countCards('h') > 0;
                            }) > 1;
                        },
                        filterTarget: function(card, player, target) {
                            if (target.countCards('h') < 1) return false;
                            if (ui.selected.targets.length == 1) {
                                return target.canCompare(ui.selected.targets[0]);
                            }
                            return true;
                        },
                        targetprompt: ['拼点发起者', '拼点目标'],
                        selectTarget: 2,
                        multitarget: true,
                        content: function() {
                            'step 0'
                            event.target1 = targets[0];
                            event.target2 = targets[1];
                            player.draw(2);
                            if (!event.target1.canCompare(event.target2)) event.finish();
                            player.addTempSkill('radiance_lunxin_compare', 'radiance_lunxinEnd');
                            'step 1'
                            event.target1.chooseToCompare(event.target2);
                            'step 2'
                            if (result.tie) {
                                event.finish();
                            } else {
                                if (result.bool) {
                                    event.playerx = event.target1;
                                } else {
                                    event.playerx = event.target2;
                                };
                            };
                            'step 3'
                            event.playerx.discardPlayerCard(player, 'he', "弃置" + get.translation(player) + "的一张牌，或点【取消】令其失去1点体力摸一张牌").set('ai', function(button) {
                                if (get.attitude(event.playerx, player) < 0) return (get.subtype(button.link) == 'equip2' && !(player.isDamaged() && get.name(button.link) == 'baiyin') ? 10 : 0);
                                return 10 - get.buttonValue(button);
                            });
                            'step 4'
                            if (!result.bool) {
                                player.loseHp(1);
                                player.draw();
                            };
                        },
                        subSkill: {
                            compare: {
                                trigger: {
                                    global: 'compare',
                                },
                                filter: function(event, player) {
                                    var evt = event.getParent('radiance_lunxin');
                                    if (!evt || !player.isDamaged()) return false;
                                    return evt.target1 == event.player;
                                },
                                direct: true,
                                sub: true,
                                popup: false,
                                content: function() {
                                    'step 0'
                                    var num = player.getDamagedHp();
                                    var choices = [];
                                    for (var i = -num; i <= num; i++) {
                                        if (trigger.num1 + i < 1 || trigger.num1 + i > 13) continue;
                                        if (i < 0) choices.add("-" + (0 - i));
                                        else if (i == 0) choices.add("0");
                                        else choices.add("+" + i);
                                    }
                                    var str = get.translation(trigger.player) + "的拼点牌点数为";
                                    str += trigger.num1;
                                    str += "，是否令其增加或减少最多" + num + "？（另一名角色的拼点牌点数为";
                                    str += trigger.num2;
                                    str += "）";
                                    player.chooseControl(choices).set('prompt', str).set('ai', function() {
                                        var difference = _status.event.difference;
                                        var choices = _status.event.choices;
                                        for (var i = 0; i < choices.length; i++) {
                                            if (parseInt(choices[i]) == difference) return choices[i];
                                        }
                                        var att1 = get.attitude(_status.event.player, _status.event.target1);
                                        var att2 = get.attitude(_status.event.player, _status.event.target2);
                                        if (att1 > att2) return choices[choices.length - 1];
                                        return choices[0];
                                    }).set('difference', trigger.num2 - trigger.num1).set('choices', choices).set('target1', trigger.player).set('target2', trigger.target2);
                                    'step 1'
                                    if (result.control != "0") {
                                        var num = trigger.num1 + parseInt(result.control);
                                        num = Math.max(Math.min(num, 13), 1);
                                        trigger.num1 = num;
                                        trigger.player.popup(result.control);
                                        game.log(player, "令", trigger.player, "的拼点牌点数", result.control, "，现在为", num, "！");
                                    }
                                },
                            },
                        },
                        ai: {
                            order: 4,
                            result: {
                                player: function(player) {
                                    if (player.hp < 2) return -5;
                                    if (player.hp == 2) return 0;
                                    return 0.5 * player.hp;
                                },
                                target: function(player, target) {
                                    if (target == player) {
                                        var cards = player.getCards('h');
                                        var num = player.getDamagedHp();
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.number(cards[i]) + num >= 12) return 5;
                                        }
                                    }
                                    return -2 / (target.countCards('h') + 0.1);
                                }
                            }
                        },
                    },
                    "radiance_zhihe": {
                        trigger: {
                            global: 'useCard2'
                        },
                        filter: function(event, player) {
                            if (!event.card || get.name(event.card) != 'sha') return false;
                            if (!event.targets || event.player == player) return false;
                            for (var i = 0; i < event.targets.length; i++) {
                                if (event.targets[i] == player || player.inRange(event.targets[i])) return true;
                            }
                            return false;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            event.choice = false;
                            event.num = Math.max(1, Math.min(5, player.maxHp - player.countCards('h')));
                            if (trigger.targets.contains(player)) {
                                event.goto(3);
                            } else {
                                player.chooseControl(['选项一', '选项二', 'cancel2']).set('choiceList', [
                                    '你成为此【杀】的唯一目标，然后摸' + get.cnNumber(event.num) + '张牌',
                                    '你额外成为此【杀】的目标，然后此【杀】的使用者受到1点伤害',
                                ]).set('ai', function() {
                                    var eff = get.effect(player, trigger.card, trigger.player, player);

                                    for (var i = 0; i < trigger.targets.length; i++) {
                                        if (get.effect(trigger.targets[i], trigger.card, trigger.player, player) <= eff) return 0;
                                    }
                                    if (!trigger.player.hasSkillTag('nodamage') && get.damageEffect(trigger.player, player, player) > Math.abs(eff)) return 1;
                                    return 2;
                                }).set('prompt', get.translation(trigger.player) + '使用【杀】指定了' + get.translation(trigger.targets) + '为目标，是否发动【志同】？');
                            }
                            'step 1'
                            if (result.index == 0) {
                                event.choice = true;
                                event.goto(4);
                            } else if (result.index == 1) {
                                player.logSkill('radiance_zhihe', trigger.player);
                                trigger.targets.add(player);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            trigger.player.damage();
                            game.delay(1);
                            event.finish();
                            'step 3'
                            player.chooseBool('是否发动【志和】，成为此【杀】的唯一目标，然后摸' + get.cnNumber(event.num) + '张牌？').set('choice', true);
                            'step 4'
                            if (event.choice || result.bool) {
                                player.logSkill('radiance_zhihe');
                                player.draw(event.num);
                                trigger.targets = [player];
                            }
                        },
                    },
                    "radiance_huhuo": {
                        enable: 'phaseUse',
                        filterTarget: function(card, player, target) {
                            return player != target;
                        },
                        filterCard: function(card, player) {
                            return get.color(card) == 'black';
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_huhuo_used')) return false;
                            return player.countCards('h', {
                                color: 'black'
                            }) > 0;
                        },
                        position: 'h',
                        check: function(card) {
                            return 6 - get.value(card)
                        },
                        content: function() {
                            'step 0'
                            if (target.countCards('hej') < 1) {
                                target.damage('nocard', 'fire');
                                player.getHistory('custom').push({
                                    radiance_huhuo_1: true
                                });
                                event.goto(4);
                            };
                            'step 1'
                            event.num = 2;
                            target.chooseControl("弃牌", "伤害").set('ai', function() {
                                var target = _status.event.target;
                                var player = _status.event.playerx;

                                if (get.attitude(target, player) > 0 && target.getCards('j') && target.getCards('j').length > 0) return 0;

                                if (player.hasSkillTag('nodamage')) return 1;
                                if (target.countCards('he') < player.hp || target.hp < 2) return 0;

                                var num1 = player.getHistory('custom', function(evt) {
                                    return evt.radiance_huhuo_1 == true;
                                }).length;
                                if (num1 > 0) return 0;
                                if (target.countCards('he', function(card) {
                                        return (get.tag(card, 'recover') || get.value(card, target) > 7);
                                    }) > 0) return 1;
                                return 0;
                            }).set('playerx', player).set('target', target).set('choiceList', [
                                "被" + get.translation(player) + "弃置至多" + get.cnNumber(event.num) + "张牌",
                                "受到" + get.translation(player) + "造成的1点火焰伤害",
                            ]).set('prompt', "狐火：请选择一项：");
                            'step 2'
                            if (result.index == 0) {
                                player.discardPlayerCard(target, 'hej', true, [1, event.num]).set('prompt', "狐火：弃置" + get.translation(target) + "的至多" + get.cnNumber(event.num) + "张牌");
                                player.getHistory('custom').push({
                                    radiance_huhuo_0: true
                                });
                            } else if (result.index == 1) {
                                target.damage('nocard', 'fire');
                                player.getHistory('custom').push({
                                    radiance_huhuo_1: true
                                });
                            };
                            'step 3'
                            if (result.cards && result.cards.length) {
                                var togain = [];
                                var red = true;
                                for (var i = result.cards.length - 1; i >= 0; i--) {
                                    if (get.color(result.cards[i]) == 'black') {
                                        red = false;
                                        if (get.type(result.cards[i]) == 'basic') togain.push(result.cards[i]);
                                    };
                                };
                                if (togain.length == 1 && togain.filterInD('d').length > 0) {
                                    player.gain(togain, 'gain2', 'log');
                                } else if (red) {
                                    target.link(true);
                                };
                            };
                            'step 4'
                            var num0 = player.getHistory('custom', function(evt) {
                                return evt.radiance_huhuo_0 == true;
                            }).length;
                            var num1 = player.getHistory('custom', function(evt) {
                                return evt.radiance_huhuo_1 == true;
                            }).length;
                            if (num0 > 0 && num1 > 0) {
                                player.draw();
                                player.addTempSkill('radiance_huhuo_used', 'phaseUseEnd');
                            };
                        },
                        ai: {
                            result: {
                                target: function(player, target) {
                                    if (target.getCards('j').length > 0) return 10;

                                    var eff = get.damageEffect(target, player, target, 'fire');
                                    if (target.hasSkillTag('nodamage') || target.hasSkillTag('nofire')) return 0;
                                    if (target.hasSkillTag('noe') || target.hasSkillTag('noh') || target.countCards('he') < Math.max(2, Math.min(player.hp, 3))) {
                                        eff = eff * 0.7;
                                    };
                                    return eff;
                                },
                            },
                            order: function() {
                                return 9;
                            },
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                    },
                    "radiance_fenggong": {
                        usable: 1,
                        enable: "phaseUse",
                        content: function() {
                            player.chooseUseTarget({
                                name: 'wugu',
                                radiance_fenggong: true,
                            }, true, false);
                        },
                        ai: {
                            threaten: 1.8,
                            order: function(card, player) {
                                return get.order({
                                    name: 'wugu',
                                }, player) + 0.5;
                            },
                            result: {
                                player: function(player) {
                                    if (player.hasSkill('radiance_fenggong_used')) return player.getUseValue('wugu');
                                    var targets = game.filterPlayer(target => player.canUse({
                                        name: 'wugu',
                                        radiance_fenggong: true,
                                    }, target));
                                    var eff = 0,
                                        count = 0;
                                    for (var i = 0; i < targets.length; i++) {
                                        if (targets[i].hasSkillTag('nofire') || targets[i].hasSkillTag('nodamage')) continue;
                                        if (get.damageEffect(targets[i], player, player, 'fire') > 0) {
                                            eff += get.damageEffect(targets[i], player, player, 'fire');
                                            count++;
                                        };
                                    };
                                    return player.getUseValue('wugu') + eff / (count + 1);
                                },
                            },
                        },
                        group: 'radiance_fenggong_use',
                        subSkill: {
                            use: {
                                trigger: {
                                    player: 'useCardEnd',
                                },
                                filter: function(event, player) {
                                    if (player.hasSkill('radiance_fenggong_used')) return false;
                                    var targets = game.filterPlayer(function(target) {
                                        var history = target.getHistory('gain', function(evt) {
                                            if (evt.cards.length == 0) return false;
                                            if (evt.getParent(2) == event) return true;
                                            if (['gainPlayerCard', 'draw'].contains(evt.getParent().name)) {
                                                if (evt.getParent(3) == event) return true;
                                                return false;
                                            };
                                            if (evt.getParent('arrangeTrigger', true)) return false;
                                            return evt.getParent('useCard', true) == event;
                                        });
                                        return history.length > 0;
                                    });
                                    return targets.length > 0;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var map = {},
                                        map2 = {};
                                    var targets = game.filterPlayer(function(target) {
                                        map2[target.playerid] = target;
                                        var cards = [];
                                        var history = target.getHistory('gain', function(evt) {
                                            if (evt.cards.length == 0) return false;
                                            if (evt.getParent(2) == trigger) {
                                                cards.addArray(evt.cards);
                                            };
                                            if (['gainPlayerCard', 'draw'].contains(evt.getParent().name)) {
                                                if (evt.getParent(3) == trigger) cards.addArray(evt.cards);
                                            };
                                            if (evt.getParent('arrangeTrigger', true)) return false;
                                            return evt.getParent('useCard', true) == trigger;
                                        });
                                        // cards.filter(card => target.getCards('h').contains(card));
                                        if (cards.length) {
                                            map[target.playerid] = cards;
                                        };
                                        return cards.length > 0;
                                    });
                                    event.map = map;
                                    targets.sort(lib.sort.seat);

                                    var table, tr, td;
                                    var dialog = ui.create.dialog("丰弓：可以选择一名获得牌的角色");
                                    table = document.createElement('table');

                                    tr = document.createElement('tr');
                                    td = document.createElement('td');
                                    td.innerHTML = '获得了牌的角色';
                                    tr.appendChild(td);
                                    td = document.createElement('td');
                                    td.innerHTML = '获得的牌';
                                    tr.appendChild(td);
                                    table.appendChild(tr);

                                    for (var i = 0; i < targets.length; i++) {
                                        var id = targets[i].playerid;
                                        if (!map[id]) continue;
                                        tr = document.createElement('tr');
                                        td = document.createElement('td');
                                        td.innerHTML = get.translation(targets[i]);
                                        tr.appendChild(td);

                                        td = document.createElement('td');
                                        td.innerHTML = get.translation(map[id]);
                                        tr.appendChild(td);
                                        table.appendChild(tr);
                                    };
                                    // dialog.add(ui.create.div('.placeholder'));
                                    dialog.content.appendChild(table);

                                    player.chooseTarget([1, 1], dialog, function(card, player, target) {
                                        return Array.isArray(_status.event.getParent().map[target.playerid]);
                                    }).set('ai', function(target) {
                                        var player = _status.event.player;
                                        var cards = _status.event.getParent().map[target.playerid].filter(card => target.getCards('h').contains(card));
                                        var canUse = false,
                                            eff = 0;
                                        for (var i = 0; i < cards.length; i++) {
                                            var card = cards[i];
                                            if (target == player && ['equip', 'delay'].contains(get.type(card))) {
                                                continue;
                                            } else if (player.canUse(card, target, false)) {
                                                canUse = true;
                                                eff = Math.max(eff, get.effect(target, card, player, player));
                                            };
                                        };
                                        if (!canUse) {
                                            var sha = {
                                                name: 'sha',
                                                nature: 'fire',
                                                isCard: null,
                                                cards: cards,
                                            };
                                            if (get.attitude(player, target) <= 0 && player.canUse(sha, target, false)) return get.effect(target, sha, player, player, target.isLinked());
                                            return -1;
                                        };
                                        return eff;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.addTempSkill('radiance_fenggong_used');
                                        event.targets = result.targets.slice(0);
                                        player.logSkill('radiance_fenggong', event.targets);
                                        player.line(event.targets, 'fire');
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    if (event.targets.length == 0) {
                                        event.finish();
                                        return;
                                    };
                                    event.targets.sort(lib.sort.seat);
                                    game.delay(1, 0.2);
                                    var target = event.targets.shift();
                                    event.target = target;
                                    var hs = event.map[target.playerid].filter(card => target.getCards('h').contains(card));
                                    var cards = hs.filter(card => player.canUse(card, target, false));
                                    if (cards.length == 0) {
                                        player.line(target, 'fire');
                                        player.useCard({
                                            name: 'sha',
                                            nature: 'fire',
                                            isCard: null,
                                            cards: hs,
                                        }, hs, false, target);
                                        event.cards = hs;
                                        event.goto(4);
                                    } else if (cards.length == 1) {
                                        event._result = {
                                            bool: true,
                                            links: cards,
                                        };
                                    } else {
                                        player.chooseButton(1, ["选择要对" + get.translation(target) + "使用的牌", cards], true).set('ai', function(button) {
                                            var player = _status.event.player,
                                                target = _result.event.getParent().target,
                                                card = button.link;
                                            return get.effect(target, card, player, player);
                                        });
                                    };
                                    'step 3'
                                    if (result.bool) {
                                        var card = result.links[0];
                                        event.cards = [card];
                                        player.useCard(card, result.links, target, false);
                                    };
                                    'step 4'
                                    var togain = cards.filterInD('od');
                                    if (togain.length) target.gain(togain, 'gain2', 'log');
                                    if (event.targets.length > 0) event.goto(2);
                                },
                            },
                            used: {
                                charlotte: true,
                                locked: true,
                                mark: true,
                                intro: {
                                    content: "丰弓的用牌效果本回合已使用",
                                },
                            },
                        },
                    },
                    "radiance_daoqing": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        filter: function(event, player) {
                            if (player.getHistory('gain', function(evt) {
                                    return evt.cards.length > 0;
                                }).length == 0) return false;
                            var hs = player.getCards('h');
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            var count = 0;
                            for (var i = 0; i < hs.length; i++) {
                                if (suits.remove(get.suit(hs[i], player))) {
                                    count++;
                                };
                            };
                            return suits.length > 0;
                        },
                        content: function() {
                            'step 0'
                            player.showHandcards();
                            'step 1'
                            var hs = player.getCards('h');
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            var count = 0;
                            for (var i = 0; i < hs.length; i++) {
                                if (suits.remove(get.suit(hs[i], player))) {
                                    count++;
                                };
                            };
                            if (suits.length > 1) {
                                suits = suits.randomGets(suits.length - 1);
                            };
                            var togain = [];
                            for (var i = 0; i < suits.length; i++) {
                                var card = get.cardPile(card => card.suit == suits[i]);
                                if (card) togain.push(card);
                            };
                            if (togain.length) player.gain(togain, 'log', 'gain2');
                        },
                    },
                    "radiance_zangying": {
                        trigger: {
                            global: 'dieAfter',
                        },
                        filter: function(event, player) {
                            if (!player.isAlive()) return false;
                            return true;

                            var hs = player.getCards('h');
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            var count = 0;
                            for (var i = 0; i < hs.length; i++) {
                                if (suits.remove(get.suit(hs[i], player))) {
                                    count++;
                                };
                            };
                            if (count > 0 && player.isDamaged()) return true;
                            return suits.length > 0;
                        },
                        check: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.showHandcards();
                            'step 1'
                            var hs = player.getCards('h');
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            var count = 0;
                            for (var i = 0; i < hs.length; i++) {
                                if (suits.remove(get.suit(hs[i], player))) {
                                    count++;
                                };
                            };
                            if (count > 0 && player.isDamaged()) player.recover(count);
                            'step 2'
                            var togain = [];
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            for (var i = 0; i < suits.length; i++) {
                                var card = get.cardPile(card => card.suit == suits[i], 'discardPile');
                                if (card) togain.push(card);
                            };
                            if (togain.length) player.gain(togain, 'log', 'gain2');
                        },
                        group: "radiance_zangying_die",
                        subSkill: {
                            die: {
                                trigger: {
                                    player: 'die',
                                },
                                direct: true,
                                forceDie: true,
                                skillAnimation: true,
                                animationColor: 'fire',
                                content: function() {
                                    'step 0'
                                    player.chooseTarget("是否令一名其他角色也发动“葬樱”？", function(card, player, target) {
                                        return target.isAlive();
                                    }).set('ai', function(target) {
                                        return get.attitude(_status.event.player, target);
                                    }).set('forceDie', true);
                                    'step 1'
                                    if (!result.bool) {
                                        event.finish();
                                        return;
                                    };
                                    var target = result.targets[0];
                                    player.logSkill('radiance_zangying', target);
                                    player.trySkillAnimate('radiance_zangying_die', 'radiance_zangying');
                                    var next = game.createEvent('radiance_zangying', false, {
                                        next: []
                                    });
                                    next.setContent(lib.skill.radiance_zangying.content);
                                    next.player = target;
                                    trigger.after.push(next)
                                },
                            },
                        },
                    },
                    "radiance_feiru": {
                        trigger: {
                            player: 'phaseJieshuBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            if (player.getHistory('useCard', function(evt) {
                                    return get.type(evt.card, player) == 'basic';
                                }).length == 0 && player.hp > 1) {
                                event._result = {
                                    bool: true
                                };
                            } else {
                                player.chooseBool(get.prompt2('radiance_feiru')).set('ai', function(event, player) {
                                    if (player.hp <= 1) return false;
                                    var list = [];
                                    var hs = player.getCards('hs');
                                    for (var i = 0; i < hs.length; i++) {
                                        if (get.type(hs[i], player) == 'basic') list.add(get.name(hs[i], player));
                                    };
                                    return list.length <= 1;
                                });
                            };
                            'step 1'
                            if (!result.bool) {
                                event.finish();
                                return;
                            };
                            player.logSkill('radiance_feiru');
                            player.loseHp(1);
                            'step 2'
                            var togain = [];
                            for (var i = 0; i < 2; i++) {
                                var card = get.cardPile(function(card) {
                                    return get.type(card) == 'basic' && (togain.length < 1 || get.name(card) != get.name(togain[0]));
                                });
                                if (card) togain.push(card);
                            };
                            if (togain.length > 0) player.gain(togain, 'draw');
                        },
                    },
                    "radiance_modao": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                            };
                            list.sort(lib.sort.card);
                            event.list = list;
                            if (list.length == 0) {
                                event.finish();
                                return ui.create.dialog('莫道无可用牌');
                            };
                            var dialog = ui.create.dialog('莫道：视为使用一张非延时类锦囊牌', [event.list, 'vcard']);
                            player.chooseButton(dialog).ai = function(button) {
                                if (['wugu', 'jiedao'].contains(button.link[2])) return 0;
                                if (player.countCards('hs', function(card) {
                                        return get.name(card) != button.link[2] && player.getUseValue(card) > 0 && get.type(card) == 'trick';
                                    }) - player.countCards('hs', button.link[2]) > 1) return 0;
                                return player.getUseValue(button.link[2]);
                            };
                            'step 1'
                            if (result.bool) {
                                player.chooseUseTarget({
                                    name: result.links[0][2]
                                }, false).set('forced', true).set('logSkill', 'radiance_modao');
                                player.addTempSkill('radiance_modao_db', 'phaseUseEnd');
                                player.storage.radiance_modao_db = result.links[0][2];
                            };
                        },
                        subSkill: {
                            db: {
                                mark: true,
                                marktext: "道",
                                intro: {
                                    content: "不能使用除$以外的非延时类锦囊牌"
                                },
                                charlotte: true,
                                mod: {
                                    cardEnabled: function(card, player) {
                                        if (get.type(card, player) == 'trick' && get.name(card, player) != player.storage.radiance_modao_db) return false;
                                    }
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_modao_db;
                                },
                            },
                        },
                    },
                    "radiance_bufo": {
                        trigger: {
                            player: 'damageBegin3',
                        },
                        filter: function(event, player) {
                            return player != _status.currentPhase && !player.hasSkill('radiance_bufo_used') && event.num > 0;
                        },
                        forced: true,
                        content: function() {
                            player.addTempSkill('radiance_bufo_used');
                            trigger.num--;
                        },
                        global: 'radiance_bufo_check',
                        subSkill: {
                            check: {
                                trigger: {
                                    player: 'phaseEnd',
                                },
                                filter: function(event, player) {
                                    return player.getSkills(true, false, false).contains('radiance_bufo') && player.getHistory('useCard', function(evt) {
                                        return get.type(evt.card, player) == 'equip';
                                    }).length == 0;
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                content: function() {
                                    'step 0'
                                    player.addTempSkill('radiance_bufo_used', {
                                        player: 'phaseBegin',
                                    });
                                },
                            },
                            used: {
                                mark: true,
                                marktext: "佛",
                                intro: {
                                    content: "不佛已触发"
                                },
                                charlotte: true,
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) {
                                        if (target.hasSkill('radiance_bufo_used')) return [1, -2, 1, 0];
                                        if (get.attitude(target, player) >= 0 && get.attitude(player, target) >= 0) {
                                            return 0;
                                        } else {
                                            var bs = player.getCards('hs', function(card2) {
                                                return get.name(card, player) != get.name(card2, player) && get.tag(card2, 'damage') && player.canUse(card2, target, true);
                                            });
                                            if (bs.length < 1) return 0;
                                            return [1, 0, 1, -2];
                                        };
                                    };
                                },
                            },
                            reverseEquip: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.getHistory('useCard', function(evt) {
                                        return get.type(evt.card, player) == 'equip';
                                    }).length > 0) return false;
                            },
                        },
                    },

                    // uunion
                    "radiance_caopan": {
                        trigger: {
                            player: 'phaseJieshuBegin'
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget([1, 3], get.prompt2('radiance_caopan'), lib.filter.notMe).set('ai', function(target) {
                                if (get.attitude(player, target) > 0) return get.attitude(player, target) + 1.5;
                                return 1 - get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                event.targets = result.targets;
                                event.targets.sort(lib.sort.seat);
                                event.targets2 = event.targets.slice(0);

                                player.line(event.targets);
                                player.logSkill('radiance_caopan', event.targets);
                                event.count = 0;
                                event.discard = [];
                                event.togain = [];
                                event.num = 0;
                                event.turn = false;
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (event.count < event.targets.length) {
                                event.current = event.targets[event.count];
                                event.current.chooseCard('he', "操盘：选择一张牌，非基本牌弃置，基本牌交给" + get.translation(player) + "，或不选择并令其摸两张牌", function(card) {
                                    return get.name(card, _status.event.player) != 'du';
                                }).set('ai', function(card) {
                                    if (get.attitude(event.current, player) > 0) return 0;
                                    var base = get.type(card) == 'basic' ? 4.5 : 5.5;
                                    return base - get.useful(card);
                                });
                            } else {
                                event.goto(5);
                            };
                            'step 3'
                            if (result.cards && result.cards.length) {
                                var card = result.cards[0];
                                if (get.type(card, event.current) == 'basic') {
                                    event.togain.add(card);
                                } else event.discard.add(card);
                            } else {
                                event.num += 1;
                            }
                            'step 4'
                            event.count++;
                            if (event.count < event.targets.length) event.goto(2);
                            'step 5'
                            var owner;
                            for (var i = 0; i < event.discard.length; i++) {
                                owner = get.owner(event.discard[i]);
                                owner.discard(event.discard[i]);
                                game.delay(0, 0.3);
                            };
                            for (var i = 0; i < event.togain.length; i++) {
                                owner = get.owner(event.togain[i]);
                                owner.give(event.togain[i], player, true);
                                game.delay(0, 0.3);
                            }
                            'step 6'
                            if (event.num > 0) player.draw(event.num * 2);
                            'step 7'
                            if (event.count < -1 && player.isDamaged()) {
                                switch (event.count) {
                                    case event.discard.length: {
                                        player.recover();
                                        break;
                                    }
                                    case event.togain.length: {
                                        player.recover();
                                        break;
                                    }
                                    case event.num: {
                                        player.recover();
                                        break;
                                    }
                                };
                            };
                            'step 8'
                            if (event.togain.length + 2 * event.num >= 3) player.addSkill('radiance_caopan_db');
                        },
                        subSkill: {
                            db: {
                                trigger: {
                                    player: 'phaseBegin',
                                },
                                forced: true,
                                charlotte: true,
                                content: function() {
                                    player.skipList.add('phaseJudge');
                                    player.skipList.add('phaseDraw');
                                    player.removeSkill('radiance_caopan_db');
                                },
                                mark: true,
                                intro: {
                                    content: "跳过下个回合的判定和摸牌阶段"
                                },
                                ai: {
                                    neg: true,
                                    effect: {
                                        target: function(card, player, target, current) {
                                            if (get.type(card) == 'delay') return 0;
                                        },
                                    },
                                },
                            },
                        },
                        action_tag: {
                            overall: 3,
                            draw: 3,
                            discard: 2,
                            negative: 2,
                            turnOver: 1,
                        }
                    },
                    "radiance_tunji": {
                        trigger: {
                            target: 'useCardToTargeted'
                        },
                        frequent: true,
                        filter: function(event, player) {
                            if (event.card.name != 'sha') return false;
                            if (event.player.countCards('e') > player.countCards('e')) {
                                if (player.isEmpty(1)) return true;
                                if (player.isEmpty(2)) return true;
                                if (player.isEmpty(3)) return true;
                                if (player.isEmpty(4)) return true;
                                if (player.isEmpty(5)) return true;
                            };
                            return false;
                        },
                        content: function() {
                            var card = get.cardPile(function(card) {
                                if (get.type(card) != 'equip') return false;
                                if (!player.canEquip(card, false)) return false;
                                return get.subtype(card) == 'equip2';
                            });
                            if (player.getEquip(2)) {
                                card = get.cardPile(function(card) {
                                    if (get.type(card) != 'equip') return false;
                                    if (!player.canEquip(card, false)) return false;
                                    return true;
                                });
                            };
                            if (card) {
                                player.equip(card);
                                game.updateRoundNumber();
                            }
                        },
                        ai: {
                            threaten: 1.6,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (card.name == 'sha' && !player.getEquip(2)) return 0.6;
                                },
                            }
                        },
                    },
                    "radiance_guchui": {
                        unique: true,
                        zhuSkill: true,
                        trigger: {
                            player: 'damageEnd'
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('radiance_guchui') || !player.isIn()) return false;
                            if (event.num < 1) return false;
                            return game.hasPlayer(function(current) {
                                return current != player && current.group == player.group && player.hasZhuSkill('radiance_guchui', current);
                            });
                        },
                        content: function() {
                            'step 0'
                            if (event.current == undefined) event.current = player.next;
                            if (event.current == player) {
                                event.finish();
                            } else if (event.current.group == player.group && player.hasZhuSkill('radiance_guchui', event.current)) {
                                event.current.chooseBool('是否受到1点伤害，令' + get.translation(player) + (player.isTurnedOver() ? "翻回正面" : "回复1点体力")).set('ai', function(event, player) {
                                    var source = event.player;
                                    if (get.attitude(player, source) <= 0) return false;
                                    if (source.isTurnedOver() && player.hp > 2) return true;
                                    if (get.damageEffect(player, player, player) < get.recoverEffect(source, player, player) && source.hp <= player.hp) return true;
                                    if (source.hp < player.hp - 1) return true;
                                    return source.hp <= 1;
                                });
                            }
                            'step 1'
                            if (result.bool) {
                                game.log(event.current, "响应了", 'radiance_guchui');
                                event.current.addExpose(0.5);
                                event.current.damage('nosource', 'nocard');
                            } else {
                                event.current = event.current.next;
                                event.goto(0);
                            }
                            'step 2'
                            event.current.line(player, 'green');
                            if (player.isTurnedOver()) {
                                player.turnOver();
                            } else {
                                player.recover(1, event.current, 'nocard');
                            };
                        },
                    },
                    "radiance_chizi": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        skillAnimation: true,
                        limited: true,
                        animationColor: 'key',
                        intro: {
                            content: 'limited'
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_chizi != 'boolean') player.storage.radiance_chizi = false;
                        },
                        filter: function(event, player) {
                            return (!player.storage.radiance_chizi);
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_chizi');
                            player.addMark('radiance_chizi_af', game.roundNumber);
                            player.addSkill('radiance_chizi_af');
                            'step 1'
                            event.togain = [];
                            event.list = ['basic'];
                            event.list.push(['delay', 'damage', 'gain', 'draw', 'multitarget', 'loseCard'].randomGet());
                            event.list.push(['equip1', 'equip2'].randomGet());
                            event.count = 0;
                            'step 2'
                            if (event.count < event.list.length) {
                                var typex = event.list[event.count];
                                var card = get.cardPile(function(card) {
                                    if (get.type(card) == typex) return true;
                                    if (get.type(card) == 'equip' && get.subtype(card) == typex) return true;
                                    if (get.type(card) == 'trick' && get.tag(card, typex)) return true;
                                    return false;
                                });
                                if (card) {
                                    event.togain.push(card);
                                };
                                event.count++;
                                event.redo();
                            }
                            'step 3'
                            if (event.togain.length == 0) {
                                event.finish();
                                return;
                            };
                            player.gain(event.togain, 'gain2');
                            'step 4'
                            player.addGaintag(event.togain, 'radiance_chizi');
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.hp < 2) return 99;
                                if (player.hp == 2 && player.countCards('h') <= 2) return 20;
                                if (game.roundNumber <= 1) return 0;
                                return 10;
                            },
                            result: {
                                player: function(player) {
                                    if (player.hp <= 2 || player.countCards('h') <= 2) return 10;
                                    if (game.roundNumber >= 4) return 10;
                                    return 0;
                                }
                            },
                        },
                    },
                    "radiance_chizi_af": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        intro: {
                            content: 'mark',
                        },
                        marktext: "资",
                        charlotte: true,
                        forced: true,
                        content: function() {
                            'step 0'
                            event.togain = [];
                            event.list = ['basic', 'trick', 'equip'];
                            event.count = 0;
                            'step 1'
                            if (event.count < event.list.length) {
                                var typex = event.list[event.count];
                                var card = get.cardPile(function(card) {
                                    if (get.type2(card) == typex) return true;
                                    return false;
                                }, 'cardPile');
                                if (card) {
                                    event.togain.push(card);
                                }
                                event.count++;
                                event.redo();
                            };
                            'step 2'
                            // if (player.countMark('radiance_chizi_af') == 0) player.removeSkill('radiance_chizi_af');
                            if (event.togain.length > 0) {
                                player.gain(event.togain, 'gain2');
                                if (event.togain.length == 3) player.removeMark('radiance_chizi_af', 1);
                            } else {
                                event.finish();
                            };
                            'step 3'
                            player.addGaintag(event.togain, 'radiance_chizi');
                        },
                        mod: {
                            ignoredHandcard: function(card, player) {
                                if (card.hasGaintag('radiance_chizi')) {
                                    return true;
                                }
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && card.hasGaintag('radiance_chizi')) return false;
                            },
                        },
                        group: 'radiance_chizi_af_remove',
                        subSkill: {
                            remove: {
                                trigger: {
                                    player: 'phaseJieshuBegin',
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                charlotte: true,
                                content: function() {
                                    player.removeGaintag('radiance_chizi');
                                    if (player.countMark('radiance_chizi_af') == 0) player.removeSkill('radiance_chizi_af');
                                },
                            },
                        },
                    },

                    "radiance_longduan": {
                        trigger: {
                            player: "phaseDrawBegin2",
                        },
                        filter: function(event, player) {
                            if (event.numFixed) return false;
                            return game.hasPlayer(function(current) {
                                return current != player && current.countCards('h');
                            });
                        },
                        check: function(event, player) {
                            var enemies = game.countPlayer(function(current) {
                                if (current.countCards('h') > 0 && current != player && get.attitude(player, current) <= 0) {
                                    return true;
                                }
                                return false;
                            });
                            var friends = game.countPlayer(function(current) {
                                if (current.countCards('h') == 1 && current != player && get.attitude(player, current) > 1) {
                                    return true;
                                }
                                return false;
                            });
                            return enemies * 2 - friends * 0.5 - player.hp >= 2;
                        },
                        content: function() {
                            'step 0'
                            var targets = game.filterPlayer(function(current) {
                                return current != player && current.countCards('h') > 0;
                            });
                            targets.sort(lib.sort.seat);
                            event.targets = targets;
                            event.num = 0;
                            if (!trigger.numFixed) trigger.num = 0;
                            player.line(targets, 'green');
                            'step 1'
                            if (num < event.targets.length) {
                                if (event.targets[num].countCards('h')) {
                                    player.gainPlayerCard(event.targets[num], 'h', true);
                                }
                                event.num++;
                                event.redo();
                            }
                            'step 2'
                            player.chooseToDiscard('h', player.hp, true);
                        },
                        ai: {
                            threaten: 3,
                        },
                    },
                    "radiance_suanjin": {
                        trigger: {
                            player: 'loseAfter',
                            // global: ['equipAfter', 'addJudgeAfter', 'gainAfter'],
                        },
                        forced: true,
                        filter: function(event, player) {
                            return (event.hs.length > 0 && player.countCards('h') == 0) || (event.es.length > 0 && player.countCards('e') == 0);

                            var evt = event.getl(player);
                            return evt && evt.player == player && ((evt.hs && evt.hs.length > 0 && player.countCards('h') == 0) || (evt.es && evt.es.length > 0 && player.countCards('e') == 0));
                        },
                        content: function() {
                            if (player.isDamaged()) {
                                player.recover();
                            } else {
                                player.loseHp();
                            }
                        },
                        ai: {
                            threaten: 0.8,
                            noh: true,
                            noe: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'noh' || tag == 'noe') {
                                    if (!player.isDamaged()) return false;
                                }
                            }
                        }
                    },
                    "radiance_kongyin": {
                        enable: "phaseUse",
                        usable: 2,
                        filter: function(event, player) {
                            return player.countCards('h') > 0 && (!player.hasSkill('radiance_kongyin_u1') || !player.hasSkill('radiance_kongyin_u2'));
                        },
                        filterTarget: function(card, player, target) {
                            return player != target;
                        },
                        filterCard: function(card, player) {
                            var us = ui.selected.cards;
                            var suit = get.suit(card);
                            for (var i = 0; i < us.length; i++) {
                                if (get.suit(us[i]) != suit) return false;
                            }
                            return true;
                        },
                        selectCard: function() {
                            var player = _status.currentPhase;
                            var num1 = 1,
                                num2 = 4;
                            if (player.hasSkill('radiance_kongyin_u1')) num1 = 2;
                            if (player.hasSkill('radiance_kongyin_u2')) num2 = 1;
                            if (num1 > num2) return 99;
                            return [num1, num2];
                        },
                        complexCard: true,
                        position: 'h',
                        discard: false,
                        lose: false,
                        delay: 0,
                        check: function(card) {
                            if (!ui.selected.cards.length) return 5.1 - get.alteredValue(card);
                            var player = _status.currentPhase;
                            if (!player.hasSkill('radiance_kongyin_u1')) return 0;
                            if (ui.selected.cards.length >= 2) return 3.5 - get.alteredValue(card);
                            return 4.5 - get.alteredValue(card);
                        },
                        content: function() {
                            'step 0'
                            event.num = cards.length;
                            if (event.num > 1) {
                                player.addTempSkill('radiance_kongyin_u2', 'phaseUseEnd');
                                player.discard(cards);
                            } else {
                                player.addTempSkill('radiance_kongyin_u1', 'phaseUseEnd');
                                target.gain(cards, player, 'giveAuto');
                            };
                            'step 1'
                            if (event.num > 1) {
                                if (event.num < 4) target.draw(4 - event.num, player);
                                target.turnOver();
                            } else {
                                target.loseHp();
                            }
                        },
                        ai: {
                            order: 3.9,
                            result: {
                                target: function(player, target) {
                                    var cs = ui.selected.cards.length;
                                    if (cs >= 2) {
                                        if (target.hasSkillTag('noturn')) return 0;
                                        if (target.isTurnedOver()) return 10;
                                        return -10;
                                    } else {
                                        if (target.hasSkillTag('maihp')) return 2;
                                        if (target.hp <= 1) return -10;
                                        if (player.needsToDiscard() > 0) return -10;
                                    }
                                    return 0;
                                },
                            },
                        },
                        subSkill: {
                            u1: {
                                charlotte: true,
                            },
                            u2: {
                                charlotte: true,
                            },
                        },
                    },
                    "radiance_chuilian": {
                        trigger: {
                            global: ['damageEnd', 'loseHpEnd'],
                        },
                        frequent: true,
                        init: function(player, skill) {
                            if (typeof lib.watersky.radiance.radiance_chuilian != 'number') lib.watersky.radiance.radiance_chuilian = 0;
                        },
                        filter: function(event, player) {
                            return event.radiance_chuilian && event.num > 0;
                        },
                        content: function() {
                            'step 0'
                            player.draw(1);
                            'step 1'
                            if (trigger.player != player && player.isDamaged() && !player.hasSkill('radiance_chuilian_used')) {
                                player.recover();
                                player.addTempSkill('radiance_chuilian_used', 'roundStart');
                            };
                        },
                        global: ['radiance_chuilian_mark', 'radiance_chuilian_record'],
                        subSkill: {
                            record: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                forced: true,
                                silent: true,
                                firstDo: true,
                                charlotte: true,
                                filter: function(event, player) {
                                    return player == _status.roundStart;
                                },
                                content: function() {
                                    var num = 999;
                                    for (var i = 0; i < game.players.length; i++) {
                                        num = Math.min(num, game.players[i].getDamagedHp());
                                    };
                                    lib.watersky.radiance.radiance_chuilian = num;
                                },
                            },
                            mark: {
                                trigger: {
                                    player: ['damageBefore', 'loseHpBefore'],
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                charlotte: true,
                                filter: function(event, player) {
                                    return event.player.getDamagedHp() <= lib.watersky.radiance.radiance_chuilian && event.num > 0;
                                },
                                content: function() {
                                    trigger.radiance_chuilian = true;
                                },
                            },
                            used: {
                                charlotte: true,
                            },
                        },
                    },
                    "radiance_douyan": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return player.canCompare(target);
                        },
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        locked: false,
                        content: function() {
                            'step 0'
                            player.chooseToCompare(target);
                            'step 1'
                            if (result.bool) {
                                player.chooseControl(['摸牌', '幻形'], function(event, player) {
                                    if (!player.hasSkill('radiance_huanxing')) return 0;
                                    var target = event.target;
                                    var num = player.countCards('hes', function(card) {
                                        return player.canUse(card, target, false) && get.effect(target, card, player, player) >= 0 && player.getUseValue(card) > 0;
                                    });
                                    if (num > 2) return 0;
                                    if (player.needsToDiscard() > 1 || num == 0) return 1;
                                    return 0;
                                }).set('prompt', "斗艳：请选择一项于本阶段内适用").set('choiceList', [
                                    "使用牌指定" + get.translation(target) + "为目标后，摸一张牌",
                                    "可以在不满足装备牌数限制的情况下使用且可用非装备牌转化，但因此使用的牌仅能指定" + get.translation(target) + "为目标",
                                ]);
                            } else {
                                target.addSkill('radiance_douyan_4');
                                target.storage.radiance_douyan_source = player;
                                event.finish();
                            };
                            'step 2'
                            var str = 'radiance_douyan_' + (result.index + 1);
                            player.addTempSkill(str, 'phaseUseEnd');
                            player.storage.radiance_douyan = target;
                        },
                        ai: {
                            order: 15,
                            result: {
                                player: function(player) {
                                    if (player.countCards('h', 'sha') > 0) return 0.6;
                                    var num = player.countCards('h');
                                    if (num > player.hp) return 0;
                                    if (num == 1) return -2;
                                    if (num == 2) return -1;
                                    return -0.7;
                                },
                                target: function(player, target) {
                                    var num = target.countCards('h');
                                    if (num == 1) return -1;
                                    if (num == 2) return -0.7;
                                    return -0.5
                                },
                            },
                            threaten: 1.3
                        },
                    },
                    "radiance_douyan_1": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        mark: true,
                        marktext: "摸",
                        intro: {
                            name: '斗艳',
                            mark: function(dialog, storage, player, skill) {
                                if (player.storage.radiance_douyan) {
                                    dialog.addAuto([player.storage.radiance_douyan]);
                                    return '使用牌指定' + get.translation(player.storage.radiance_douyan) + '为目标后，摸一张牌';
                                }
                            },
                        },
                        filter: function(event, player) {
                            return event.target == player.storage.radiance_douyan;
                        },
                        forced: true,
                        charlotte: true,
                        content: function() {
                            'step 0'
                            player.draw();
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (player.storage.radiance_douyan && player.storage.radiance_douyan == target) {
                                    return true;
                                };
                            },
                        },
                        onremove: function(player, storage) {
                            delete player.storage.radiance_douyan;
                        },
                    },
                    "radiance_douyan_2": {
                        mark: true,
                        marktext: "幻",
                        intro: {
                            name: '斗艳',
                            mark: function(dialog, storage, player, skill) {
                                var target = player.storage.radiance_douyan;
                                return "“幻形”可以在不满足无前置条件的情况下使用且无需使用装备牌转化，但因此使用的牌仅能指定" + get.translation(target) + "为目标";
                            },
                        },
                        charlotte: true,
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (player.storage.radiance_douyan && player.storage.radiance_douyan == target) {
                                    return true;
                                }
                            },
                        },
                        onremove: function(player, storage) {
                            delete player.storage.radiance_douyan;
                        },
                    },
                    "radiance_douyan_3": {
                        mark: true,
                        marktext: "拆",
                        intro: {
                            name: '斗艳',
                            mark: function(dialog, storage, player, skill) {
                                if (player.storage.radiance_douyan) {
                                    dialog.addAuto([player.storage.radiance_douyan]);
                                    return '' + get.translation(player.storage.radiance_douyan) + '的手牌对你可见，你可以将一张手牌当作【过河拆桥】对其使用';
                                }
                            },
                        },
                        charlotte: true,
                        enable: 'chooseToUse',
                        filterCard: function(card) {
                            return true;
                        },
                        position: 'hs',
                        viewAs: {
                            name: 'guohe'
                        },
                        filterTarget: function(card, player, target) {
                            if (!player.storage.radiance_douyan || !player.storage.radiance_douyan.isIn()) return false;
                            return target == player.storage.radiance_douyan;
                        },
                        viewAsFilter: function(player) {
                            if (!player.storage.radiance_douyan || !player.storage.radiance_douyan.isIn()) return false;

                            if (!player.countCards('h')) return false;
                            return true;
                        },
                        prompt: '将一张手牌当作【过河拆桥】使用',
                        check: function(card) {
                            var player = get.owner(card);
                            if (player.hasSkill('radiance_huanxing') && get.type(card) == 'equip') return -1;
                            return 5 - get.value(card);
                        },
                        onremove: function(player, storage) {
                            delete player.storage.radiance_douyan;
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (player.storage.radiance_douyan && player.storage.radiance_douyan == target) {
                                    return true;
                                }
                            },
                        },
                        ai: {
                            viewHandcard: true,
                            skillTagFilter: function(player, tag, arg) { // arg检测可以查看手牌的角色
                                if (player.storage.radiance_douyan != arg) return false;
                            },
                        },
                    },
                    "radiance_douyan_4": {
                        mark: true,
                        marktext: "跳",
                        intro: {
                            name: '斗艳',
                            mark: function(dialog, storage, player, skill) {
                                return "跳过弃牌阶段，但若手牌数超过手牌上限则会被" + get.translation(player.storage.radiance_douyan_source) + "移走装备";
                            },
                        },
                        trigger: {
                            player: ['phaseDiscardBefore']
                        },
                        forced: true,
                        charlotte: true,
                        popup: false,
                        firstDo: true,
                        priority: 40,
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            if (!(player.storage.radiance_douyan_source && player.storage.radiance_douyan_source.isIn()) || player.countCards('h') <= player.getHandcardLimit() || player.countCards('e') == 0) event.goto(3);
                            'step 1'
                            event.decider = player.storage.radiance_douyan_source;
                            event.decider.choosePlayerCard('e', "将" + get.translation(player) + "装备区内的一张牌移动给自己", function(button) {
                                var player = _status.event.player;
                                var targets0 = _status.event.target;
                                var targets1 = _status.event.player;
                                if (get.attitude(player, targets0) < 0 && get.attitude(player, targets1) > 0) {
                                    if (get.subtype(button.link) == 'equip2' && get.effect(targets1, button.link, player, player) > 0) {
                                        return 15 * get.effect(targets1, button.link, player, player);
                                    }
                                    if (get.value(button.link, targets0) > 0 && get.effect(targets1, button.link, player, player) > 0) {
                                        return get.value(button.link, targets0) * get.effect(targets1, button.link, player, player);
                                    }
                                    return get.value(button.link, targets0);
                                } else {
                                    return get.value(button.link, targets0) * (10 - get.value(button.link, targets1));
                                };
                            }, targets[0]).set('target', player).set('filterButton', function(button) {
                                return _status.event.player.isEmpty(get.subtype(button.link));
                            });
                            'step 2'
                            if (result.bool && result.links.length) {
                                var link = result.links[0];
                                player.$give(link, event.decider);
                                event.decider.equip(link);
                                game.delay();
                            };
                            'step 3'
                            player.removeSkill('radiance_douyan_4');
                        },
                        onremove: function(player, skill) {
                            delete player.storage.radiance_douyan_source;
                        },
                    },
                    "radiance_huanxing": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_douyan_2')) return player.countCards('hes') > 0 && player.storage.radiance_douyan.isIn();
                            if (player.countCards('he', {
                                    type: 'equip',
                                }) * 2 >= Math.max(player.countCards('he'), 1)) return true;
                            return false;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                };
                                if (list.length == 0) {
                                    return ui.create.dialog('幻形没有可用牌');
                                }
                                return ui.create.dialog('幻形', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                var evt = _status.event.getParent();
                                if (player.storage.radiance_huanxing && player.storage.radiance_huanxing.contains(button.link[2])) return false;
                                if (player.hasSkill('radiance_douyan_2')) {
                                    if (player.countCards('he', {
                                            type: 'equip',
                                        }) * 2 < Math.max(player.countCards('he'), 1) && !player.canUse(button.link[2], player.storage.radiance_douyan)) return false;
                                };
                                return evt.filterCard({
                                    name: button.link[2]
                                }, player, evt);
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                var name = button.link[2];

                                if (player.countCards('hs', name) > 0) return 0;
                                if (player.countCards('he', {
                                        type: 'equip',
                                    }) * 2 < Math.max(player.countCards('he'), 1)) {
                                    return get.effect(player.storage.radiance_douyan, {
                                        name: name
                                    }, player, player);
                                };
                                var evt = _status.event.getParent('chooseToUse');
                                if (evt && evt.type == 'dying') {
                                    if (evt.dying != player && get.effect(evt.dying, {
                                            name: name
                                        }, player, player) <= 0) return 0;
                                    if (evt.dying == player && name == 'jiu') return 2.1;
                                    return 2;
                                };

                                var effect = player.getUseValue(name);
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        if (player.hasSkill('radiance_douyan_2')) return true;
                                        return get.type(card) == 'equip';
                                    },
                                    filterTarget: function(card, player, target) {
                                        if (!player.canUse(card, target)) return false;
                                        if (get.type(ui.selected.cards[0]) == 'equip') return true;
                                        if (player.countCards('he', {
                                                type: 'equip',
                                            }) * 2 < Math.max(player.countCards('he'), 1)) return target == player.storage.radiance_douyan;
                                        return true;
                                    },
                                    selectCard: 1,
                                    popname: true,
                                    check: function(card) {
                                        return 7.1 - get.value(card);
                                    },
                                    position: 'hes',
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3],
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_huanxing');
                                        if (!player.storage.radiance_huanxing) player.storage.radiance_huanxing = [];
                                        player.storage.radiance_huanxing.add(result.card.name);
                                        var next = game.createEvent('radiance_huanxing_clear', false);
                                        next.player = player;
                                        _status.event.next.remove(next);
                                        var phase = _status.event.getParent('phase', true);
                                        if (phase) phase.after.push(next);
                                        next.setContent(function() {
                                            delete player.storage.radiance_huanxing;
                                        });
                                    },
                                    onrespond: function(result, player) {
                                        player.logSkill('radiance_huanxing');
                                        if (!player.storage.radiance_huanxing) player.storage.radiance_huanxing = [];
                                        player.storage.radiance_huanxing.add(result.card.name);
                                        var next = game.createEvent('radiance_huanxing_clear', false);
                                        next.player = player;
                                        _status.event.next.remove(next);
                                        var phase = _status.event.getParent('phase', true);
                                        if (phase) phase.after.push(next);
                                        next.setContent(function() {
                                            delete player.storage.radiance_huanxing;
                                        });
                                    },
                                }
                            },
                            prompt: function(links, player) {
                                return '将一张装备牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用或打出';
                            }
                        },
                        hiddenCard: function(player, name) {
                            if (player.countCards('he', {
                                    type: 'equip',
                                }) * 2 < Math.max(player.countCards('he'), 1)) return false;
                            return name == 'wuxie';
                        },
                        ai: {
                            save: true,
                            respondSha: true,
                            respondShan: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.storage.radiance_huanxing && !player.hasSkill('radiance_douyan_3')) {
                                    if (tag == 'respondSha' && player.storage.radiance_huanxing.contains('sha')) return false;
                                    if (tag == 'respondShan' && player.storage.radiance_huanxing.contains('shan')) return false;
                                    if (tag == 'save') {
                                        if (player.storage.radiance_huanxing.contains('tao') && (arg != player || player.storage.radiance_huanxing.contains('jiu'))) return false;
                                    };
                                };
                                if (player.countCards('he', {
                                        type: 'equip',
                                    }) * 2 < Math.max(player.countCards('he'), 1)) return false;
                            },
                            order: 10,
                            result: {
                                player: function(player) {
                                    var allshown = true,
                                        players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                }
                            },
                        },
                    },
                    "radiance_huajian": {
                        trigger: {
                            player: 'useCardToPlayered'
                        },
                        logTarget: 'target',
                        check: function(event, player) {
                            return get.attitude(player, event.target) <= 0;
                        },
                        filter: function(event, player) {
                            return get.name(event.card, player) == 'sha' || get.name(event.card, player) == 'juedou';
                        },
                        shaRelated: true,
                        content: function() {
                            'step 0'
                            player.judge();
                            'step 1'
                            var suit = result.suit;
                            trigger.target.showHandcards();
                            event.cards = trigger.target.getCards('h', function(card) {
                                return get.suit(card, trigger.target) == suit;
                            });
                            'step 2'
                            if (cards.length > 0) {
                                player.gain(cards, trigger.target, 'log');
                            } else {
                                player.gain(result.card, 'gain2');
                                var id = trigger.target.playerid;
                                var map = trigger.getParent().customArgs;
                                if (!map[id]) map[id] = {};
                                if (typeof map[id].extraDamage != 'number') {
                                    map[id].extraDamage = 0;
                                }
                                map[id].extraDamage++;
                            };
                        },
                    },
                    "radiance_yueyin": {
                        trigger: {
                            global: ['loseAfter'],
                        },
                        filter: function(event, player) {
                            if (event.type != 'discard') return false;
                            var evt = event.getParent('radiance_yueyin', true);
                            if (evt) return false;

                            var cards = event.cards2 || event.cards;
                            if (!cards) return false;
                            cards = cards.filterInD('d');
                            for (var i = 0; i < cards.length; i++) {
                                if (get.suit(cards[i]) == 'heart' || get.type(cards[i]) == 'equip') return true;
                            };
                            return false;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var cards = trigger.cards2 || trigger.cards;
                            event.cards = cards.filterInD('od');
                            event.cards = event.cards.filter(function(card) {
                                return get.suit(card) == 'heart' || get.type(card) == 'equip';
                            });
                            player.chooseCardTarget({
                                filterCard: function(card, player) {
                                    return lib.filter.cardDiscardable(card, player, _status.event);
                                },
                                filterTarget: function(card, player, target) {
                                    var trigger = _status.event.getTrigger();
                                    return target != trigger.player;
                                },
                                selectCard: 1,
                                position: 'he',
                                ai1: function(card) {
                                    var cards = _status.event.getParent().cards;
                                    return get.value(cards) - get.value(card);
                                },
                                ai2: function(target) {
                                    var att = get.attitude(_status.event.player, target);
                                    var cards = _status.event.getParent().cards;
                                    return (att - 1) * get.value(cards, target);
                                },
                                prompt: "月吟：是否弃置一张牌并令一名角色获得" + get.translation(event.cards) + "？",
                            });
                            'step 1'
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill('radiance_yueyin', event.target);
                                player.discard(result.cards);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            target.gain(event.cards, 'gain2');
                            event.cards.sort(function(a, b) {
                                return target.getUseValue(b) - target.getUseValue(a);
                            });
                            'step 3'
                            if (event.cards.length > 0) {
                                var card = event.cards.shift();
                                if (get.type(card) == 'equip' && event.target.canEquip(card, true)) {
                                    event.target.chooseUseTarget("是否装备" + get.translation(card) + "？", card, false);
                                };
                                event.redo();
                            };
                        },
                    },
                    "radiance_xianzhu": {
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, get.prompt2('radiance_xianzhu'), function(card, player, target) {
                                return true;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                if (get.attitude(player, target) < 1) return 0;
                                var profit = 2;
                                if (target.countCards('h') < 2 && target != player) {
                                    profit += 1;
                                    // if (player.needsToDiscard(profit) > 1) profit -= player.needsToDiscard(profit) / 2;
                                } else {
                                    profit += player.needsToDiscard() / 2;
                                };
                                return profit;
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_xianzhu', target);
                                if (target != player && target.ai.shown > 0) player.addExpose(0.3);
                                player.line(target);
                                target.draw(2, player);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (target.countCards('h') <= 3 && target != player) {
                                player.draw(1);
                            } else {
                                player.addTempSkill('radiance_xianzhu_af');
                            };
                        },
                        subSkill: {
                            af: {
                                locked: true,
                                charlotte: true,
                                mod: {
                                    maxHandcard: function(player, current) {
                                        return current + 2;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_gongqiao": {
                        trigger: {
                            global: 'damageBegin1'
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_gongqiao_used')) return false;
                            if (!event.source || !event.num || !event.notLink()) return false;
                            if (event.source == player) return false;
                            if (!event.card || get.name(event.card) != 'sha') return false;
                            return player.countCards('h') > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseCard(1, 'h', '工巧：是否将一张手牌交给' + get.translation(trigger.source) + '？').set('ai', function(card) {
                                var base = 6;
                                if (get.attitude(player, trigger.source) <= 0) base -= 6;
                                if (get.color(card) == 'red' && player.isDamaged()) base += 3.1;
                                if (get.color(card) == 'red' && !player.isDamaged() && trigger.source.needsToDiscard()) base -= 6;
                                if (get.color(card) == 'black' && get.attitude(player, trigger.player) < 0) base += 1.1;
                                if (get.color(card) == 'black' && get.attitude(player, trigger.player) > 1) base -= 9;

                                return base - get.value(card);
                            });
                            'step 1'
                            if (result.bool && result.cards.length) {
                                var card = result.cards[0];
                                player.logSkill('radiance_gongqiao', trigger.source);
                                player.addTempSkill('radiance_gongqiao_used');
                                if (trigger.source != player) trigger.source.gain(card, 'give', player);
                                if (get.color(card) == 'black') {
                                    trigger.num++;
                                } else {
                                    player.recover();
                                };
                            };
                        },
                        subSkill: {
                            used: {
                                inherit: 'radiance_used',
                            },
                        },
                    },
                    "radiance_lizhan": {
                        init: function(player) {
                            player.storage.radiance_lizhan = 0;
                        },
                        marktext: "历",
                        intro: {
                            content: "下一次触发【历战】时额外展示#张牌",
                        },
                        trigger: {
                            player: 'phaseDrawBegin2'
                        },
                        filter: function(event, player) {
                            return !event.numFixed;
                        },
                        check: function() {
                            return true;
                        },
                        prompt: function(event, player) {
                            return "是否放弃摸牌，改为展示并从牌堆顶的" + get.cnNumber(3 + player.storage.radiance_lizhan) + "张牌中获得牌？";
                        },
                        content: function() {
                            'step 0'
                            trigger.changeToZero();
                            event.num = 3 + player.storage.radiance_lizhan;
                            var cards = get.cards(event.num);
                            game.cardsGotoOrdering(cards);
                            player.showCards(cards, '历战');
                            game.delay(1.2);
                            event.cards = cards;
                            'step 1'
                            event.basic = [];
                            event.trick = [];
                            var val1 = 0,
                                val2 = 0;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (get.type2(event.cards[i]) == 'trick') {
                                    event.trick.push(event.cards[i]);
                                    val2 += get.value(event.cards[i]);
                                } else {
                                    event.basic.push(event.cards[i]);
                                    val1 += get.value(event.cards[i]);
                                }
                            }
                            var str1 = event.basic.length > 0 ? "获得" + get.translation(event.basic) : "没有基本和装备牌可以获得";
                            var str2 = event.trick.length > 0 ? "获得" + get.translation(event.trick) : "没有锦囊牌可以获得";
                            player.chooseControl("基本和装备", "锦囊").set('ai', function() {
                                if (val2 > val1) return "锦囊";
                                return "基本和装备";
                            }).set('choiceList', [str1, str2]);
                            'step 2'
                            if (result.control == "基本和装备") {
                                if (event.basic.length) player.gain(event.basic, 'gain2');
                                event.give = event.trick;
                            } else {
                                if (event.trick.length) player.gain(event.trick, 'gain2');
                                event.give = event.basic;
                            }
                            'step 3'
                            if (event.give.length) {
                                var str = "是否令一名其他角色获得" + get.translation(event.give) + "？";
                                player.chooseTarget(str, lib.filter.notMe).set('ai', function(target) {
                                    var att = get.attitude(player, target);
                                    var val = 0;
                                    for (var i = 0; i < _status.event.cards.length; i++) {
                                        val += get.value(_status.event.cards[i], target);
                                    }
                                    if (val > 0 && att <= 0) return 0;
                                    if (val < 0 && att > 0) return 0;
                                    return val * att;
                                }).set('cards', event.give);
                            } else {
                                event.goto(5);
                            }
                            'step 4'
                            if (result.bool && result.targets.length) {
                                result.targets[0].gain(event.give, player, 'gain2');
                            }
                            'step 5'
                            if (player.storage.radiance_lizhan > 0) {
                                player.storage.radiance_lizhan = 0;
                                player.unmarkSkill('radiance_lizhan');
                            }
                        },
                        group: 'radiance_lizhan_add',
                        subSkill: {
                            add: {
                                trigger: {
                                    global: 'useCardAfter',
                                },
                                filter: function(event, player) {
                                    if (!get.tag(event.card, 'damage')) return false;
                                    if (event.target && event.target == player) return true;
                                    return event.targets && event.targets.contains(player);
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                sub: true,
                                content: function() {
                                    player.storage.radiance_lizhan++;
                                    player.markSkill('radiance_lizhan');
                                },
                            },
                        },
                        action_tag: {
                            overall: 3.5,
                            draw: 1,
                            support: 1,
                            search: 0.5,
                        },
                    },
                    "radiance_nuyong": {
                        locked: true,
                        shaRelated: true,
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') {
                                    var type = [];
                                    player.getHistory('useCard', function(evt) {
                                        type.add(get.type2(evt.card))
                                        return evt.isPhaseUsing();
                                    });
                                    return num + type.length;
                                }
                            },
                            globalFrom: function(from, to, distance) {
                                var type = [];
                                from.getHistory('useCard', function(evt) {
                                    type.add(get.type2(evt.card))
                                    return evt.isPhaseUsing();
                                });
                                return distance - type.length;
                            },
                        },
                        action_tag: {
                            overall: 1,
                            sha_multi: 1,
                        },
                    },
                    "radiance_dangshou": {
                        intro: {
                            content: "出牌阶段开始时摸一张牌，然后要交给党首牌或者弃牌",
                        },
                        trigger: {
                            player: ['phaseZhunbeiBegin', 'equipAfter', 'loseAfter'],
                        },
                        filter: function(event, player) {
                            if (event.name == 'lose') return false; // event.type != 'equip' && event.es.length > 0;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var str = "###党首###令一名角色获得“党”标记";
                            if (player.getHistory('custom', evt => evt.radiance_dangshou).length == 0) str += "，若其没有“党”你摸一张牌";
                            player.chooseTarget(1, str, function(card, player, target) {
                                return true;
                            }).set('ai', function(target) {
                                var profit = 0.5;
                                var player = _status.event.player;
                                if (!target.hasMark('radiance_dangshou') && player.getHistory('custom', evt => evt.radiance_dangshou).length == 0) profit += 1;
                                if (get.attitude(player, target) <= 0 && target.countMark('radiance_dangshou') == 1) profit += 0.5;
                                return Math.max(get.attitude(player, target), 0.1) * profit * Math.sqrt(Math.max(1, target.hp));
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('radiance_dangshou', target);
                                if (target.countMark('radiance_dangshou') == 0 && player.getHistory('custom', evt => evt.radiance_dangshou).length == 0) {
                                    player.getHistory('custom').push({
                                        radiance_dangshou: trigger.name,
                                    });
                                    player.draw();
                                };
                                target.addMark('radiance_dangshou');
                            };
                        },
                        ai: {
                            reverseEquip: true,
                        },
                        global: 'radiance_dangshou_gl',
                        subSkill: {
                            gl: {
                                trigger: {
                                    player: 'phaseUseBegin',
                                },
                                filter: function(event, player) {
                                    return player.hasMark('radiance_dangshou') && game.hasPlayer(target => target.hasSkill('radiance_dangshou'));
                                },
                                forced: true,
                                content: function() {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    var num = player.storage.radiance_dangshou;
                                    player.chooseToDiscard('h', num, "弃" + get.cnNumber(num) + "张手牌，否则要交给“党首”牌并移去“党”").set('ai', function(card) {
                                        var player = _status.event.player;
                                        var num = player.storage.radiance_dangshou;
                                        var targets = game.filterPlayer(target => target.hasSkill('radiance_dangshou'));
                                        if (targets.length == 0) return 0;
                                        for (var i = 0; i < targets.length; i++) {
                                            if (get.attitude(player, targets[i]) > 0) return 0;
                                            if (player.hasCard(function(card) {
                                                    return get.value(card, targets[i], 'raw') < 0;
                                                })) return 0;
                                        };
                                        if (num <= 1) return 4 - get.alteredValue(card);
                                        if (player.hasCard(card2 => get.value(card2, player, 'raw') <= 2)) return 0;
                                        if (player.countCards('h', card2 => get.alteredValue(card2) <= 2) >= num) return 2 - get.alteredValue(card);
                                        if (num > 2) return 0;
                                        return 4 - get.alteredValue(card);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        event.finish();
                                    } else {
                                        if (!game.hasPlayer(target => target.hasSkill('radiance_dangshou')) || player.countCards('he') == 0) {
                                            event.finish();
                                            return;
                                        };
                                        player.chooseCardTarget({
                                            filterCard: true,
                                            filterTarget: function(card, player, target) {
                                                return target.hasSkill('radiance_dangshou');
                                            },
                                            selectCard: 1,
                                            position: 'he',
                                            forced: true,
                                            ai1: function(card) {
                                                var player = _status.event.player;
                                                var targets = game.filterPlayer(target => target.hasSkill('radiance_dangshou'));
                                                if (targets.length == 0) return 0;
                                                var base = 5;
                                                for (var i = 0; i < targets.length; i++) {
                                                    if (base > 5) break;
                                                    if (get.attitude(player, targets[i]) > 0) {
                                                        if (player.group == targets[i].group && targets[i].hasZhuSkill('radiance_xuancheng', player) && get.type(card, targets[i]) == 'equip') base += 3;
                                                        if (get.alteredValue(card, player) < get.alteredValue(card, targets[i])) base += get.alteredValue(card, targets[i]) - get.alteredValue(card, player);
                                                    } else {
                                                        if (get.value(card, targets[i], 'raw') <= 1) base += 10;
                                                    };
                                                };
                                                return base - get.value(card, player, 'raw');
                                            },
                                            ai2: function(target) {
                                                var att = get.attitude(_status.event.player, target);
                                                var card = ui.selected.cards[0];
                                                return get.alteredValue(card, target) * att;
                                            },
                                            prompt: "将一张手牌交给“党首”并移去“党”",
                                        });
                                    };
                                    'step 3'
                                    if (result.bool) {
                                        event.card = result.cards[0];
                                        event.target = result.targets[0];
                                        player.storage.radiance_dangshou = 0;
                                        player.unmarkSkill('radiance_dangshou');
                                        if (event.target == player) {
                                            event.finish();
                                        } else player.give(result.cards, event.target, false);
                                        if (player.group != event.target.group || !event.target.hasZhuSkill('radiance_xuancheng', player)) event.finish();
                                    } else {
                                        event.finish();
                                    };
                                    'step 4'
                                    if (get.type(card, target) == 'equip' && target.getCards('he').contains(card)) {
                                        target.chooseBool("宣称：是否展示" + get.translation(card) + "并与" + get.translation(player) + "各摸一张牌").set('choice', get.attitude(target, player) > 0);
                                    } else {
                                        event.finish();
                                    };
                                    'step 5'
                                    if (result.bool) {
                                        target.logSkill('radiance_xuancheng', player);
                                        target.showCards([card]);
                                        game.asyncDraw([target, player]);
                                    };
                                },
                                mod: {
                                    maxHandcard: function(player, num) {
                                        if (player.storage._radiance_dangshou_mod !== true && game.hasPlayer(target => target.hasSkill('radiance_dangshou'))) return num + player.countMark('radiance_dangshou');
                                    },
                                },
                            },
                        },
                    },
                    "radiance_xuancheng": {
                        trigger: {
                            global: "gameDrawAfter",
                        },
                        filter: function(event, player, name) {
                            if (!player.hasZhuSkill('radiance_xuancheng', player)) return false;
                            return game.hasPlayer(target => target != player && target.group == player.group && player.hasZhuSkill('radiance_xuancheng', target));
                        },
                        zhuSkill: true,
                        unique: true,
                        direct: true,
                        content: function() {
                            'step 0'
                            var targets = game.filterPlayer(target => target != player && target.group == player.group && player.hasZhuSkill('radiance_xuancheng', target));
                            player.logSkill('radiance_xuancheng', targets);
                            for (var i = 0; i < targets.length; i++) {
                                targets[i].addMark('radiance_dangshou', 1);
                            };
                        },
                    },
                    "radiance_qiangyi": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        filter: function(event, player) {
                            return game.hasPlayer(function(target) {
                                return target.getDiscardableCards(player, 'he').length > 0;
                            });
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, get.prompt2('radiance_qiangyi'), function(card, player, target) {
                                return target.getDiscardableCards(player, 'he').length > 0;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                if (att < 0 && target.countCards('h') <= 2 && target.hp <= 2) return 10;
                                if (att > 0 && target.countCards('he', function(card) {
                                        return get.type(card) != 'basic' && get.value(card, target) < 4;
                                    } > 1)) return 5;
                                return -0.5 * att;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_qiangyi', target);
                                target.chooseBool("是否令" + get.translation(player) + "观看并选择弃置你的牌？").set('ai', function(event, player) {
                                    return get.attitude(player, event.player) > 0;
                                });
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                event.bool = true;
                            };
                            'step 3'
                            var next = player.discardPlayerCard(target, 'he', [1, 2]).set('ai', function(button) {
                                var player = _status.event.player;
                                var target = _status.event.target;
                                var att_cur = get.sgn(get.attitude(player, target));
                                var card = button.link;
                                var val = get.value(card, target);
                                var visible = _status.event.visible || player.hasSkillTag('viewHandcard', null, target, true);
                                if (visible || get.position(card) == 'e') {
                                    if (val < 4 && get.type(card) != 'basic') return att_cur * 5;
                                    if (val > 4 || get.type(card) == 'basic') return -att_cur * val * 1.5;
                                };
                                return -att_cur * get.buttonValue(button) * 5;
                            }).set('target', target);
                            if (event.bool) next.set('visible', true);
                            'step 4'
                            if (result.bool) {
                                var num = result.cards.length;
                                if (event.bool) num = 2;
                                var togain = 0;
                                for (var i = 0; i < result.cards.length; i++) {
                                    if (get.type(result.cards[i]) != 'basic') togain += num;
                                };
                                if (togain > 0) target.draw(togain, player);
                            };
                        },
                        ai: {
                            expose: 0.1,
                        },
                    },
                    "radiance_yuli": {
                        trigger: {
                            global: 'loseAfter',
                        },
                        filter: function(event, player) {
                            if (!event.player.isIn()) return false;
                            if (player.storage.radiance_yuli && player.storage.radiance_yuli.contains(event.player)) return false;
                            if (event.hs.length > 0 && event.player.countCards('h') == 0) return true;
                            if (event.cards2.length > 1) return true;
                            // if (event.es.length > 0 && event.player.countCards('e') == 0) return true;
                            return false;
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            if (!player.storage.radiance_yuli) player.storage.radiance_yuli = [];
                            player.storage.radiance_yuli.push(trigger.player);
                            player.draw(1);
                        },
                        global: 'radiance_yuli_clear',
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                filter: function(event, player) {
                                    return player.storage.radiance_yuli;
                                },
                                forced: true,
                                silent: true,
                                charlotte: true,
                                content: function() {
                                    delete player.storage.radiance_yuli;
                                },
                            },
                        },
                    },

                    "radiance_mingke": {
                        enable: 'chooseToUse',
                        usable: 1,
                        filter: function(event, player) {
                            if (!player.storage.radiance_mingke || player.storage.radiance_mingke.length == 0) return false;
                            return event.type == 'phase' && player.countCards('hs') > 0;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                var history = player.storage.radiance_mingke;

                                for (var i = 0; i < history.length; i++) {
                                    var name = history[i];
                                    var nature;
                                    if (name.indexOf('sha') == 0 && name.length > 3) {
                                        nature = name.substring(3);
                                        name = 'sha';
                                    }
                                    var type = get.type(name);
                                    list.add([type, '', name, nature]);
                                }
                                return ui.create.dialog('铭刻', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                var evt = _status.event.getParent();
                                return evt.filterCard({
                                    name: button.link[2]
                                }, player, evt);
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                if (player.countCards('hs', button.link[2]) > 0) return 0;
                                if (button.link[2] == 'wugu') return 0;
                                var effect = player.getUseValue(button.link[2]);
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        return true;
                                    },
                                    selectCard: 1,
                                    popname: true,
                                    check: function(card) {
                                        return get.value(links[0][2]) - get.value(card);
                                    },
                                    position: 'hs',
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3]
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_mingke');
                                    },
                                }
                            },
                            prompt: function(links, player) {
                                return '将一张手牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用';
                            },
                        },
                        ai: {
                            order: 1,
                            result: {
                                player: function(player) {
                                    return 1;
                                    var allshown = true,
                                        players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                }
                            },
                        },
                        global: 'radiance_mingke_record',
                        subSkill: {
                            record: {
                                trigger: {
                                    player: 'useCardBegin',
                                },
                                firstDo: true,
                                charlotte: true,
                                forced: true,
                                silent: true,
                                filter: function(event, player) {
                                    return get.type(event.card) == 'basic' || get.type(event.card) == 'trick';
                                },
                                content: function() {
                                    if (!Array.isArray(player.storage.radiance_mingke)) player.storage.radiance_mingke = [];
                                    var name = get.name(trigger.card, player),
                                        nature = get.nature(trigger.card, player);
                                    if (nature) name = name + nature;
                                    player.storage.radiance_mingke.add(name);
                                },
                            },
                        },
                    },
                    "radiance_kongzhi": {
                        trigger: {
                            player: ['phaseDiscardEnd'],
                        },
                        filter: function(event, player) {
                            return true;
                            var cards = [];
                            event.player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == event && evt.hs) cards.addArray(evt.hs);
                            });
                            return cards.length >= 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var cards = [];
                            trigger.player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == trigger && evt.hs) cards.addArray(evt.hs);
                            });
                            event.count = cards.length + 1;
                            'step 1'
                            var str = "空值：选择一名其他角色，";
                            str += event.count > 0 ? "弃置其一张牌（还可以弃置" + get.cnNumber(event.count) + "张）" : "令其弃置一张牌";
                            player.chooseTarget(str).set('filterTarget', function(card, player, target) {
                                return target != player && target.countCards(_status.event.pos) > 0;
                            }).set('ai', function(target) {
                                var att = get.attitude(player, target);

                                if (att > 1 && target.countCards('j') > 0 && _status.event.pos == 'hej') return 10 * att;
                                return -att / (target.countCards('he') + 0.1);

                            }).set('pos', event.count > 0 ? 'hej' : 'he');
                            'step 2'
                            if (result.bool && result.targets.length) {
                                player.logSkill('radiance_kongzhi', result.targets[0]);
                                if (event.count > 0) {
                                    player.discardPlayerCard(result.targets[0], true, 'hej', 1);
                                } else {
                                    result.targets[0].chooseToDiscard('he', 1, true);
                                    event.finish();
                                }
                            } else {
                                event.finish();
                            }
                            'step 3'
                            event.count -= 1;
                            if (event.count > 0) {
                                event.goto(1);
                            } else {
                                event.finish();
                            };
                        },
                        action_tag: {
                            overall: 1,
                            discard: 1,
                        },
                    },
                    "radiance_fengqi": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, get.prompt2('radiance_fengqi')).set('ai', function(target) {
                                var player = _status.event.player;
                                var att = -get.attitude(player, target);
                                if (att === 0) att = 0.1 * get.threaten(target, player);
                                var num = player.countCards('h', function(card) {
                                    if (!player.canUse(card, target, false)) return false;
                                    return get.type2(card, player) == 'trick';
                                }) + Math.min(player.getCardUsable('sha'), player.countCards('h', function(card) {
                                    if (!player.canUse(card, target, false)) return false;
                                    return get.name(card, player) == 'sha';
                                })) + player.countCards('h', function(card) {
                                    return get.tag(card, 'gain');
                                }) + 1;
                                return att * num;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.addTempSkill('radiance_fengqi_af', 'phaseUseEnd');
                                player.storage.radiance_fengqi = target;
                                player.logSkill('radiance_fengqi', target);
                            };
                        },
                        ai: {
                            expose: 0.1,
                        },
                        subSkill: {
                            af: {
                                mark: true,
                                intro: {
                                    mark: function(dialog, content, player, storage, skill) {
                                        var target = player.storage.radiance_fengqi;
                                        if (!target || !target.isIn()) return "目标角色已死亡";
                                        dialog.addSmall([target]);
                                        if (player.storage.radiance_fengqi_af.length == 0) return "没有可执行的选项";
                                        var str = "以下选项可以执行：" + player.storage.radiance_fengqi_af[0];
                                        for (var i = 1; i < player.storage.radiance_fengqi_af.length; i++) {
                                            str += "、" + player.storage.radiance_fengqi_af[i];
                                        };
                                        return str;
                                    },
                                },
                                init: function(player, skill) {
                                    player.storage.radiance_fengqi_af = ["拿牌", "强命", "增伤", "封技"];
                                },
                                trigger: {
                                    player: 'useCardToPlayered',
                                },
                                filter: function(event, player) {
                                    if (event.target != player.storage.radiance_fengqi) return false;
                                    var list = player.storage.radiance_fengqi_af.slice(0);
                                    if (event.target.countGainableCards(player, 'h') < 1) list.remove("拿牌");
                                    if (get.type(event.card) == 'delay') list.remove("强命");
                                    if (!get.tag(event.card, 'damage')) list.remove("增伤");
                                    return list.length > 0;
                                },
                                direct: true,
                                charlotte: true,
                                content: function() {
                                    'step 0'
                                    var list = player.storage.radiance_fengqi_af.slice(0);
                                    event.target = trigger.target;
                                    if (event.target.countGainableCards(player, 'h') < 1) list.remove("拿牌");
                                    if (get.type(trigger.card) == 'delay') list.remove("强命");
                                    if (!get.tag(trigger.card, 'damage')) list.remove("增伤");
                                    list.push('cancel2');
                                    player.chooseControl(list).set('prompt', "锋骑：是否令" + get.translation(trigger.card) + "对" + get.translation(event.target) + "追加效果？").set('ai', function(event, player) {
                                        var trigger = _status.event.getTrigger();
                                        var target = trigger.target;
                                        var list = _status.event.controls;
                                        var bool = (target.getEquip(2) && get.tag(card, 'damage')) || target.hasActionTag('active_defend', trigger.card, false, skill => lib.skill.radiance_fengqi_db.skillBlocker(skill, target)) || target.hasActionTag('passive_defend', trigger.card, false, skill => lib.skill.radiance_fengqi_db.skillBlocker(skill, target));
                                        if (!get.tag(trigger.card, 'damage')) {
                                            if ((target.countCards('he') > 1 || !get.tag(trigger.card, 'loseCard')) && list.contains("拿牌")) return "拿牌";
                                            if (bool) return "封技";
                                            if (['shunshou'].contains(get.name(trigger.card)) && list.contains("强命") && !player.countCards('h', function(cardx) {
                                                    return get.tag(cardx, 'damage');
                                                })) return "强命";
                                            return 'cancel2';
                                        };
                                        if (bool) return "封技";
                                        var base = 0.5;
                                        if (target.countCards('h') >= 3) base *= 0.3;
                                        if (!target.canRespondTo(trigger, trigger.card)) base *= 2;
                                        if (target.getEquip('baiyin') || target.hasSkillTag('noextra')) base *= 0;
                                        if (Math.random() < base && list.contains("增伤")) return "增伤";
                                        if (player.countCards('h') < 2 && target.countCards('h') < 3 && list.contains("拿牌")) return "拿牌";
                                        if (list.contains("强命")) return "强命";
                                        if (list.contains("拿牌")) return "拿牌";
                                        return 'cancel2';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('radiance_fengqi', target);
                                        if (result.control == "拿牌") {
                                            player.gainPlayerCard(target, 'h', 1, true);
                                        } else if (result.control == "强命") {
                                            trigger.directHit.add(target);
                                            trigger.getParent().nowuxie = true;
                                            if (trigger.getParent().addCount !== false && typeof player.stat[player.stat.length - 1].card[trigger.card.name] == 'number') {
                                                if (player.stat[player.stat.length - 1].card[trigger.card.name] > 0) {
                                                    player.stat[player.stat.length - 1].card[trigger.card.name]--;
                                                    trigger.getParent().addCount = false;
                                                };
                                            };
                                        } else if (result.control == "封技") {
                                            target.addTempSkill('radiance_fengqi_db');
                                        } else {
                                            trigger.getParent().baseDamage = (trigger.getParent().baseDamage || 1) + 1;
                                        };
                                        player.storage.radiance_fengqi_af.remove(result.control);
                                        player.markAuto('radiance_fengqi_af');
                                    };
                                },
                                mod: {
                                    targetInRange: function(card, player, target) {
                                        if (player.storage.radiance_fengqi && player.storage.radiance_fengqi.isIn()) {
                                            if (target == player.storage.radiance_fengqi) return true;
                                        };
                                    },
                                    cardUsableTarget: function(card, player, target) {
                                        if (player.storage.radiance_fengqi && player.storage.radiance_fengqi.isIn()) {
                                            if (target != player.storage.radiance_fengqi && target != player) return false;
                                        };
                                    },
                                    playerEnabled: function(card, player, target) {
                                        if (player.storage.radiance_fengqi && player.storage.radiance_fengqi.isIn()) {
                                            if (target != player.storage.radiance_fengqi && target != player) return false;
                                        };
                                    },
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_fengqi;
                                    delete player.storage.radiance_fengqi_af;
                                },
                                ai: {
                                    unequip_ai: true,
                                    unequip: true,
                                    skillTagFilter: function(player, tag, arg) {
                                        if (player.storage.radiance_fengqi_af && player.storage.radiance_fengqi_af.contains("封技")) return true;
                                        return false;
                                    }
                                },
                            },
                        },
                    },
                    "radiance_fengqi_db": {
                        init: function(player, skill) {
                            player.addSkillBlocker(skill);
                        },
                        onremove: function(player, skill) {
                            player.removeSkillBlocker(skill);
                        },
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte;
                        },
                        mark: true,
                        intro: {
                            content: "所有技能和防具失效",
                        },
                        charlotte: true,
                        debuff: true,
                        ai: {
                            neg: true,
                            unequip2: true,
                        },
                    },
                    "radiance_duomu": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            if (!player.isMaxHandcard()) {
                                player.chooseBool("###是否发动【夺目】###不为手牌最多，可以摸两张牌")
                            } else {
                                event.goto(2);
                            };
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_duomu');
                                player.draw(2);
                                event.logged = true;
                            };
                            'step 2'
                            if (player.isMaxHandcard()) {
                                var next = player.chooseUseTarget("###是否发动【夺目】###为手牌最多，可以视为使用一张无距离限制的【杀】", {
                                    name: 'sha',
                                    isCard: false,
                                }, false, 'nodistance');
                                if (!event.logged) next.logSkill = 'radiance_duomu';
                            };
                        },
                        action_tag: {
                            overall: 2.5,
                            sha_viewAs: 1,
                            draw: 1.5,
                        },
                    },
                    "radiance_shenju": {
                        trigger: {
                            player: 'damageBegin2',
                        },
                        filter: function(event, player) {
                            if (!event.source || event.source.countCards('h') >= player.countCards('h')) return false;
                            return event.num > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var num = player.countCards('h') - trigger.source.countCards('h');
                            player.chooseCardTarget({
                                filterCard: true,
                                filterTarget: function(card, player, target) {
                                    return target != player;
                                },
                                selectCard: num,
                                ai1: function(card) {
                                    var player = _status.event.player;
                                    if (_status.event.du) return -get.value(card, player, 'raw');
                                    return 7 - get.value(card, player, 'raw');
                                },
                                ai2: function(target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.du) return 0.5 - att;
                                    if (att < 0) return 0;
                                    var nh2 = target.countCards('h');
                                    var num = Math.sqrt(1 + nh2);
                                    return att / num;
                                },
                                du: _status.event.player.hasCard(function(card) {
                                    return get.value(card, _status.event.player, 'raw') < 0;
                                }),
                                prompt: "深居：将" + get.cnNumber(num) + "张手牌交给其他角色，然后令伤害-1",
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_shenju', result.targets[0]);
                                player.give(result.cards, result.targets[0]);
                                trigger.num--;
                            }
                        },
                        group: 'radiance_shenju_discard',
                        subfrequent: ['discard'],
                        subSkill: {
                            discard: {
                                trigger: {
                                    player: 'phaseDiscardBefore',
                                },
                                filter: function(event, player) {
                                    if (player.getStat('damage')) return true;
                                    return !player.isMaxHandcard();
                                },
                                frequent: true,
                                content: function() {
                                    trigger.cancel();
                                },
                            },
                        },
                        action_tag: {
                            overall: 2,
                            maxHand: 2,
                        },
                    },
                    "radiance_tiancai": {
                        intro: {
                            markcount: function(storage, player) {
                                return 4 - player.getHistory('custom', evt => evt.radiance_tiancai).length;
                            },
                            mark: function(dialog, storage, player, skill) {
                                dialog.addText("本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次");
                                dialog.addText("当前效果：");
                                dialog.addText("使用" + get.translation(player.storage.radiance_tiancai.draw) + "牌时，可以摸一张牌");
                                dialog.addText("使用" + get.translation(player.storage.radiance_tiancai.give) + "牌时，可以令一名其他角色获得之");
                                dialog.addText("使用" + get.translation(player.storage.radiance_tiancai.add) + "牌时，可以为之添加一个目标");
                                dialog.addText("使用" + get.translation(player.storage.radiance_tiancai.discard) + "牌时，可以弃置其中一个目标区域内的一张牌");
                            },
                        },
                        mark: true,
                        marktext: "彩",
                        trigger: {
                            player: 'phaseBegin',
                        },
                        direct: true,
                        init: function(player, skill) {
                            if (!player.storage.radiance_tiancai) player.storage.radiance_tiancai = {
                                draw: 'diamond',
                                give: 'heart',
                                add: 'spade',
                                discard: 'club',
                            };
                        },
                        content: function() {
                            'step 0'
                            var list = ['draw', 'give', 'add', 'discard'];
                            var map = {
                                draw: '摸牌',
                                give: '给牌',
                                add: '目标',
                                discard: '弃牌',
                            };
                            var dialog = ui.create.dialog('添彩：是否更换花色与效果的配对？', 'hidden');
                            dialog.addText("选一个效果，再选择对应的花色（未选择的将会被自动替换）");
                            var table = document.createElement('div');
                            table.classList.add('add-setting');
                            table.style.margin = '0';
                            table.style.width = '100%';
                            table.style.position = 'relative';
                            for (var i = 0; i < list.length; i++) {
                                var current = list[i];
                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                td.innerHTML = '<span>' + map[current] + '</span>';
                                td.link = current;
                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                for (var j in lib.element.button) {
                                    td[j] = lib.element.button[j];
                                }
                                table.appendChild(td);
                                dialog.buttons.add(td);
                            };
                            dialog.content.appendChild(table);
                            // dialog.addText("目标角色");
                            var table2 = document.createElement('div');
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            table2.classList.add('add-setting');
                            table2.style.margin = '0';
                            table2.style.width = '100%';
                            table2.style.position = 'relative';
                            for (var i = 0; i < suits.length; i++) {
                                var current = suits[i];
                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                td.innerHTML = '<span>' + get.translation(current) + '</span>';
                                td.link = current;
                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                for (var j in lib.element.button) {
                                    td[j] = lib.element.button[j];
                                }
                                table.appendChild(td);
                                dialog.buttons.add(td);
                            }
                            dialog.content.appendChild(table2);
                            player.chooseButton(dialog, [2, 8]).set('filterButton', function(button) {
                                var length = ui.selected.buttons.length;
                                var suits = ['spade', 'heart', 'club', 'diamond'];
                                if (length % 2 == 1) return suits.contains(button.link);
                                return !suits.contains(button.link);
                            }).set('ai', function(button) {
                                return -1;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_tiancai');
                                var map = {
                                    draw: '摸一张牌',
                                    give: '交给其他角色此牌',
                                    add: '增加一个目标',
                                    discard: '弃置一个目标区域内的一张牌',
                                };
                                var effect = [];
                                var suits = [];
                                for (var i = 0; i < result.links.length; i++) {
                                    if (map[result.links[i]]) {
                                        effect.push(result.links[i]);
                                    } else {
                                        suits.push(result.links[i]);
                                    }
                                };
                                var num = Math.min(suits.length, effect.length);
                                for (var i = 0; i < num; i++) {
                                    var name = effect[i];
                                    for (var j in player.storage.radiance_tiancai) {
                                        if (player.storage.radiance_tiancai[j] == suits[i]) {
                                            player.storage.radiance_tiancai[j] = player.storage.radiance_tiancai[name];
                                            break;
                                        };
                                    };
                                    player.storage.radiance_tiancai[name] = suits[i];
                                    game.log(player, "切换了", 'radiance_tiancai', "使用", suits[i], "牌时的效果为：", map[effect[i]]);
                                };
                            };
                        },
                        group: ['radiance_tiancai_draw', 'radiance_tiancai_give', 'radiance_tiancai_add', 'radiance_tiancai_discard'],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: 'useCard2',
                                },
                                filter: function(event, player, name) {
                                    if (player.getHistory('custom', evt => evt.radiance_tiancai).length >= 4) return false;
                                    return get.suit(event.card) == player.storage.radiance_tiancai.draw;
                                },
                                prompt2: function(event, player) {
                                    return "当你使用" + get.translation(player.storage.radiance_tiancai.draw) + "牌时，可以摸一张牌（本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次）";
                                },
                                content: function() {
                                    player.getHistory('custom').push({
                                        radiance_tiancai: true,
                                    });
                                    player.markSkill('radiance_tiancai');
                                    player.draw();
                                },
                            },
                            give: {
                                trigger: {
                                    player: 'useCard2',
                                },
                                direct: true,
                                filter: function(event, player, name) {
                                    if (player.getHistory('custom', evt => evt.radiance_tiancai).length >= 4) return false;
                                    if (event.cards.filterInD('od').length < 1) return false;
                                    return get.suit(event.card) == player.storage.radiance_tiancai.give && ['basic', 'trick'].contains(get.type(event.card));
                                },
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("是否发动【添彩】？");
                                    dialog.addText("当你使用" + get.translation(player.storage.radiance_tiancai.give) + "牌时，可以令一名其他角色获得之（本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次）");
                                    dialog.add(trigger.cards.filterInD('od'));
                                    player.chooseTarget(1, dialog, lib.filter.notMe).set('ai', function(target) {
                                        var trigger = _status.event.getTrigger();
                                        if (target.hasSkillTag('nogain')) return 0;
                                        return get.alteredValue(trigger.cards, target) * get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine()) game.delayx();
                                        player.getHistory('custom').push({
                                            radiance_tiancai: true,
                                        });
                                        player.markSkill('radiance_tiancai');
                                        var target = result.targets[0];
                                        player.logSkill('radiance_tiancai', target);
                                        target.gain(trigger.cards.filterInD('od'), 'log', 'gain2');
                                    };
                                },
                            },
                            add: {
                                trigger: {
                                    player: 'useCard2',
                                },
                                direct: true,
                                filter: function(event, player, name) {
                                    if (player.getHistory('custom', evt => evt.radiance_tiancai).length >= 4) return false;
                                    if (!game.hasPlayer(function(target) {
                                            return lib.filter.targetEnabled2(event.card, player, target) && !event.targets.contains(target);
                                        })) {
                                        return false;
                                    };
                                    return get.suit(event.card) == player.storage.radiance_tiancai.add && ['basic', 'trick'].contains(get.type(event.card));
                                },
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("是否发动【添彩】？");
                                    dialog.addText("当你使用" + get.translation(player.storage.radiance_tiancai.add) + "牌时，可以为之添加一个目标（本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次）");
                                    // dialog.add([trigger.card]);
                                    player.chooseTarget(dialog, function(card, player, target) {
                                        var trigger = _status.event.getTrigger();
                                        if (trigger.targets.contains(target)) return false;
                                        return lib.filter.targetEnabled2(trigger.card, trigger.player, target);
                                    }).set('ai', function(target) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        return get.effect(target, trigger.card, trigger.player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine()) game.delayx();
                                        player.getHistory('custom').push({
                                            radiance_tiancai: true,
                                        });
                                        player.markSkill('radiance_tiancai');
                                        var target = result.targets[0];
                                        player.logSkill('radiance_tiancai', target);
                                        trigger.targets.add(target);
                                        game.log(player, "令", target, "成为了", trigger.card, "的额外目标");
                                    };
                                },
                            },
                            discard: {
                                trigger: {
                                    player: 'useCard2',
                                },
                                filter: function(event, player, name) {
                                    if (player.getHistory('custom', evt => evt.radiance_tiancai).length >= 4) return false;
                                    if (!event.targets || event.targets.length == 0) return false;
                                    return get.suit(event.card) == player.storage.radiance_tiancai.discard;
                                },
                                prompt2: function(event, player) {
                                    return "当你使用" + get.translation(player.storage.radiance_tiancai.discard) + "牌时，可以弃置其中一个目标区域内的一张牌（本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次）";
                                },
                                direct: true,
                                check: function(event, player) {
                                    for (var target in event.targets) {
                                        if (get.attitude(player, target) < 0 && target.countDiscardableCards(player, 'he') > 0) return true;
                                        if (get.attitude(player, target) > 1 && target.countDiscardableCards(player, 'j') > 0) return true;
                                    };
                                    return false;
                                },
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("是否发动【添彩】？");
                                    dialog.addText("当你使用" + get.translation(player.storage.radiance_tiancai.discard) + "牌时，可以弃置其中一个目标区域内的一张牌（本回合还剩" + (4 - player.getHistory('custom', evt => evt.radiance_tiancai).length) + "次）");
                                    player.chooseTarget(dialog, 1, function(card, player, target) {
                                        return target.countDiscardableCards(player, 'hej') > 0 && _status.event.getTrigger().targets.contains(target);
                                    }).set('ai', function(target) {
                                        var player = _status.event.player;
                                        if (target.countDiscardableCards(player, 'he') > 0) return -get.attitude(player, target);
                                        if (target.countDiscardableCards(player, 'j') > 0) return 2 * get.attitude(player, target);
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.getHistory('custom').push({
                                            radiance_tiancai: true,
                                        });
                                        player.markSkill('radiance_tiancai');
                                        player.logSkill('radiance_tiancai', target);
                                        player.discardPlayerCard(target, 'hej', 1, true);
                                    };
                                },
                            },
                            sha: {
                                marktext: "彩",
                                intro: {
                                    mark: function(dialog, storage, player, skill) {
                                        dialog.addText("可以额外使用" + get.cnNumber(storage) + "张【杀】，手牌上限+" + storage);
                                    },
                                },
                                init: function(player, skill) {
                                    player.storage.radiance_tiancai_sha = 0;
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_tiancai_sha;
                                },
                                charlotte: true,
                                locked: true,
                                mod: {
                                    cardUsable: function(card, player, num) {
                                        if (card.name == 'sha') return num + player.storage.radiance_tiancai_sha;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_hongse": {
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, content, player) {
                                var cards = player.getExpansions('radiance_hongse');
                                if (cards && cards.length) {
                                    dialog.add(cards);
                                };
                            },
                            onunmark: function(storage, player) {
                                var cards = player.getExpansions('radiance_hongse');
                                if (cards.length) {
                                    player.$throw(cards, 1000);
                                    game.cardsDiscard(cards);
                                    game.log(cards, '被置入了弃牌堆');
                                };
                            },
                        },
                        trigger: {
                            global: ['gameDrawAfter', 'phaseEnd'],
                        },
                        forced: true,
                        filter: function(event, player, name) {
                            // if (player.getExpansions('radiance_hongse') > 3) return false;
                            if (name == 'gameDrawAfter') return true;
                            var players = game.filterPlayer2();
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            for (var i = 0; i < players.length; i++) {
                                var current = players[i];
                                var history = current.getHistory('useCard', function(evt) {
                                    suits.remove(evt.card.suit);
                                    return evt.card.suit != undefined;
                                });
                                if (suits.length == 0) return true;
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            var togain = [],
                                suits = ['spade', 'heart', 'club', 'diamond'];
                            var cards = player.getExpansions('radiance_hongse');
                            for (var i = 0; i < cards.length; i++) {
                                suits.remove(cards[i].suit);
                            };
                            for (var i = 0; i < suits.length; i++) {
                                var card = get.cardPile(function(cardx) {
                                    return suits[i] == cardx.suit;
                                });
                                if (card) {
                                    togain.push(card);
                                };
                            };
                            if (togain.length == 0) {
                                event.finish();
                                return;
                            };
                            player.addToExpansion(togain, 'gain2').gaintag.add('radiance_hongse');
                            'step 1'
                            var cards = player.getExpansions('radiance_hongse');
                            if (!cards.length || !player.countCards('h')) {
                                event.finish();
                                return;
                            };
                            var next = player.chooseToMove('虹色：是否交换“色”和手牌？');
                            next.set('list', [
                                [get.translation(player) + '（你）的“色”', cards],
                                ['手牌区', player.getCards('h')],
                            ]);
                            next.set('filterMove', function(from, to) {
                                return typeof to != 'number';
                            });
                            next.set('processAI', function(list) {
                                var player = _status.event.player,
                                    cards = list[0][1].concat(list[1][1]).sort(function(a, b) {
                                        return get.useful(a) - get.useful(b);
                                    }),
                                    cards2 = cards.splice(0, player.getExpansions('radiance_hongse').length);
                                return [cards2, cards];
                            });
                            'step 2'
                            if (result.bool) {
                                var pushs = result.moved[0],
                                    gains = result.moved[1];
                                pushs.removeArray(player.getExpansions('radiance_hongse'));
                                gains.removeArray(player.getCards('h'));
                                if (!pushs.length || pushs.length != gains.length) return;
                                player.addToExpansion(pushs, player, 'giveAuto').gaintag.add('radiance_hongse');
                                game.log(player, '将', pushs, '作为“色”置于武将牌上');
                                player.gain(gains, 'gain2');
                            }
                        },
                        group: ['radiance_hongse_gain'],
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: 'phaseDrawBegin2'
                                },
                                direct: true,
                                filter: function(event, player) {
                                    return player.getExpansions('radiance_hongse').length > 0 && event.num > 0 && !event.numFixed;
                                },
                                content: function() {
                                    'step 0'
                                    var list = player.getExpansions('radiance_hongse');
                                    player.chooseButton([1, trigger.num], ["少摸任意张牌并获得等量“虹色”牌", list, 'hidden'], function(button) {
                                        var card = button.link;
                                        var player = _status.event.player
                                        return player.getUseValue(card) - 3;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('radiance_hongse');
                                        player.gain(result.links, 'draw', 'log');
                                        trigger.num -= result.links.length;
                                    };
                                },
                            },
                            judge: {
                                trigger: {
                                    global: 'judge'
                                },
                                direct: true,
                                filter: function(event, player) {
                                    return player.getExpansions('radiance_hongse').length && event.player.isAlive();
                                },
                                content: function() {
                                    'step 0'
                                    var list = player.getExpansions('radiance_hongse');
                                    player.chooseButton([get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' + get.translation(trigger.player.judging[0]) +
                                        '，' + get.prompt('radiance_hongse'), list, 'hidden'
                                    ], function(button) {
                                        var card = button.link;
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        var judging = _status.event.judging;
                                        var result = trigger.judge(card) - trigger.judge(judging);
                                        var attitude = get.attitude(player, trigger.player);
                                        return result * attitude;
                                    }).set('judging', trigger.player.judging[0]).set('filterButton', function(button) {
                                        var player = _status.event.player;
                                        var card = button.link;
                                        var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                        if (mod2 != 'unchanged') return mod2;
                                        var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);
                                        if (mod != 'unchanged') return mod;
                                        return true;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        event.forceDie = true;
                                        player.respond(result.links, 'radiance_hongse', 'highlight', 'noOrdering');
                                        result.cards = result.links;
                                        var card = result.cards[0];
                                        event.card = card;
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    if (result.bool) {
                                        if (trigger.player.judging[0].clone) {
                                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                            game.broadcast(function(card) {
                                                if (card.clone) {
                                                    card.clone.classList.remove('thrownhighlight');
                                                }
                                            }, trigger.player.judging[0]);
                                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                        }
                                        game.cardsDiscard(trigger.player.judging[0]);
                                        trigger.player.judging[0] = result.cards[0];
                                        trigger.orderingCards.addArray(result.cards);
                                        game.log(trigger.player, '的判定牌改为', card);
                                        trigger.radiance_hongse_judge = true;
                                        game.delay(2);
                                    }
                                },
                            },
                            judge2: {
                                trigger: {
                                    global: 'judgeEnd'
                                },
                                filter: function(event, player) {
                                    if (event.radiance_hongse_judge) return false;
                                    if (player.getExpansions('radiance_hongse').length >= 7) return false;
                                    return ['c', 'o', 'd'].contains(get.position(event.result.card), true);
                                },
                                prompt2: function(event, player) {
                                    return "是否将" + get.translation(event.result.card) + "加入“虹色”？";
                                },
                                content: function() {
                                    player.addToExpansion(trigger.result.card, 'gain2').gaintag.add('radiance_hongse');
                                },
                            },
                        },
                    },
                    "radiance_huoluan": {
                        enable: 'phaseUse',
                        usable: 2,
                        filter: function(event, player) {
                            var list = player.storage.radiance_huoluan || [];
                            var targets = player.storage.radiance_huoluanx || [];
                            return game.hasPlayer(function(current) {
                                var es = current.getCards('e', function(cardx) {
                                    return !list.contains(get.subtype(cardx));
                                });
                                for (var i = 0; i < es.length; i++) {
                                    if (game.hasPlayer(function(current2) {
                                            if (targets.contains(current2)) return false;
                                            return current != current2 && !current2.isMin() && current2.isEmpty(get.subtype(es[i]));
                                        })) {
                                        return true;
                                    };
                                };
                            });
                        },
                        filterTarget: function(card, player, target) {
                            var list = player.storage.radiance_huoluan || [];
                            if (ui.selected.targets.length) {
                                var targets = player.storage.radiance_huoluanx || [];
                                if (targets.contains(target)) return false;

                                var from = ui.selected.targets[0];
                                var es = from.getCards('e', function(cardx) {
                                    return !list.contains(get.subtype(cardx));
                                });
                                for (var i = 0; i < es.length; i++) {
                                    if (target.isEmpty(get.subtype(es[i]))) return true;
                                };
                                return false;
                            } else {
                                return target.countCards('e', function(cardx) {
                                    return !list.contains(get.subtype(cardx));
                                }) > 0;
                            };
                        },
                        targetprompt: ['失去装备', '获得装备'],
                        selectTarget: 2,
                        multitarget: true,
                        content: function() {
                            'step 0'
                            if (!player.storage.radiance_huoluan) player.storage.radiance_huoluan = [];
                            if (!player.storage.radiance_huoluanx) player.storage.radiance_huoluanx = [];
                            player.storage.radiance_huoluanx.push(targets[1]);
                            player.choosePlayerCard('e', "将" + get.translation(targets[0]) + "装备区内的一张牌移动给" + get.translation(targets[1]), true, function(button) {
                                var player = _status.event.player;
                                var targets0 = _status.event.targets0;
                                var targets1 = _status.event.targets1;
                                if (get.attitude(player, targets0) < 0 && get.attitude(player, targets1) > 0) {
                                    if (get.subtype(button.link) == 'equip2' && get.effect(targets1, button.link, player, player) > 0) {
                                        return 15 * get.effect(targets1, button.link, player, player);
                                    }
                                    if (get.value(button.link, targets0) > 0 && get.effect(targets1, button.link, player, player) > 0) {
                                        return get.value(button.link, targets0) * get.effect(targets1, button.link, player, player);
                                    }
                                    return get.value(button.link, targets0);
                                } else {
                                    return get.value(button.link, targets0) * (10 - get.value(button.link, targets1));
                                };
                            }, targets[0]).set('targets0', targets[0]).set('targets1', targets[1]).set('filterButton', function(button) {
                                return _status.event.targets1.isEmpty(get.subtype(button.link)) && !player.storage.radiance_huoluan.contains(get.subtype(button.link));
                            });
                            'step 1'
                            if (result.bool && result.links.length) {
                                var link = result.links[0];
                                player.storage.radiance_huoluan.add(get.subtype(link));
                                player.addTempSkill('radiance_huoluan_clear', 'phaseUseEnd');
                                targets[0].$give(link, event.targets[1]);
                                targets[1].equip(link);
                                game.delay();
                            };
                            'step 2'
                            if (targets[1] != player) {
                                targets[0].addTempSkill('radiance_noequip2', 'radiance_huoluanEnd');
                                targets[0].useCard({
                                    name: 'sha',
                                    isCard: false
                                }, targets[1], 'noai', false).set('animate', true);
                            };
                            game.delay(0.5);
                        },
                        subSkill: {
                            clear: {
                                charlotte: true,
                                locked: true,
                                onremove: function(player) {
                                    delete player.storage.radiance_huoluanx;
                                    delete player.storage.radiance_huoluan;
                                },
                            },
                        },
                        ai: {
                            order: 8,
                            result: {
                                target: function(player, target) {
                                    var bool1 = false;
                                    var bool2 = false;
                                    var att = get.attitude(player, target);
                                    var list = player.storage.radiance_huoluan || [];

                                    if (ui.selected.targets.length == 0) {
                                        var es = target.getCards('e', function(cardx) {
                                            return !list.contains(get.subtype(cardx));
                                        });
                                        for (var i = 0; i < es.length; i++) {
                                            if (get.value(es[i], target) < 0) bool1 = true;
                                            if (get.value(es[i], target) > 0) bool2 = true;
                                        }
                                        if (bool1 && att > 0) return 4;
                                        return -4;
                                    } else {
                                        if (target == player) return 4;
                                        return get.damageEffect(target, ui.selected.targets[0], target);
                                    }
                                    return 0;
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            gain: 1,
                            damage: 1,
                            in: 1,
                        },
                    },
                    "radiance_zhemian": {
                        trigger: {
                            player: 'damageBegin3',
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_zhemian !== 'boolean') player.storage.radiance_zhemian = false;
                        },
                        filter: function(event, player) {
                            return event.num > 0 && event.source;
                        },
                        frequent: true,
                        zhuanhuanji: true,
                        log: false,
                        content: function() {
                            'step 0'
                            event.sex = function() {
                                return player.storage.radiance_zhemian ? 'female' : 'male';
                            };
                            if (event.sex() == trigger.source.sex) {
                                player.logSkill('radiance_zhemian');
                                player.draw(1);
                                trigger.num--;
                                player.storage.radiance_zhemian = !player.storage.radiance_zhemian;
                                game.log(player, "切换了", 'radiance_zhemian', "的性别选项，当前为", event.sex(), "性");
                                event.finish();
                            } else {
                                player.chooseBool("无法发动“遮面”，是否仍切换性别选项？").set('ai', function() {
                                    var enemy = _status.currentPhase;
                                    if (get.attitude(player, enemy) < 0) {
                                        var cards = enemy.getCards('h');
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.tag(cards[i], 'damage') && enemy.canUse(cards[i], player, true)) {
                                                return true;
                                            }
                                        }
                                    }

                                    var next = enemy.getNext();
                                    while (next && next != player && get.attitude(player, enemy) > 0) {
                                        next = next.getNext();
                                    }
                                    if (next != player && next.sex != event.sex()) return true;

                                    if (game.countPlayer(function(current) {
                                            return current.sex == event.sex() && get.attitude(player, current) < 0;
                                        }) < 1) return true;
                                    return false;
                                });
                            }
                            'step 1'
                            if (result.bool) {
                                player.storage.radiance_zhemian = !player.storage.radiance_zhemian;
                                game.log(player, "切换了", 'radiance_zhemian', "的性别选项，当前为", event.sex(), "性");
                            }
                        },
                        action_tag: {
                            overall: 2.6,
                            damage_prevent: 1,
                            draw: 1,
                        },
                    },
                    "radiance_qugong": {
                        usable: 1,
                        enable: "phaseUse",
                        content: function() {
                            player.chooseUseTarget({
                                name: 'nanman',
                                radiance_qugong: true,
                            }, true, false);
                        },
                        ai: {
                            threaten: 1.8,
                            order: function(card, player) {
                                return get.order({
                                    name: 'nanman',
                                }, player) + 0.5;
                            },
                            result: {
                                player: function(player) {
                                    return player.getUseValue('nanman');
                                },
                            },
                        },
                        group: 'radiance_qugong_reuse',
                        subSkill: {
                            reuse: {
                                trigger: {
                                    player: 'useCardEnd',
                                },
                                filter: function(event, player) {
                                    if (player.hasSkill('radiance_qugong_used')) return false;
                                    var map = {};
                                    var targets = game.filterPlayer(function(target) {
                                        var cards = [];
                                        var history0 = target.getHistory('useCard', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        var history1 = target.getHistory('respond', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        cards.filterInD('d');
                                        if (cards.length > 0) {
                                            map[target.playerid] = cards;
                                            return true;
                                        };
                                        return false;
                                    });
                                    return targets.length > 0;
                                },
                                check: function(event, player) {
                                    var map = {};
                                    var targets = game.filterPlayer(function(target) {
                                        var cards = [];
                                        var history0 = target.getHistory('useCard', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        var history1 = target.getHistory('respond', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        cards.filterInD('d');
                                        if (cards.length > 0) {
                                            map[target.playerid] = cards;
                                            return true;
                                        };
                                        return false;
                                    });
                                    var profit = 0;
                                    var total = [];
                                    for (var i = 0; i < targets.length; i++) {
                                        var target = targets[i];
                                        profit += get.attitude(player, target) * target.getAlteredValue(map[target.playerid]);
                                        total.addArray(map[target.playerid]);
                                    };
                                    if (total.length > 1 && get.recoverEffect(player, player, player) > 0) profit += 3 * get.attitude(player, player);
                                    return profit > 0;
                                },
                                prompt2: function(event, player) {
                                    var targets = game.filterPlayer(function(target) {
                                        var cards = [];
                                        var history0 = target.getHistory('useCard', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        var history1 = target.getHistory('respond', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, event)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == event.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        cards.filterInD('d');
                                        if (cards.length > 0) {
                                            return true;
                                        };
                                        return false;
                                    });
                                    targets.sort(lib.sort.seat);
                                    return "令" + get.translation(targets) + (targets.length > 1 ? "各" : "") + "收回响应此" + get.translation(event.card) + "所用的牌，若合计不少于两张你回复1点体力";
                                },
                                content: function() {
                                    'step 0'
                                    player.addTempSkill('radiance_qugong_used');
                                    event.targets = game.filterPlayer(function(target) {
                                        var cards = [];
                                        var history0 = target.getHistory('useCard', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, trigger)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == trigger.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        var history1 = target.getHistory('respond', function(evt) {
                                            if (!evt.respondTo) return false;
                                            if (!lib.watersky.func.findParent(evt, trigger)) return false;
                                            if (evt.respondTo[0] == player && evt.respondTo[1] == trigger.card) {
                                                cards.addArray(evt.cards);
                                            };
                                            return evt.cards.length > 0;
                                        });
                                        cards.filterInD('d');
                                        if (cards.length > 0) {
                                            return true;
                                        };
                                        return false;
                                    });
                                    event.total = [];
                                    player.line(event.targets, 'water');
                                    'step 1'
                                    target = event.targets.shift();
                                    var cards = [];
                                    var history0 = target.getHistory('useCard', function(evt) {
                                        if (!evt.respondTo) return false;
                                        if (!lib.watersky.func.findParent(evt, trigger)) return false;
                                        if (evt.respondTo[0] == player && evt.respondTo[1] == trigger.card) {
                                            cards.addArray(evt.cards);
                                        };
                                        return evt.cards.length > 0;
                                    });
                                    var history1 = target.getHistory('respond', function(evt) {
                                        if (!evt.respondTo) return false;
                                        if (!lib.watersky.func.findParent(evt, trigger)) return false;
                                        if (evt.respondTo[0] == player && evt.respondTo[1] == trigger.card) {
                                            cards.addArray(evt.cards);
                                        };
                                        return evt.cards.length > 0;
                                    });
                                    cards.filterInD('d');
                                    if (cards.length > 0) {
                                        event.total.addArray(cards);
                                        target.gain(cards, 'gain2', 'log');
                                    };
                                    if (event.targets.length > 0) event.redo();
                                    'step 2'
                                    if (event.total.length > 1 && player.isDamaged()) player.recover('nocard');
                                },
                            },
                            used: {
                                charlotte: true,
                                locked: true,
                                mark: true,
                                intro: {
                                    content: "驱弓的回收效果本回合已使用",
                                },
                            },
                        },
                    },
                    "radiance_keyi": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        filter: function(event, player) {
                            var targets = game.filterPlayer2(function(target) {
                                return target.getHistory('lose', function(evt) {
                                    return evt.cards2.length > 0;
                                }).length > 0;
                            });
                            if (!targets.contains(player)) return false;
                            targets.remove(_status.currentPhase);
                            return targets.length > 0;
                        },
                        frequent: true,
                        content: function() {
                            var num = 0;
                            var targets = game.filterPlayer2(function(target) {
                                if (_status.currentPhase == target) return false;
                                var num2 = 0;
                                target.getHistory('lose', function(evt) {
                                    num2 += evt.cards2.length;
                                });
                                num = Math.max(num, num2);
                                return num2 > 0;
                            });
                            // num = Math.ceil(num / 2);
                            if (num > 3) num = 3;
                            player.draw(num);
                        },
                    },
                    "radiance_huikui": {
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            return player.countMark('radiance_huikui') == 4;
                        },
                        init: function(player, skill) {
                            if (typeof player.storage.radiance_huikui != 'number') player.storage.radiance_huikui = 0;
                            player.markSkill('radiance_huikui');
                        },
                        marktext: "馈",
                        intro: {
                            mark: function(dialog, content, player) {
                                var num = player.countMark('radiance_huikui');
                                if (num < 4) return "还需再使用或打出" + get.cnNumber(4 - num) + "张牌";
                                return "回馈可使用";
                            },
                        },
                        content: function() {
                            player.storage.radiance_huikui = 0;
                            player.markSkill('radiance_huikui');
                            player.draw(2)
                        },
                        ai: {
                            reverseEquip: true,
                            order: 12,
                            result: {
                                player: 1,
                            },
                        },
                        group: 'radiance_huikui_count',
                        subSkill: {
                            count: {
                                trigger: {
                                    player: ['useCardEnd', 'respond']
                                },
                                filter: function(event, player) {
                                    return player.countMark('radiance_huikui') < 4;
                                },
                                silent: true,
                                popup: false,
                                forced: true,
                                content: function() {
                                    player.storage.radiance_huikui++;
                                    player.markSkill('radiance_huikui');
                                },
                            },
                        },
                    },
                    "radiance_cuihua": {
                        enable: 'chooseToUse',
                        unique: true,
                        limited: true,
                        skillAnimation: true,
                        animationColor: 'wood',
                        init: function(player) {
                            player.storage.radiance_cuihua = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.radiance_cuihua) return false;
                            if (typeof player.storage.radiance_huikui != 'number') return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            } else if (event.parent.name == 'phaseUse') {
                                return true;
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_cuihua');
                            var num = player.countMark('radiance_huikui');
                            player.storage.radiance_huikui = 4;
                            player.markSkill('radiance_huikui');
                            if (num == 0) {
                                event.finish();
                            } else if (player.hp < 1) {
                                player.recover(num);
                                event.finish();
                            } else {
                                player.chooseTarget([1, num], "是否再对至多" + get.cnNumber(num) + "名角色各造成1点伤害").set('ai', function(target) {
                                    return get.damageEffect(target, _status.event.player, _status.event.player);
                                });
                            };
                            'step 1'
                            if (result.bool) {
                                event.targets = result.targets.slice(0);
                                event.targets.sort(lib.sort.seat);
                                player.line(event.targets, 'green');
                                game.log(player, "选择了对", event.targets, "造成伤害");
                                player.addExpose(0.3);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (event.targets.length > 0) {
                                var current = event.targets.shift();
                                current.damage(1, player, 'nocard');
                                event.redo();
                            };
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.hp <= 0) return 15;
                                if (game.hasPlayer(current => current.isUnknown(player))) return 0;
                                if (player.countMark('radiance_huikui') == 0) return 0;
                                var targets = game.filterPlayer(target => get.attitude(player, target) < 0 && get.damageEffect(player, target, target) > 0);
                                if (targets.length == player.countMark('radiance_huikui')) return 15;
                                if (player.countCards('hs', card => lib.filter.cardEnabled(card, player) && player.getUseValue(card) > 0) == 0 &&
                                    player.countMark('radiance_huikui') < 4 && player.countMark('radiance_huikui') > 0 && targets.length > 0) return 15;
                                if (player.hp <= 2 && player.countMark('radiance_huikui') < 2) return 0;
                                if (targets.length == player.getEnemies().length && player.countMark('radiance_huikui') > targets.length && player.countMark('radiance_huikui') < 4) return 15;
                                return 0;
                            },
                            skillTagFilter: function(player, tag, target) {
                                if (player != target || player.storage.radiance_cuihua) return false;
                            },
                            save: true,
                            result: {
                                player: function(player) {
                                    if (player.hp <= 0) {
                                        var cards = player.countCards('hs', card => lib.filter.cardSavable(card, player, player));
                                        if (get.recoverEffect(player, player, player) <= 0) return -1;
                                        if (player.countMark('radiance_huikui') > 1) return 10;
                                        if (player.hp + cards.length > 0) return 0;
                                        if (player.countMark('radiance_huikui') == 0) return 0;
                                        return 1;
                                    };
                                    return 10;
                                },
                            },
                            combo: 'radiance_huikui',
                        },
                    },
                    "radiance_yusuo": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return player.countCards('he') > 0 && game.hasPlayer(target => lib.skill.radiance_yusuo.filterTarget(null, player, target));
                        },
                        filterTarget: function(card, player, target) {
                            if (player == target) return false;
                            if (!target.countCards('h')) return false;
                            if (player.hasSkillTag('noCompareSource') || target.hasSkillTag('noCompareTarget')) return false;
                            return true;
                        },
                        filterCard: function() {
                            return true;
                        },
                        selectCard: 1,
                        position: 'he',
                        discard: false,
                        lose: false,
                        delay: false,
                        check: function(card) {
                            var player = _status.event.player;
                            if (get.number(card, player) >= 8 && get.type(card) == 'equip' && game.countPlayer(function(target) {
                                    return !target.isLinked() || target.countCards('e') > 0 && get.attitude(player, target) < 0;
                                }) > 1) return (get.number(card, player) >= 10 ? 6 : 4) - get.alteredValue(card);
                            if (get.number(card, player) >= 10) return 4 - get.alteredValue(card);
                            if (player.isLinked() && player.countCards('e') == 0) return 4 - get.alteredValue(card);
                            return -1;
                        },
                        content: function() {
                            'step 0'
                            event.card = cards[0];
                            var next = player.chooseToCompare(target);
                            if (!next.fixedResult) next.fixedResult = {};
                            next.fixedResult[player.playerid] = event.card;
                            'step 1'
                            event.targetsx = [player, target];
                            event.targetsx.remove(result.winner);
                            if (get.type(card) == 'equip') {
                                player.chooseTarget(1, "是否令一名不为未赢者的其他角色也执行横置并弃置装备？", function(card, player, target) {
                                    return target != player && !_status.event.getParent().targetsx.contains(target);
                                }).set('ai', function(target) {
                                    var base = -2;
                                    if (target.hasSkillTag('nolink')) base++;
                                    if (target.countCards('e') == 0) base++;
                                    return base * get.attitude(_status.event.player, target);
                                });
                            } else {
                                event.goto(3);
                            };
                            'step 2'
                            if (result.bool) {
                                event.targetsx.push(result.targets[0]);
                                event.targetsx.sort(lib.sort.seat);
                                game.log(player, "额外选择了", result.targets[0]);
                                player.line(result.targets[0], 'fire');
                                player.addExpose(0.1);
                            };
                            'step 3'
                            event.current = event.targetsx.shift();
                            event.current.link(true);
                            'step 4'
                            event.current.randomDiscard('e');
                            if (event.targetsx.length > 0) event.goto(3);
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.countCards('he', function(card) {
                                        if (get.alteredValue(card) > 4) return false;
                                        if (get.number(card, player) >= 10) return true;
                                        if (get.number(card, player) >= 8 && get.type(card) == 'equip' && game.countPlayer(function(target) {
                                                return !target.isLinked() || target.countCards('e') > 0 && get.attitude(player, target) < 0;
                                            }) > 1) return true;
                                        return false
                                    }) > 0) {
                                    return 11;
                                };
                                return 0;
                            },
                            result: {
                                player: function(player, target) {
                                    var base = -2;
                                    if (player.countCards('e') == 0) base++;
                                    if (player.isLinked() || player.hasSkillTag('nolink')) base++;
                                    return base;
                                },
                                target: function(player, target) {
                                    var base = -3;
                                    if (target.countCards('e') == 0) base++;
                                    if (target.isLinked() || target.hasSkillTag('nolink')) base++;
                                    if (base == -1) return -0.5;
                                    var hs = target.getCards('h').sort(function(a, b) {
                                        return get.number(b) - get.number(a);
                                    });
                                    if (player.countCards('he', function(card) {
                                            return get.alteredValue(card) < 4 && get.number(card) > get.number(hs[0]);
                                        }) == 0) return -0.5;
                                    return base;
                                },
                            },
                        },
                    },
                    "radiance_xiepo": {
                        trigger: {
                            global: 'linkAfter',
                        },
                        filter: function(event, player) {
                            if (event.player.isLinked()) return false;
                            return true; //event.player.countCards('he') > 0;
                        },
                        check: function(event, player) {
                            return get.attitude(player, event.player) < 0;
                        },
                        logTarget: 'player',
                        locked: false,
                        forced: true,
                        content: function() {
                            'step 0'
                            if (trigger.player.countCards('he') == 0 || trigger.player == player) {
                                var card = get.cardPile(card => get.tag(card, 'natureDamage'), 'cardPile');
                                if (card) player.gain(card, 'draw', 'log');
                                event.finish();
                                return;
                            };
                            trigger.player.chooseCard('he', 1, true, "将一张牌交给" + get.translation(player)).set('ai', function(card) {
                                return 10 - get.alteredValue(card);
                            });
                            'step 1'
                            if (result.bool) {
                                trigger.player.give(result.cards, player, false);
                                // player.addTempSkill('radiance_xiepo_used');
                            };
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (target.isLinked() && target != player) return true;
                            },
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                    },

                    // cchurch
                    "radiance_tuanjie": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return true;
                        },
                        selectTarget: -1,
                        multitarget: true,
                        multiline: true,
                        line: 'metal',
                        content: function() {
                            'step 0'
                            event.targets = get.sort(targets.slice(0), 'seat', player);
                            'step 1'
                            event.target = targets.shift();
                            var target2 = event.target;
                            target2.chooseCardTarget({
                                filterCard: true,
                                filterTarget: function(card, player, target) {
                                    return target != _status.event.target2;
                                },
                                selectCard: 1,
                                ai1: function(card) {
                                    var player = _status.event.target2;
                                    if (_status.event.du) return -get.value(card, player, 'raw');
                                    return 7 - get.value(card, player, 'raw');
                                },
                                ai2: function(target) {
                                    var att = get.attitude(_status.event.target2, target);
                                    if (_status.event.du) return 0.5 - att;
                                    if (att < 0) return 0;
                                    if (target.countCards('h') == 0) return 4 * att / get.distance(target, target2, 'absolute');
                                    var nh2 = target.countCards('h') + target.hp * 1.5;
                                    var num = Math.sqrt(1 + nh2);
                                    return att / num;
                                },
                                du: target2.hasCard(function(card) {
                                    return get.value(card, target2, 'raw') < 0;
                                }),
                                target2: target2,
                                prompt: "将一张手牌交给其他角色，然后摸一张牌",
                            });
                            'step 2'
                            if (result.bool) {
                                target.give(result.cards, result.targets[0]);
                                if (get.attitude(target, result.targets[0]) > 0) target.addExpose(0.05);
                            } else {
                                if (target.hasCard(function(card) {
                                        return get.value(card, target, 'raw') < 6
                                    }, 'h') && get.attitude(target, player) < -1) target.addExpose(0.05);
                            };
                            'step 3'
                            if (result.bool) {
                                target.draw();
                            };
                            if (targets.length > 0) event.goto(1);
                            'step 4'
                            if (player.isMaxHandcard()) {
                                player.chooseTarget(1, "是否令一名角色回复1点体力？", function(card, player, target) {
                                    return target.isDamaged();
                                }).set('ai', function(target) {
                                    return get.recoverEffect(target, _status.event.player, _status.event.player);
                                })
                            } else {
                                event.finish();
                            };
                            'step 5'
                            if (result.bool) {
                                result.targets[0].recover(1, player, 'nocard');
                            };
                        },
                        ai: {
                            order: 3,
                            result: {
                                player: function(player) {
                                    if (get.mode() == 'identity' && _status.mode != 'purple') {
                                        var zhu = get.zhu(player);
                                        if (zhu && zhu.isZhu && player == zhu && zhu.phaseNumber < 2) return 1;
                                    };
                                    var friends = game.countPlayer(function(current) {
                                        return get.attitude(player, current) > 0;
                                    });
                                    var enemies = game.countPlayer(function(current) {
                                        return get.attitude(player, current) < 0;
                                    });
                                    if (friends < 2) return 0;
                                    return friends - enemies + 0.5;
                                },
                            },
                        },
                        action_tag: {
                            overall: 3,
                            gain: 2,
                            draw: 2,
                        }
                    },
                    "radiance_xisheng": {
                        trigger: {
                            player: 'damageEnd'
                        },
                        direct: true,
                        filter: function(event) {
                            return event.num > 0;
                        },
                        content: function() {
                            'step 0'
                            var dialog = ui.create.dialog("牺牲");
                            dialog.add("令" + (trigger.source ? get.translation(trigger.source) + "摸一张牌，" : "") + (trigger.num > 1 ? "至多" : "") + get.cnNumber(trigger.num) + "名角色摸三张牌");
                            player.chooseTarget([1, trigger.num], dialog, function(card, player, target) {
                                var trigger = _status.event.getTrigger();
                                return trigger.source != target;
                            }).set('ai', function(target) {
                                var att = get.attitude(player, target);
                                return att / (target.hp * 1.5 + target.countCards('h') + 0.1);
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                var targets = result.targets.slice(0);
                                targets = get.sortSeat(targets, trigger.source || _status.currentPhase);
                                player.logSkill('radiance_xisheng', targets);

                                if (trigger.source !== undefined && trigger.source.isIn()) {
                                    trigger.source.draw(1, player);
                                }
                                for (var i = 0; i < targets.length; i++) {
                                    targets[i].draw(3, player);
                                }
                            } else {
                                event.finish();
                            }
                            'step 2'
                            game.delay();
                        },
                        ai: {
                            maixie: true,
                            maixie_hp: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'maixie' || tag == 'maixie_hp') {
                                    if (player.hp < 3) return false;
                                }
                            },
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage') && player != target) {
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                        if (!target.hasFriend()) return;
                                        var num = 1;
                                        if (get.attitude(player, target) > 0) {
                                            if (player.needsToDiscard()) {
                                                num = 0.7;
                                            } else {
                                                num = 0.5;
                                            };
                                        };
                                        var base = 2;
                                        if (get.zhu(player) == target) base++;
                                        if (target.hp > base) return [0.6, num * 1.5];
                                        if (target.hp == base) return [1, num * 0.5];
                                    };
                                },
                            },
                        },
                    },
                    "radiance_ganzhao": {
                        unique: true,
                        zhuSkill: true,
                        trigger: {
                            player: 'phaseDiscardBefore'
                        },
                        filter: function(event, player) {
                            if (!player.hasZhuSkill('radiance_ganzhao')) return false;
                            if (player.needsToDiscard() < 1) return false;
                            return game.hasPlayer(function(current) {
                                return current != player && current.group == player.group;
                            });
                        },
                        check: function() {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            if (event.current === undefined) event.current = player.next;
                            if (event.current == player) {
                                event.finish();
                            } else if (event.current.group == player.group && event.current.countCards('h') > 0) {
                                event.current.chooseToDiscard('是否弃置一张手牌令' + get.translation(player) + '的弃牌阶段跳过？').set('ai', function(card) {
                                    if (get.attitude(event.current, player) < 0) return 0;
                                    return 5 - get.value(card);
                                });
                            }
                            'step 1'
                            if (result.bool) {
                                event.current.line(player, 'green');
                                game.log(event.current, "响应了", 'radiance_ganzhao');
                                trigger.cancel();
                                event.current.addExpose(0.5);
                                event.finish();
                            } else {
                                event.current = event.current.getNext();
                                event.goto(0);
                            }
                        },
                    },

                    "radiance_chayi": {
                        trigger: {
                            player: 'phaseDrawBegin1',
                        },
                        filter: function(event, player) {
                            return true; //!event.numFixed;
                        },
                        check: function(event, player) {
                            var friends = game.countPlayer(function(current) {
                                return get.attitude(player, current) > 0;
                            });
                            var enemies = game.countPlayer(function(current) {
                                return get.attitude(player, current) < 0;
                            });
                            var neutral = game.countPlayer(function(current) {
                                return get.attitude(player, current) == 0;
                            });

                            return friends + neutral * 0.6 + enemies * 0.3 + 0.1 >= event.num;
                        },
                        content: function() {
                            'step 0'
                            event.current = player.next;
                            event.suits = [];
                            event.cards = [];
                            'step 1'
                            player.line(event.current, 'green');
                            event.current.draw();
                            var str = "察异：请弃置一张手牌" + (event.suits.length > 0 ? "（当前已有花色：" + get.translation(event.suits) + "）" : "");
                            event.current.chooseToDiscard('h', 1, true).set('ai', function(card) {
                                var att = get.attitude(_status.event.player, player);
                                var base = 7;
                                var suits = _status.event.getParent().suits;

                                if (att > 1 && !suits.contains(get.suit(card))) {
                                    base += 3;
                                }
                                if (att < 0 && suits.contains(get.suit(card))) {
                                    base -= 2;
                                }
                                return base - get.value(card);
                            }).set('prompt', str);
                            'step 2'
                            if (result.cards && result.cards.length) {
                                event.suits.add(get.suit(result.cards[0]));
                                event.cards.add(result.cards[0]);
                            }
                            if (event.current != player) {
                                event.current = event.current.getNext();
                                game.delay(0.5);
                                event.goto(1);
                            }
                            'step 3'
                            if (event.suits.length == 0) {
                                event.finish();
                            } else {
                                var cards = event.cards.filterInD('d');
                                if (cards.length == 0) {
                                    event._result = {
                                        bool: false,
                                    };
                                    return;
                                };
                                var dialog = ui.create.dialog("察异");
                                dialog.add("获得至多" + get.cnNumber(event.suits.length) + "张牌并将此阶段摸牌数改为" + event.suits.length + "减去获得的张数");
                                dialog.add(cards);

                                player.chooseButton(dialog, [1, event.suits.length]).set('ai', function(button) {
                                    var card = button.link;
                                    if (_status.event.bool) return get.value(card) - 1;
                                    var base = 3;
                                    var cardsx = player.getCards('hs');
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        if (get.name(ui.selected.buttons[i].link) == get.name(card)) base++;
                                    };
                                    for (var i = 0; i < cardsx.length; i++) {
                                        if (get.name(cardsx[i]) == get.name(card)) base++;
                                    };
                                    return get.value(card) * 3 / base - 3.5;
                                }).set('bool', trigger.numFixed);
                            };
                            'step 4'
                            if (!trigger.numFixed) {
                                trigger.num = event.suits.length;
                            };
                            if (result.bool) {
                                player.gain(result.links, 'gain2');
                                if (!trigger.numFixed) trigger.num -= result.links.length;
                            };
                        },
                        action_tag: {
                            overall: 1.5,
                            draw: 1,
                            change: 1,
                        },
                    },
                    "radiance_biyou": {
                        trigger: {
                            player: ['useCardAfter', 'respond'],
                        },
                        filter: function(event, player) {
                            if (player == _status.currentPhase) return false;
                            return true;
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, true, get.prompt('radiance_biyou'), get.prompt2('radiance_biyou'), function(card, player, target) {
                                return !target.hasSkill('radiance_wudi');
                            }).set('ai', function(target) {
                                return get.attitude(_status.event.player, target) / Math.max(target.hp, 0.5);
                            });
                            'step 1'
                            if (result.bool) {
                                result.targets[0].addTempSkill('radiance_wudi');
                            };
                        },
                        action_tag: {
                            overall: 3,
                            deterrence: 1,
                            damage_prevent: 1,
                        },
                    },
                    "radiance_huizhao": {
                        trigger: {
                            player: 'phaseZhunbeiBegin'
                        },
                        direct: true,
                        popup: false,
                        content: function() {
                            'step 0'
                            var num = (game.isHonorRadiance === true ? 1 : 2);
                            var str1 = "摸牌阶段令所有角色各摸一张牌，且你本阶段额外摸" + get.cnNumber(num) + "张牌";
                            var str2 = "结束阶段摸" + get.cnNumber(num + 1) + "张牌"
                            player.chooseControl(['选项一', '选项二', 'cancel2'], function(event, player) {
                                if (player.hp <= 1) return 1;
                                var bool1 = true;
                                if (player.skipList.contains('phaseUse') || player.hasJudge('bingliang')) bool1 = false;
                                if (player.needsToDiscard(4) && player.hasJudge('lebu')) bool1 = false;

                                var friends = game.countPlayer(function(current) {
                                    return get.attitude(player, current) > 0;
                                });
                                var enemies = game.countPlayer(function(current) {
                                    return get.attitude(player, current) < 0;
                                });
                                if (friends - enemies < -1) {
                                    bool1 = false;
                                } else if (friends - enemies > 1) {
                                    bool1 = true;
                                }

                                if (bool1) return '选项一';
                                return '选项二';
                            }).set('prompt', get.prompt("radiance_huizhao")).set('choiceList', [
                                str1,
                                str2,
                            ]);
                            'step 1'
                            if (result.control == '选项一') {
                                player.addTempSkill('radiance_huizhao_draw');
                            } else if (result.control == '选项二') {
                                player.addTempSkill('radiance_huizhao_end');
                            }
                        },
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: 'phaseDrawBegin1'
                                },
                                forced: true,
                                charlotte: true,
                                sub: true,
                                content: function() {
                                    'step 0'
                                    var targets = game.filterPlayer();
                                    targets.sort(lib.sort.seat);
                                    event.targets = targets;
                                    event.num = 0;
                                    var num1 = (game.isHonorRadiance ? 1 : 2);
                                    if (!trigger.numFixed) trigger.num += num1;
                                    player.line(targets, 'green');
                                    'step 1'
                                    if (num < event.targets.length) {
                                        event.targets[num].draw();
                                        event.num++;
                                        event.redo();
                                    }
                                },
                            },
                            end: {
                                trigger: {
                                    player: 'phaseJieshuBegin'
                                },
                                forced: true,
                                charlotte: true,
                                sub: true,
                                content: function() {
                                    var num = (game.isHonorRadiance ? 2 : 3);
                                    player.draw(num);
                                },
                            },
                        },
                    },
                    "radiance_zhenjie": {
                        trigger: {
                            target: "useCardToTargeted",
                        },
                        check: function(event, player) {
                            if (get.attitude(player, event.player) > 1) return 0;
                            return get.effect(player, event.card, event.player, player) < 0;
                        },
                        filter: function(event, player) {
                            if (event.targets.length > 1 || player.hasSkill('radiance_zhenjie_used')) return false;
                            return (event.card.name == 'sha' || get.type(event.card) == 'trick') && player.canCompare(event.player);
                        },
                        logTarget: "player",
                        content: function() {
                            'step 0'
                            player.chooseToCompare(trigger.player);
                            'step 1'
                            if (result.bool) {
                                trigger.getParent().excluded.add(player);
                            } else {
                                player.gain(result.target, 'gain2', 'log');
                                if (trigger.cards && trigger.cards.filterInD('od').length) player.gain(trigger.cards.filterInD('od'), 'gain2', 'log');
                                player.addTempSkill('radiance_zhenjie_used', {
                                    player: 'phaseBefore',
                                });
                                player.storage.radiance_zhenjie = _status.currentPhase;
                            };
                        },
                        subSkill: {
                            used: {
                                trigger: {
                                    player: 'damageAfter',
                                },
                                charlotte: true,
                                forced: true,
                                silent: true,
                                filter: function(event, player) {
                                    return _status.currentPhase != player.storage.radiance_zhenjie && event.num > 0;
                                },
                                content: function() {
                                    player.removeSkill('radiance_zhenjie_used');
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_zhenjie;
                                },
                            },
                        },
                    },
                    "radiance_dianlu": {
                        trigger: {
                            global: ['useCard', 'respond'],
                        },
                        filter: function(event, player) {
                            return event.card.name == 'shan' && (get.distance(player, event.player) <= 1 || event.player == player) && player.getHistory('custom', function(evt) {
                                return evt.radiance_dianlu;
                            }).length < Math.max(player.getDamagedHp(), 1);
                        },
                        frequent: true,
                        locked: false,
                        content: function() {
                            player.draw();
                            player.getHistory('custom').push({
                                radiance_dianlu: true,
                            });
                        },
                        mod: {
                            globalFrom: function(from, to, distance) {
                                return distance - Math.max(from.getDamagedHp(), 1);
                            }
                        },
                    },
                    "radiance_dizui": {
                        trigger: {
                            player: 'loseAfter',
                        },
                        filter: function(event, player) {
                            if (player == _status.currentPhase || player.getHistory('custom', function(evt) {
                                    return evt.radiance_dizui;
                                }).length > 0) return false;
                            return event.cards2.length > 0;
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, '选择【涤罪】的目标', function(card, player, target) {
                                return target != player && player.inRange(target) && player.getHistory('custom', function(evt) {
                                    return evt.radiance_dizui == target;
                                }).length == 0;
                            }).set('ai', function(target) {
                                var base = 1;
                                if (target.hasSkillTag('nodamage')) {
                                    base *= 0.8;
                                }
                                if (target.hasSkill('baiban') || target.hasSkill('fengyin') || target.hasSkillTag('forbid_card')) base *= 0.8;
                                return base * -get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool && result.targets.length) {
                                event.target = result.targets[0];
                                player.logSkill('radiance_dizui', event.target);
                                player.line(event.target, 'red');
                                player.getHistory('custom').push({
                                    radiance_dizui: event.target,
                                });
                            } else {
                                event.finish();
                            };
                            'step 2'
                            var evt = event.getParent('dying', true);
                            var next;
                            if (evt) {
                                next = game.createEvent('radiance_dizuix', false, evt.getParent());
                            } else {
                                next = game.createEvent('radiance_dizuix', false);
                            };
                            next.set('player', target);
                            next.set('source', player);
                            next.setContent(lib.skill.radiance_dizui.contentx);
                        },
                        contentx: function() {
                            'step 0'
                            player.chooseToRespond({
                                name: 'shan'
                            }).set('autochoose', lib.filter.autoRespondShan);
                            'step 1'
                            if (!result.bool) {
                                player.damage(1, 'nocard', 'thunder', event.source.isAlive() ? event.source : 'nosource');
                            };
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (player == target) return;
                                    if (_status.currentPhase == target) return 1.5;
                                    if ((get.tag(card, 'loseCard') || get.tag(card, 'damage')) && target.getHistory('custom', function(evt) {
                                            return evt.radiance_dizui;
                                        }).length > 0) return 1.5;
                                    if (!target.hasFriend() && !player.hasUnknown()) return;
                                    if (!game.hasPlayer(function(targetx) {
                                            return get.attitude(player, targetx) < 0 && target.inRange(targetx);
                                        })) return;

                                    if (card.name != 'shuiyanqijunx' && get.tag(card, 'loseCard') && target.countCards('he')) {
                                        return [0.7, 1];
                                    };
                                    if (get.tag(card, 'respondSha') || get.tag(card, 'respondShan')) {
                                        if (get.attitude(player, target) > 0 && card.name == 'juedou') return;
                                        if (get.tag(card, 'damage') && target.hasSkillTag('maixie')) return;
                                        if (target.countCards('h') == 2) return [2, -2];
                                        if (target.countCards('h') <= 1) return 3;
                                        if (get.mode() == 'guozhan') return 0.5;
                                        return [0.7, Math.min((target.countCards('he') - 2) / 4, 0.5)];
                                    };
                                },
                            },
                            threaten: function(viewer, player) {
                                if (player.countCards('h') <= 1) return 3;
                                return 0.8;
                            },
                            nodiscard: true,
                            nolose: true,
                            noe: true,
                            noh: true,
                        },
                    },
                    "radiance_suzheng": {
                        trigger: {
                            global: ['phaseUseBegin'],
                        },
                        init: function(player) {
                            if (!player.storage.radiance_suzheng) player.storage.radiance_suzheng = [];
                        },
                        marktext: "肃",
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, content, player, storage, skill) {
                                if (player.hasSkill('radiance_suzheng_used')) {
                                    dialog.addText("“肃正”不可用");
                                } else {
                                    var cards = player.getExpansions('radiance_suzheng');
                                    if (cards.length) dialog.addAuto(cards);
                                };
                                return "已累计移除过的花色：" + get.translation(player.storage.radiance_suzheng);
                            },
                            onunmark: function(storage, player) {
                                var cards = player.getExpansions('radiance_suzheng');
                                if (cards && cards.length) {
                                    player.$throw(cards, 1000);
                                    game.cardsDiscard(cards);
                                    game.log(cards, '被置入了弃牌堆');
                                };
                            },
                        },
                        onremove: function(player) {
                            var cards = player.getExpansions('radiance_suzheng');
                            if (cards && cards.length) {
                                player.$throw(cards, 1000);
                                game.cardsDiscard(cards);
                                game.log(cards, '被置入了弃牌堆');
                            };
                        },
                        filter: function(event, player) {
                            if (event.player == player) return false;
                            return !player.hasSkill('radiance_suzheng_used');
                        },
                        check: function(event, player) {
                            return get.attitude(player, event.player) < 0 && !event.player.hasSkill('nodamage');
                        },
                        prompt2: function(event, player) {
                            var suits = [];
                            var cards = player.getExpansions('radiance_suzheng');
                            for (var i = 0; i < cards.length; i++) {
                                suits.add(get.suit(cards[i]));
                            };
                            var str = suits.length > 0 ? "将一张花色不为" + get.translation(suits) + "的" : "将一张";
                            return '令' + get.translation(event.player) + str + '手牌置于你的武将牌上';
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            var suits = [];
                            var cards = player.getExpansions('radiance_suzheng');
                            for (var i = 0; i < cards.length; i++) {
                                suits.add(get.suit(cards[i]));
                            }
                            var str = suits.length > 0 ? "将一张花色不为" + get.translation(suits) + "的" : "将一张";
                            str += "手牌置于" + get.translation(player) + "的武将牌上";

                            trigger.player.chooseCard(1, 'h', str, function(card) {
                                return !_status.event.suits.contains(get.suit(card));
                            }).set('ai', function(card) {
                                var player = _status.event.getParent().player;
                                var cards = player.getExpansions('radiance_suzheng');
                                if (trigger.player.hasSkillTag('nodamage')) return 0;
                                if (cards.length > 2 && trigger.player.hp > 2 && _status.event.att > 1) return 0;
                                if (trigger.player.hp < 2) {
                                    return 8.1 - get.value(card)
                                }
                                return 6.1 - get.value(card);
                            }).set('suits', suits).set('att', get.attitude(trigger.player, player));
                            'step 1'
                            if (result.bool && result.cards.length) {
                                player.addToExpansion(result.cards, trigger.player, 'giveAuto').gaintag.add('radiance_suzheng');
                                player.markSkill('radiance_suzheng');
                                game.log(player, '将', result.cards, '置于武将牌上');
                                event.finish();
                            } else {
                                var cards = player.getExpansions('radiance_suzheng');
                                if (cards.length > 0) {
                                    trigger.player.gain(cards, 'giveAuto', 'log', player);
                                    for (var i = 0; i < cards.length; i++) {
                                        player.storage.radiance_suzheng.add(get.suit(cards[i]));
                                    };
                                };
                                player.addTempSkill('radiance_suzheng_used', {
                                    player: 'phaseBefore',
                                });
                            };
                            'step 2'
                            trigger.player.damage(player, 'nocard');
                            trigger.cancel();
                            trigger.skipped = true;
                            trigger.player.getHistory('skipped').add('phaseUse');
                            trigger.player.skipList.add('phaseDiscard');
                        },
                        group: ["radiance_suzheng_reset"],
                        subSkill: {
                            reset: {
                                trigger: {
                                    player: 'phaseZhunbeiBegin'
                                },
                                filter: function(event, player) {
                                    var cards = player.getExpansions('radiance_suzheng');
                                    return cards.length > 0;
                                },
                                prompt2: function(event, player) {
                                    var cards = player.getExpansions('radiance_suzheng');
                                    return (player.storage.radiance_suzheng.length < 4 ? "移去" : "获得") + "所有“肃正”牌？";
                                },
                                check: function(event, player) {
                                    var cards = player.getExpansions('radiance_suzheng');
                                    return cards.length > 1;
                                },
                                content: function() {
                                    'step 0'
                                    var cards = player.getExpansions('radiance_suzheng');
                                    if (player.storage.radiance_suzheng.length < 4) {
                                        for (var i = 0; i < cards.length; i++) {
                                            player.storage.radiance_suzheng.add(get.suit(cards[i]));
                                        };
                                    } else {
                                        player.gain(cards, 'draw2');
                                    };
                                    'step 1'
                                    player.unmarkSkill('radiance_suzheng');
                                },
                            },
                            used: {
                                charlotte: true,
                            },
                        },
                        ai: {
                            expose: 0.3,
                        },
                        action_tag: {
                            overall: 4,
                            damage: 1,
                            discard: 1.5,
                            out: 1,
                        },
                    },
                    "radiance_xinxiang": {
                        trigger: {
                            target: 'useCardToTargeted',
                            player: 'judgeBefore',
                        },
                        filter: function(event, player) {
                            if (event.name == 'judge') return event.getParent().name == 'phaseJudge';
                            return get.type(event.card) == 'trick';
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            event.cards = get.cards(2);
                            game.cardsGotoOrdering(event.cards);
                            'step 1'
                            player.chooseButton(['心象：请选择要获得的牌', event.cards], 1, true).set('ai', function(button) {
                                var card = button.link;
                                var val = get.value(card);
                                var trigger = _status.event.getTrigger();
                                if (trigger.name == 'judge') {
                                    var judge = trigger.judge(card);
                                    if (judge > 0) {
                                        return -10 + val;
                                    };
                                };
                                if (get.tag(trigger.card, 'damage') && ['tao', 'jiu'].contains(card.name)) return 2.5 * val;
                                if (card.name == 'wuxie') return 2 * val;
                                if (get.tag(trigger.card, 'respondShan') && card.name == 'shan') return 1.5 * val;
                                if (get.tag(trigger.card, 'respondSha') && card.name == 'sha') return 1.5 * val;
                                return val;
                            });
                            'step 2'
                            if (result.links && result.links.length) {
                                event.cards.remove(result.links[0]);
                                player.gain(result.links[0], 'draw');
                                event.card = event.cards[0];

                                game.log(player, '将', event.card, '置于牌堆顶');
                                game.broadcastAll(function(player) {
                                    var cardx = ui.create.card();
                                    cardx.classList.add('infohidden');
                                    cardx.classList.add('infoflip');
                                    player.$throw(cardx, 1000, 'nobroadcast');
                                }, player);
                            } else {
                                event.finish();
                            }
                            'step 3'
                            event.card.fix();
                            ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                            game.updateRoundNumber();
                        },
                        action_tag: {
                            overall: 3,
                            draw: 1,
                            active_defend: 1,
                        },
                    },
                    "radiance_haoai": {
                        trigger: {
                            global: 'damageBegin4',
                        },
                        filter: function(event, player) {
                            return event.num > 0 && player.hp >= event.num;
                        },
                        check: function(event, player) {
                            if (get.attitude(player, event.player) < 1) return 0;
                            if (get.mode() == 'identity' && _status.mode != 'purple') {
                                if (['zhong', 'mingzhong'].contains(player.identity) && event.player.identity == 'zhu') return (event.player.hp <= player.hp);
                                if (player.identity == 'fan' && event.player.identity == 'fan') {
                                    if (event.source && event.source.identity == 'fan' && event.num >= (event.player.hasSkillTag('noextra') ? 1 : event.num) && !event.player.canSave(event.player)) return false;
                                    return (event.player.hp <= player.hp);
                                };
                            };
                            return (event.player == player || event.player.hp < player.hp || (event.player.isLinked() && player.isLinked() && event.nature !== undefined));
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            trigger.player.addTempSkill('radiance_wudi');
                            'step 1'
                            player.loseHp(trigger.num);
                            'step 2'
                            trigger.player.draw(trigger.num, player);
                        },
                        ai: {
                            threaten: 2.5,
                        },
                        action_tag: {
                            overall: 4,
                            draw: 1,
                            loseHp_defend: 3,
                            damage_prevent: 1,
                        },
                    },
                    "radiance_kejie": {
                        intro: {
                            content: "手牌上限-#",
                        },
                        trigger: {
                            global: ['gameDrawAfter', 'useCard'],
                        },
                        filter: function(event, player, name) {
                            if (name == 'gameDrawAfter') return true;
                            if (get.type2(event.card) != 'trick') return false;
                            var evt = event.getParent('phaseUse', true);
                            if (!evt) return false;
                            if (evt.radiance_kejie || evt.player != event.player) return false;
                            return true;
                        },
                        forced: true,
                        logTarget: function(event, player) {
                            if (event.name == 'useCard') return event.player;
                            return game.players.slice(0).sort(lib.sort.seat);
                        },
                        logLine: 'metal',
                        content: function() {
                            var targets = game.players.slice(0).sort(lib.sort.seat);
                            if (trigger.name == 'useCard') {
                                targets = [trigger.player];
                                var evt = trigger.getParent('phaseUse');
                                evt.radiance_kejie = true;
                            };
                            for (var i = 0; i < targets.length; i++) {
                                targets[i].addMark('radiance_kejie', 1);
                            };
                        },
                        global: 'radiance_kejie_gl',
                        group: 'radiance_kejie_damage',
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: 'damageBegin4',
                                },
                                filter: function(event, player) {
                                    if (!event.source || !event.source.isAlive() || event.num <= 0 || !event.card || get.type(event.card) != 'trick') return false;
                                    return event.source.countMark('radiance_kejie') > player.countMark('radiance_kejie');
                                },
                                forced: true,
                                content: function() {
                                    trigger.cancel();
                                },
                            },
                        },
                        ai: {
                            threaten: 1.5,
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage') && get.type(card) == 'trick') {
                                        var num = player.countMark('radiance_kejie');
                                        var evt = _status.event.getParent('phaseUse', true);
                                        if (evt) {
                                            if (player == evt.player && !evt.radiance_kejie) num++
                                        };
                                        if (num > target.countMark('radiance_kejie')) return 'zerotarget';
                                    };
                                },
                            },
                            combo: 'radiance_shihui',
                        },
                    },
                    "radiance_kejie_gl": {
                        charlotte: true,
                        mod: {
                            maxHandcard: function(player, current) {
                                if (game.hasPlayer(target => target.hasSkill('radiance_kejie'))) return current - player.countMark('radiance_kejie');
                            },
                        },
                    },
                    "radiance_shihui": {
                        trigger: {
                            global: 'phaseDiscardEnd',
                        },
                        filter: function(event, player) {
                            return event.player.countCards('h') == 0 && event.player.countMark('radiance_kejie') > 0;
                        },
                        forced: true,
                        locked: false,
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            event.num = trigger.player.countMark('radiance_kejie');
                            trigger.player.removeMark('radiance_kejie', event.num);
                            trigger.player.chooseBool("是否令" + get.translation(player) + "使用一张四字锦囊牌？否则其摸" + get.cnNumber(Math.ceil(event.num / 2)) + "张牌，你摸" + get.cnNumber(Math.floor(event.num / 2)) + "张牌").set('ai', function(event, player) {
                                if (get.attitude(player, event.player) > 0 && event.num <= 2) return true;
                                // if (get.attitude(player, event.player) < 0 && event.num > 2) return true;
                                return false;
                            });
                            'step 1'
                            if (result.bool) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (get.type(name) == 'trick' && get.translation(name).length == 4) list.push(['锦囊', '', name]);
                                };
                                if (list.length == 0) {
                                    event.finish();
                                    return ui.create.dialog('无可用牌');
                                };
                                var dialog = ui.create.dialog('视为使用一张四字非延时类锦囊牌', [list, 'vcard']);
                                player.chooseButton(dialog, true).set('ai', function(button) {
                                    var player = _status.event.player;
                                    if (['wugu', 'jiedao'].contains(button.link[2])) return 0;
                                    var effect = player.getUseValue(button.link[2]);
                                    if (effect > 0) return effect;
                                    return 0;
                                }).set('filterButton', function(button) {
                                    return _status.event.player.hasUseTarget({
                                        name: button.link[2],
                                        isCard: true,
                                    }, false);
                                });
                            } else {
                                player.draw(Math.ceil(num / 2));
                                if (num > 1) trigger.player.draw(Math.floor(num / 2));
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                player.chooseUseTarget({
                                    name: result.links[0][2]
                                }, false).set('forced', true);
                            };
                        },
                    },
                    "radiance_zhunjiao": {
                        trigger: {
                            player: 'gainAfter',
                        },
                        init: function(player) {
                            if (!Array.isArray(player.storage.radiance_zhunjiao)) player.storage.radiance_zhunjiao = [];
                        },
                        direct: true,
                        filter: function(event, player) {
                            if (!event.cards) return false;
                            if (event.getParent('radiance_zhunjiao', true)) return false;
                            var cards = event.cards.slice(0);
                            cards.removeArray(player.storage.radiance_zhunjiao);
                            return cards.length > 0
                        },
                        content: function() {
                            'step 0'
                            event.cards = trigger.cards.slice(0);
                            event.cards.removeArray(player.storage.radiance_zhunjiao);
                            'step 1'
                            player.chooseCardTarget({
                                filterCard: function(card) {
                                    return _status.event.getParent().cards.contains(card);
                                },
                                selectCard: 1,
                                filterTarget: function(card, player, target) {
                                    return player != target;
                                },
                                ai1: function(card) {
                                    if (card.name == 'du') return 20;
                                    if (get.type(card) == 'delay') return 20;
                                    if (get.type(card) == 'equip') return 6 - get.alteredValue(card);
                                    return (5 - get.alteredValue(card));
                                },
                                ai2: function(target) {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);
                                    if (ui.selected.cards.length) {
                                        var card = ui.selected.cards[0];
                                        if (get.value(card) < 0) return 1 - att;
                                        if (get.type(card) == 'delay') {
                                            if (!target.hasJudge(card)) return get.effect(target, card, player, player) - att;
                                            return 0;
                                        };
                                        if (get.type(card) == 'equip') {
                                            if (target.isEmpty(get.subtype(card))) return Math.max(get.alteredValue(card, target), 1) * (att - 1);
                                            return 0;
                                        };
                                        return Math.max(get.alteredValue(card, target) - 2, 0) * (att - 1);
                                    };
                                    return att - 3;
                                },
                                cards: event.cards,
                                prompt: '谆教：请选择要置于其他角色区域的牌'
                            });
                            'step 2'
                            if (result.bool) {
                                event.card = result.cards[0];
                                event.target = result.targets[0];
                                var choice = ["手牌区"];
                                if (get.type(event.card) == 'delay' && !event.target.hasJudge(event.card)) choice.push("判定区");
                                if (get.type(event.card) == 'equip' && event.target.isEmpty(get.subtype(event.card))) choice.push("装备区");

                                if (choice.length == 1) {
                                    player.logSkill('radiance_zhunjiao', event.target);
                                    game.log(player, "将一张牌置于了", event.target, "的手牌区");
                                    //player.give(event.card, event.target);
                                    event.target.gain(event.card, player, 'giveAuto');
                                    event.goto(4);
                                } else {
                                    player.chooseControl(choice).set('ai', function() {
                                        var att = get.attitude(player, event.target);

                                        if (choice.contains("判定区") && att < 0) return "判定区";
                                        if (choice.contains("装备区") && att > 0) return "装备区";

                                        return "手牌区";
                                    }).set('prompt', "请选择将" + get.translation(event.card) + "置于" + get.translation(event.target) + "的一个区域内");
                                }
                            } else {
                                event.finish();
                            };
                            'step 3'
                            if (result.control == "手牌区") {
                                player.logSkill('radiance_zhunjiao', event.target);
                                game.log(player, "将一张牌置于了", event.target, "的手牌区");
                                event.target.gain(event.card, player, 'giveAuto');
                            } else if (result.control == "装备区") {
                                player.logSkill('radiance_zhunjiao', event.target);
                                game.log(player, "将", event.card, "置于了", event.target, "的装备区");
                                player.$give(event.card, event.target, true);
                                event.target.equip(event.card);
                            } else if (result.control == "判定区") {
                                player.logSkill('radiance_zhunjiao', event.target);
                                game.log(player, "将", event.card, "置于了", event.target, "的判定区");
                                player.$give(event.card, event.target, true);
                                event.target.addJudge(event.card);
                            }
                            'step 4'
                            event.cards.remove(event.card);
                            player.storage.radiance_zhunjiao.add(event.card);
                            player.addTempSkill('radiance_zhunjiao_clear');
                            if (event.cards.length > 0) {
                                event.goto(1);
                            };
                        },
                        subSkill: {
                            clear: {
                                locked: true,
                                charlotte: true,
                                onremove: function(player) {
                                    player.storage.radiance_zhunjiao = [];
                                },
                            },
                        },
                    },
                    "radiance_shiwei": {
                        trigger: {
                            global: ["discardAfter"],
                        },
                        direct: true,
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_shiwei_used')) return false;
                            if (!event.player.isIn()) return false;
                            var cards = (event.cards2 || event.cards);
                            if (!cards) return false;
                            cards = cards.filterInD('od');
                            var evt = event.getParent();
                            if (evt && evt.player && evt.target && evt.player != evt.target) return false;
                            if (event.notBySelf) return false;
                            return cards.length;
                        },
                        content: function() {
                            'step 0'
                            var cards = trigger.cards2 || trigger.cards;
                            cards = cards.filterInD('od');
                            var chooseButton = player.chooseButton(1, ["拾微：请选择要获得的牌", cards]);
                            chooseButton.set('ai', function(button) {
                                if (_status.event.getParent('phaseDiscard')) return get.value(button.link);
                                return get.value(button.link) - 4;
                            });
                            'step 1'
                            if (result.bool && result.links.length) {
                                player.logSkill('radiance_shiwei');
                                player.gain(result.links[0], 'gain2');
                                player.addTempSkill('radiance_shiwei_used');
                            }
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                        action_tag: {
                            profit: function(player, condition) {
                                return game.countPlayer() / 2;
                            },
                            garbageReuse: function(player, card) {
                                if (player.hasSkill('radiance_shiwei_used')) return false;
                                return true;
                            },
                        },
                    },
                    "radiance_yangzhu": {
                        enable: 'phaseUse',
                        usable: 1,
                        filter: function(event, player) {
                            return game.hasPlayer(function(current) {
                                return current != player && current.countCards('h') > 0;
                            });
                        },
                        filterTargetx: function(player, target, tag) {
                            if (target == player) return false;
                            var num = player.countCards('h');
                            if (player.hasZhuSkill('radiance_youguo', player)) {
                                for (var i = 0; i < game.players.length; i++) {
                                    if (game.players[i] == player) continue;
                                    if (player.hasZhuSkill('radiance_youguo', game.players[i]) && player.group == game.players[i].group) num--;
                                };
                            };
                            if (tag === true) {
                                var hs = player.getCards('h', (card) => card.hasGaintag('radiance_yangzhu'));
                                num -= hs.length;
                            };
                            if (num < 0) num = 0;
                            return target.countCards('h') > num;
                        },
                        content: function() {
                            'step 0'
                            if (player.countCards('h') == 0) {
                                event.goto(2);
                                return;
                            };
                            event.cards = player.getCards('h', (card) => card.hasGaintag('radiance_yangzhu'));
                            var targets = game.filterPlayer(function(target) {
                                return lib.skill.radiance_yangzhu.filterTargetx(player, target, true);
                            }); // 弃置了“祝”后的目标
                            targets.sort(lib.sort.seat);
                            event.targets = targets;
                            var targets2 = game.filterPlayer(function(target) {
                                return lib.skill.radiance_yangzhu.filterTargetx(player, target, false);
                            }); // 不弃置牌的目标
                            targets2.sort(lib.sort.seat);
                            event.targets2 = targets2;
                            var list = ["所有手牌", "所有“祝”", 'cancel2'];
                            var dialog;
                            if (event.cards.length) {
                                dialog = ui.create.dialog("仰祝：可以弃置所有手牌或所有祝（" + get.translation(event.cards) + "）");
                                dialog.add("弃置了“祝”后的目标");
                                if (targets.length > 0) {
                                    dialog.addSmall(targets, true);
                                } else {
                                    dialog.add("无");
                                };
                                dialog.add("不弃置牌的目标");
                                if (targets2.length > 0) {
                                    dialog.addSmall(targets2, true);
                                } else {
                                    dialog.add("无");
                                };
                            } else {
                                list.remove("所有“祝”");
                                dialog = ui.create.dialog("仰祝：可以弃置所有手牌");
                                dialog.add("不弃置牌的目标");
                                if (targets2.length > 0) {
                                    dialog.addSmall(targets2, true);
                                } else {
                                    dialog.add("无");
                                };
                            };
                            player.chooseControl(dialog, list).set('ai', function(event, player) {
                                var val = function(choice) {
                                    var targets, todiscard;
                                    switch (choice) {
                                        case "所有“祝”":
                                            targets = game.filterPlayer(function(target) {
                                                return lib.skill.radiance_yangzhu.filterTargetx(player, target, true);
                                            });
                                            todiscard = player.getCards('h', (card) => card.hasGaintag('radiance_yangzhu'));
                                            break;
                                        case "所有手牌":
                                            targets = game.filterPlayer(function(target) {
                                                return target != player && target.countCards('h') > 0;
                                            });
                                            todiscard = player.getCards('h');
                                            break;
                                        default:
                                            targets = game.filterPlayer(function(target) {
                                                return lib.skill.radiance_yangzhu.filterTargetx(player, target, false);
                                            });
                                            todiscard = [];
                                    };
                                    var profit = 0;
                                    for (var i = 0; i < targets.length; i++) {
                                        var target = targets[i];
                                        if (get.attitude(player, target) > 0) {
                                            profit += 1;
                                        } else if (get.attitude(player, target) < 0 && target.countCards('h') <= 2) {
                                            profit += 1;
                                        } else profit += 0.7;
                                    };
                                    for (var i = 0; i < todiscard.length; i++) {
                                        var card = todiscard[i];
                                        if (get.name(card, player) == 'tao') {
                                            profit -= 1.2;
                                        } else if (['shan', 'wuxie'].contains(get.name(card, player))) {
                                            if (get.name(card, player) == 'wuxie' && game.hasPlayer(target => get.attitude(player, target) < 0 && target.hasSkill('radiance_yanzhen'))) {
                                                profit -= 0
                                            } else if (!player.hasCard(card2 => !todiscard.contains(card2) && get.name(card, player) == get.name(card2, player), 'hs')) profit -= 1;
                                            else profit -= 0.8;
                                        } else if (['jiu', 'sha'].contains(get.name(card, player))) {
                                            if (get.alteredValue(card) > 4) profit -= 1;
                                            else profit -= 0.7;
                                        } else if (player.getUseValue(card) <= 0) {
                                            profit -= 0;
                                        } else profit -= 0.3;
                                    };
                                    return profit;
                                };
                                var list = _status.event.controls.slice(0);
                                list.sort(function(a, b) {
                                    return val(b) - val(a);
                                });
                                var choice = list[0];
                                if (val(choice) >= 0) return choice;
                                return 'cancel2';
                            });
                            'step 1'
                            if (result.control == "所有手牌") {
                                var hs = player.getCards('h');
                                player.discard(hs);
                            } else if (result.control == "所有“祝”") {
                                player.discard(event.cards);
                            };
                            'step 2'
                            event.targets = game.filterPlayer(function(target) {
                                return lib.skill.radiance_yangzhu.filterTargetx(player, target, false);
                            });
                            event.targets.sort(lib.sort.seat);
                            if (event.targets.length == 0) event.finish();
                            else game.log('radiance_yangzhu', "的目标为", event.targets);
                            'step 3'
                            if (event.targets.length) {
                                var target = event.targets.shift();
                                player.line(target, 'metal');
                                target.chooseToDiscard('h', "弃置一张手牌，或令" + get.translation(player) + "摸一张牌").set('ai', function(card) {
                                    if (get.attitude(target, player) > 0) return 0;
                                    return 6 - get.useful(card);
                                });
                            } else {
                                event.goto(6);
                            };
                            'step 4'
                            if (result.bool) {
                                delete event.next2;
                            } else {
                                event.next2 = player.draw();
                            };
                            'step 5'
                            if (event.next2) player.addGaintag(event.next2.result, 'radiance_yangzhu');
                            if (event.targets.length) event.goto(3);
                            'step 6'
                            var bool = true;
                            var num = player.countCards('h');
                            if (player.hasZhuSkill('radiance_youguo', player)) {
                                for (var i = 0; i < game.players.length; i++) {
                                    if (game.players[i] == player) continue;
                                    if (player.hasZhuSkill('radiance_youguo', game.players[i]) && player.group == game.players[i].group) num--;
                                };
                            };
                            if (num < 0) num = 0;
                            for (var i = 0; i < game.players.length; i++) {
                                if (game.players[i].isOut() || game.players[i] == player) continue;
                                if (game.players[i].countCards('h') >= num) {
                                    bool = false;
                                    break;
                                };
                            };
                            if (bool) {
                                var evt = event.getParent('phaseUse', true);
                                if (evt && evt.player == player && !evt.skipped) evt.skipped = true;
                            };
                        },
                        mod: {
                            ignoredHandcard: function(card, player) {
                                if (card.hasGaintag('radiance_yangzhu')) {
                                    return true;
                                }
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && card.hasGaintag('radiance_yangzhu')) return false;
                            },
                            aiOrder: function(player, card, num) {
                                if (get.itemtype(card) != 'card') return;
                                if (player.getUseValue(card) > 1 && card.hasGaintag('radiance_yangzhu') && num <= 0) return 1.5;
                            },
                        },
                        ai: {
                            order: 0.5,
                            result: {
                                player: 1,
                            },
                            nokeep: true,
                        },
                        action_tag: {
                            overall: 3.5,
                            in: 1,
                            draw: 2.5,
                            negative: 0.5,
                            maxHand: 1,
                        },
                    },
                    "radiance_youguo": {
                        unique: true,
                        zhuSkill: true,
                        mod: {
                            maxHandcardBase: function(player, num) {
                                var num2 = 0;
                                if (player.hasZhuSkill('radiance_youguo', player)) {
                                    for (var i = 0; i < game.players.length; i++) {
                                        if (game.players[i] == player) continue;
                                        if (player.hasZhuSkill('radiance_youguo', game.players[i]) && player.group == game.players[i].group) num2++;
                                    };
                                };
                                return num + num2;
                            },
                        },
                    },
                    "radiance_kaicheng": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        content: function() {
                            'step 0'
                            if (!player.storage.radiance_kaicheng) player.storage.radiance_kaicheng = [];
                            player.addTempSkill('radiance_kaicheng_view');
                            event.targets = game.filterPlayer(function(target) {
                                return target != player;
                            });
                            event.targets = get.sort(event.targets, 'seat', player);
                            'step 1'
                            if (event.targets.length == 0) event.finish();
                            'step 2'
                            event.current = event.targets.shift();
                            event.current.chooseBool("是否向" + get.translation(player) + "公开手牌？不展示则本回合不能再使用或打出牌").set('ai', function(event, player) {
                                if (player.countCards('h') == 0) return true;
                                if (get.attitude(player, event.player) > 1) return true;
                                if (!player.canSave(player)) return true;
                                if (player.isMinHp() && player.hasFriend()) return false;
                                if (player.hasSkillTag('forbid_card') || player.hp >= 3) return false;
                                if (game.hasPlayer(function(target) {
                                        return target.hp <= player.hp && player.canSave(target) && get.recoverEffect(target, player, player) > 1;
                                    })) return true;
                                return true;
                            });
                            'step 3'
                            if (result.bool) {
                                player.viewHandcards(event.current)
                                // event.current.showHandcards();
                                player.storage.radiance_kaicheng.add(event.current);
                                game.delay();
                            } else {
                                event.current.addTempSkill('radiance_forbid');
                                event.finish();
                            };
                            event.goto(1);
                        },
                        subSkill: {
                            view: {
                                locked: true,
                                charlotte: true,
                                ai: {
                                    viewHandcard: true,
                                    skillTagFilter: function(player, tag, arg) {
                                        if (player.storage.radiance_kaicheng && player.storage.radiance_kaicheng.contains(arg)) return;
                                        return false;
                                    },
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_kaicheng;
                                },
                            },
                        },
                    },
                    "radiance_chuhai": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return target != player && target.getDiscardableCards(player, 'he').length > 0;
                        },
                        filterCard: true,
                        position: 'he',
                        check: function(card) {
                            return 5.1 - get.value(card);
                        },
                        content: function() {
                            'step 0'
                            player.discardPlayerCard(target, 'he', [1, 2], "弃置目标角色至多两张牌", true).set('ai', function(button) {
                                var player = _status.event.player;
                                var target = _status.event.target;
                                var val = get.buttonValue(button);
                                if (get.attitude(player, target) > 0) return -val;
                                if (ui.selected.buttons.length > 0) {
                                    var color = get.color(ui.selected.buttons[0].link, target);
                                    var isVisible = _status.event.visible || target.isUnderControl(true, player) || player.hasSkillTag('viewHandcard', null, target, true);
                                    var effect = get.effect(target, {
                                        name: 'sha',
                                    }, player, player);
                                    if (effect > 0) {
                                        if ((isVisible || get.position(button.link) != 'h') && get.color(button.link, target) == color) return 1.5 * val;
                                    } else if (effect < 0) {
                                        if ((isVisible || get.position(button.link) != 'h')) {
                                            if (get.color(button.link, target) != color) return 1.5 * val;
                                            return 0;
                                        };
                                    };
                                };
                                return val;
                            });
                            'step 1'
                            if (result.bool) {
                                for (var i = 0; i < result.cards.length - 1; i++) {
                                    var card = result.cards[i];
                                    if (get.color(card, target) != 'red' && get.color(card, target) != 'black') continue;
                                    for (var j = i + 1; j < result.cards.length; j++) {
                                        if (get.color(card, target) != get.color(result.cards[j], target)) {
                                            event.finish();
                                            break;
                                        };
                                    };
                                };
                            };
                            'step 2'
                            if (lib.filter.targetEnabled2({
                                    name: 'sha',
                                }, player, target)) {
                                player.useCard({
                                    name: 'sha'
                                }, target).set('addCount', false);
                            };
                            'step 3'
                            if (target.isIn() && target.getHistory('damage', function(evt) {
                                    return evt.getParent().name == 'sha' && evt.getParent(3) == event;
                                }).length > 0) {
                                target.draw(1, player);
                            };
                        },
                        ai: {
                            order: 7,
                            result: {
                                target: function() {
                                    return -1;
                                },
                            },
                        },
                    },
                    "radiance_junheng": {
                        trigger: {
                            player: 'damageEnd',
                        },
                        filter: function(event, player) {
                            return event.num > 0
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            event.count = trigger.num;
                            'step 1'
                            event.count--;
                            player.chooseTarget(1, get.prompt2('radiance_junheng'), function(card, player, target) {
                                return target.getHandcardLimit() != target.countCards('h');
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var num = target.getHandcardLimit() - target.countCards('h');
                                if (num > 4) num = 4;
                                else if (num < -4) num = -4;
                                return num * get.attitude(player, target);
                            });
                            'step 2'
                            if (result.bool && result.targets.length) {
                                var target = result.targets[0];
                                player.logSkill('radiance_junheng', target);
                                var num = target.getHandcardLimit() - target.countCards('h');
                                if (num > 4) {
                                    num = 4;
                                } else if (num < -4) num = -4;
                                if (num > 0) {
                                    target.draw(num, player);
                                } else {
                                    target.chooseToDiscard((0 - num), 'h', true);
                                };
                            };
                            'step 3'
                            if (event.count > 0) event.goto(1);
                        },
                    },
                    "radiance_yujian": {
                        trigger: {
                            player: 'phaseDiscardBefore'
                        },
                        filter: function(event, player) {
                            return (player.countCards('h') > 0);
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var dialog = ui.create.dialog(get.prompt('radiance_yujian'));
                            dialog.addText("视为对一名其他角色使用一张【杀】");
                            player.chooseTarget(dialog, function(card, player, target) {
                                if (player == target) return false;
                                return player.canUse({
                                    name: 'sha'
                                }, target, false);
                            }).set('ai', function(target) {
                                return get.effect(target, {
                                    name: 'sha',
                                    radiance_yujian: true,
                                }, _status.event.player, _status.event.player)
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_yujian', result.targets);
                                player.line(result.targets, 'red');
                                // player.discard(result.cards[0]);
                                player.useCard({
                                    name: 'sha',
                                    radiance_yujian: true,
                                }, result.targets[0], false);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            var bool = game.hasPlayer(function(current) {
                                return current.getHistory('damage', function(evt) {
                                    return evt.getParent('phaseDiscard', true) == trigger || evt.getParent('radiance_yujian', true) == _status.event;
                                }).length > 0
                            });
                            if (!bool) trigger.cancel();
                        },
                    },
                    "radiance_huaici": {
                        trigger: {
                            source: 'damageBegin1',
                        },
                        filter: function(event, player) {
                            var card = event.card;
                            if (!card) return false;
                            if (player.storage.radiance_huaici.contains(card.name)) return false;
                            return true;
                        },
                        init: function(player) {
                            if (!player.storage.radiance_huaici) player.storage.radiance_huaici = [];
                        },
                        check: function(event, player) {
                            if (get.attitude(player, event.player) > 0) return true;
                            if (player == _status.currentPhase && !event.isPhaseUsing(player) && event.player.hp > 1) return true;

                            if (event.player.hp > player.hp) return player.countCards('h') - event.player.countCards('h') < 1;
                            if (event.player.hp < player.hp && event.player.hp > 1) return player.countCards('h') - event.player.countCards('h') < 2;
                            return false;
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            trigger.num -= 1;
                            player.draw(3);
                            player.storage.radiance_huaici.add(trigger.card.name);
                        },
                        global: ['radiance_huaici_clear', 'radiance_huaici_ai'],
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: ['phaseZhunbeiAfter', 'phaseJudgeAfter', 'phaseDrawAfter', 'phaseUseAfter', 'phaseDiscardAfter', 'phaseJieshuAfter'],
                                },
                                forced: true,
                                sub: true,
                                popup: false,
                                silent: true,
                                charlotte: true,
                                filter: function(event, player) {
                                    return player.storage.radiance_huaici && player.storage.radiance_huaici.length;
                                },
                                content: function() {
                                    'step 0'
                                    player.storage.radiance_huaici.length = 0;
                                },
                            },
                        },
                    },
                    "radiance_huaici_ai": {
                        locked: true,
                        charlotte: true,
                        mod: {
                            aiOrder: function(player, card, num) {
                                var evt = _status.event.getParent('sha', true);
                                if (get.name(card) == 'shan' && evt && evt.player && evt.player.hasSkill('radiance_huaici') && get.attitude(player, evt.player) > 0 && !evt.player.storage.radiance_huaici.contains('sha')) {
                                    return 0;
                                };
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage') && player.hasSkill('radiance_huaici')) {
                                        if (get.attitude(target, player) <= 0) return;
                                        if (player.storage.radiance_huaici.contains(card.name)) return;
                                        var att = get.attitude(player, target);
                                        var sgn = get.sgn(att);
                                        if (get.name(card) == 'sha' && card.radiance_yujian) {
                                            if (att >= 0) return [0, 1, 1, 1];
                                            if (target.hp < 2) {
                                                if (!target.canSave(target) || player.needsToDiscard() <= 2) return [2, -1, 1, 1];
                                            };
                                            return [0.5, -1, 1, 1]; // [对目标效果倍率，对目标效果加算，使用者收益倍率，使用者收益加算]
                                        };
                                        if (get.tag(card, 'multitarget')) {
                                            var num = get.distance(player, target, 'absolute');
                                            if (num > 0 && !game.hasPlayer(function(current) {
                                                    var num2 = get.distance(player, current, 'absolute');
                                                    return num2 < num && get.attitude(player, target) > 0;
                                                })) return [0, 0, 0, 1];
                                            return [1, sgn, 1, 0];
                                        };
                                        return [target.hp == 1 ? 2 : 0.8, 0, 1, 1];
                                    };
                                },
                            },
                        },
                    },
                    "radiance_yingling": {
                        trigger: {
                            player: 'damageBegin3',
                            source: 'damageBegin1',
                        },
                        mark: true,
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                if (player.storage.radiance_yingling) {
                                    dialog.addText("下一次增加伤害时需弃置" + get.cnNumber(player.storage.radiance_yingling.add) + "张牌");
                                    dialog.addText("下一次减伤伤害时需弃置" + get.cnNumber(player.storage.radiance_yingling.minus) + "张牌");
                                };
                            },
                        },
                        init: function(player, skill) {
                            if (!player.storage.radiance_yingling) player.storage.radiance_yingling = {
                                add: 1,
                                minus: 1,
                            };
                        },
                        filter: function(event, player, name) {
                            var type = name == 'damageBegin1' ? 'add' : 'minus';
                            if (!player.storage.radiance_yingling) player.storage.radiance_yingling = {
                                add: 1,
                                minus: 1,
                            };
                            if (player.countCards('h') == 0 || player.countCards('h') < player.storage.radiance_yingling[type] || event.num <= 0 || !event.player.isIn()) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var type = event.triggername == 'damageBegin1' ? 'add' : 'minus';
                            var num = player.storage.radiance_yingling[type];
                            if (num == 0) {
                                player.chooseBool("###英灵###是否要减少" + (trigger.source ? get.translation(trigger.source) + "对你的" : "此") + "伤害？").set('choice', true);
                            } else {
                                var dialog = ui.create.dialog("英灵");
                                var str = event.triggername == 'damageBegin1' ? "是否弃置" + get.cnNumber(num) + "张手牌对" + get.translation(trigger.player) + "额外造成1点伤害？" : "是否弃置" + get.cnNumber(num) + "张牌来减少" + (trigger.source ? get.translation(trigger.source) + "对你的" : "此") + "伤害？";
                                // str += "（需弃置至少一张手牌）";
                                dialog.addText(str);
                                player.chooseToDiscard(dialog, 'h', num, function(card) {
                                    // if (ui.selected.cards.length == 0 && get.position(card) != 'h') return false;
                                    return true;
                                }).set('ai', function(card) {
                                    var trigger = _status.event.getTrigger();
                                    var type = _status.event.getParent().triggername == 'damageBegin1' ? 'add' : 'minus';
                                    var player = _status.event.player;
                                    var num = player.storage.radiance_yingling[type];
                                    var base = 7;
                                    if (type == 'add') {
                                        if (get.damageEffect(trigger.player, player, player) < 1) return -1;
                                        if (trigger.player.hasSkillTag('noextra') || trigger.player.getEquip('baiyin')) return -1;
                                        if (num > 2) base--;
                                    };
                                    if (type == 'minus') {
                                        if (get.tag(card, 'save')) return -1;
                                        if ((['wuxie', 'shan'].contains(get.name(card, player)) || get.subtype(card) == 'equip2') && player.hp > trigger.num) return -1;
                                        if (trigger.num > 1) base += 3 + trigger.num - num;
                                        if (player.hp <= 1 && !player.countCards('hs', function(cardx) {
                                                return get.tag(cardx, 'save');
                                            }) && !player.hasSkillTag('save')) base += 2;
                                    };
                                    return base - num - get.alteredValue(card);
                                });
                            };
                            'step 1'
                            if (result.bool) {
                                if (event.triggername == 'damageBegin1') {
                                    player.logSkill('radiance_yingling', trigger.player);
                                    player.storage.radiance_yingling.add += 1;
                                    trigger.num++;
                                } else {
                                    player.logSkill('radiance_yingling');
                                    player.storage.radiance_yingling.minus += 1;
                                    trigger.num--;
                                };
                                player.markSkill('radiance_yingling');
                            };
                        },
                        global: 'radiance_yingling_clear',
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                filter: function(event, player) {
                                    return player.storage.radiance_yingling;
                                },
                                silent: true,
                                firstDo: true,
                                popup: false,
                                forced: true,
                                content: function() {
                                    player.storage.radiance_yingling.add = 1;
                                    player.storage.radiance_yingling.minus = 1;
                                    player.markSkill('radiance_yingling');
                                },
                            },
                        },
                    },
                    "radiance_tianshu": {
                        mod: {
                            maxHandcardFinal: function(player, num) {
                                var max = 2;
                                var targets = game.filterPlayer(function(current) {
                                    max = Math.max(max, current.hp);
                                    return !current.hasSkill('radiance_tianshu');
                                });
                                max = Math.min(5, max);
                                return Math.max(num, max);
                            },
                        },
                        trigger: {
                            player: 'phaseBegin',
                        },
                        filter: function(event, player) {
                            var max = 2;
                            var targets = game.filterPlayer(function(current) {
                                max = Math.max(max, current.hp);
                                return !current.hasSkill('radiance_tianshu');
                            });
                            max = Math.min(5, max);
                            return max > player.countCards('h');
                        },
                        forced: true,
                        firstDo: true,
                        content: function() {
                            'step 0'
                            var max = 2;
                            var targets = game.filterPlayer(function(current) {
                                max = Math.max(max, current.hp);
                                return !current.hasSkill('radiance_tianshu');
                            });
                            max = Math.min(5, max);
                            var num = max - player.countCards('h');
                            player.draw(num);
                            if (num > 2) player.skipList.add('phaseDraw');
                        },
                    },
                    "radiance_huiwang": {
                        trigger: {
                            global: 'useCardToTargeted'
                        },
                        filter: function(event, player) {
                            if (!event.radiance_huiwang) return false;
                            var target = event.target;
                            if (target != player && !player.inRange(target)) return false;
                            if (!target.storage.radiance_huiwang || !target.storage.radiance_huiwang.count) return false;
                            var num = target.hp > 1 ? 2 : 1;
                            if (target == player && 1 == 0) {
                                if (!Array.isArray(target.storage.radiance_huiwang.source)) return true;
                                return !target.storage.radiance_huiwang.source.contains(player);
                            } else if (target.storage.radiance_huiwang.count >= num) {
                                if (!Array.isArray(target.storage.radiance_huiwang.source)) return true;
                                return !target.storage.radiance_huiwang.source.contains(player);
                            };
                            return false;
                        },
                        check: function(event, player) {
                            if (player.getCards('he', function(card) {
                                    return get.value(card, event.target) <= 0;
                                }).length > 0) return true;
                            return get.attitude(player, event.target) > 0;
                        },
                        logTarget: 'target',
                        content: function() {
                            'step 0'
                            if (!trigger.target.storage.radiance_huiwang.source) trigger.target.storage.radiance_huiwang.source = [];
                            if (trigger.target.storage.radiance_huiwang.source.contains(player)) {
                                trigger.target.storage.radiance_huiwang.source.add(114514);
                            } else {
                                trigger.target.storage.radiance_huiwang.source.add(player);
                            }
                            if (!player.storage.radiance_huiwang) player.storage.radiance_huiwang = {};
                            if (!player.storage.radiance_huiwang.used) player.storage.radiance_huiwang.used = 0;
                            player.storage.radiance_huiwang.used++;
                            'step 1'
                            player.draw();
                            'step 2'
                            if (trigger.target != player) {
                                player.chooseCard(true, 'he', '交给' + get.translation(trigger.target) + '一张牌').set('ai', function(card) {
                                    var player = _status.event.player;
                                    var trigger = _status.event.getTrigger();
                                    var target = trigger.target;
                                    if (get.attitude(player, target) <= 0) return 10 - get.value(card) - get.value(card, target);
                                    if (get.tag(trigger.card, 'respondSha') && card.name == 'sha') return 10 - get.value(card);
                                    else if (get.tag(trigger.card, 'respondShan') && card.name == 'shan') return 10 - get.value(card);
                                    else if (get.type2(trigger.card) == 'trick' && card.name == 'wuxie') return 8 - get.value(card);
                                    else if (get.tag(trigger.card, 'damage') && target.hp <= 2 && card.name == 'jiu') return 6 - get.value(card);
                                    return 4.5 - get.value(card);
                                });
                            } else {
                                event.finish();
                            };
                            'step 3'
                            if (result.bool) {
                                trigger.target.gain(result.cards, player, 'giveAuto');
                            };
                            game.delay();
                        },
                        global: ['radiance_huiwang_record', 'radiance_huiwang_clear'],
                        subSkill: {
                            record: {
                                trigger: {
                                    target: 'useCardToTargeted'
                                },
                                forced: true,
                                sub: true,
                                silent: true,
                                popup: false,
                                charlotte: true,
                                firstDo: true,
                                priority: 80,
                                filter: function(event, player) {
                                    return event.player != event.target && event.card && (get.tag(event.card, 'damage'));
                                },
                                content: function() {
                                    'step 0'
                                    if (!player.storage.radiance_huiwang) player.storage.radiance_huiwang = {};
                                    if (!player.storage.radiance_huiwang.count) player.storage.radiance_huiwang.count = 0;
                                    player.storage.radiance_huiwang.count++;
                                    trigger.radiance_huiwang = true;
                                },
                            },
                            clear: {
                                trigger: {
                                    global: 'phaseAfter'
                                },
                                forced: true,
                                silent: true,
                                sub: true,
                                charlotte: true,
                                content: function() {
                                    player.storage.radiance_huiwang = {
                                        count: 0,
                                        used: 0,
                                        source: [],
                                    };
                                },
                            },
                        },
                        locked: false,
                        mod: {
                            aiOrder: function(player, card, current) {
                                if (!get.tag(card, 'recover')) return;
                                if (!game.hasPlayer(target => get.attitude(player, target) < 0 && target.hasActionTag('damageRespond'))) {
                                    var num = 0
                                    if (current > 0) num = 1;
                                    if (!player.needsToDiscard()) num = 0;
                                    return num;
                                };
                            },
                        },
                    },
                    "radiance_jinghun": {
                        usable: 1,
                        trigger: {
                            source: 'damageSource',
                            player: 'useCardToPlayered'
                        },
                        filter: function(event, player) {
                            if (event.name == 'damage') return event.num > 0 && !player.hasSkill('radiance_jinghun_damage');
                            return (event.card && !get.tag(event.card, 'damage') && event.target != player && !player.hasSkill('radiance_jinghun_use'));
                        },
                        check: function(event, player) {
                            if (event.name == 'useCard') {
                                for (var i = 0; i < event.targets.length; i++) {
                                    if (get.attitude(player, event.targets[i]) > get.attitude(player, event.target)) return false;
                                };
                            };
                            return true;
                        },
                        logTarget: function(event, player) {
                            if (event.name == 'damage') return event.player;
                            return event.target;
                        },
                        content: function() {
                            'step 0'
                            if (trigger.name == 'damage') {
                                event.target = trigger.player;
                                player.addTempSkill('radiance_jinghun_damage');
                            } else {
                                event.target = trigger.target;
                                player.addTempSkill('radiance_jinghun_use');
                            };
                            if (!event.target || event.target == player || !event.target.isIn()) {
                                var num = trigger.name == 'damage' ? 4 : 2;
                                player.draw(num);
                                event.finish();
                            } else if (trigger.name != 'damage') {
                                event._result = {
                                    index: 1
                                };
                            } else {
                                event.target.chooseControl("额外摸牌", "获得牌").set('ai', function() {
                                    if (get.attitude(_status.event.player, player) > 0 && _status.event.player.countCards('j') > 0) return 1;
                                    return 0;
                                }).set('choiceList', [
                                    "你摸一张牌，然后" + get.translation(player) + "摸三张牌",
                                    "你与" + get.translation(player) + "各摸一张牌，然后其获得你一张牌"
                                ]).set('prompt', "净魂：请选择一项");
                            }
                            'step 1'
                            if (result.index == 0) {
                                event.target.draw();
                                player.draw(3);
                                event.finish();
                            } else {
                                game.asyncDraw([event.target, player]);
                            };
                            'step 2'
                            player.gainPlayerCard(event.target, 'hej', 1, true);
                        },
                        subSkill: {
                            use: {
                                charlotte: true,
                                locked: true,
                            },
                            damage: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                    },
                    "radiance_longjuan": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        skillAnimation: true,
                        limited: true,
                        animationColor: 'wood',
                        intro: {
                            content: 'limited'
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_longjuan != 'boolean') player.storage.radiance_longjuan = false;
                        },
                        filter: function(event, player) {
                            return !player.storage.radiance_longjuan && game.hasPlayer(function(target) {
                                if (target == player) return false;
                                return target.countCards('e', function(cardx) {
                                    return player.canEquip(cardx);
                                }) > 0 || target.countCards('j', function(cardx) {
                                    return player.canAddJudge(cardx);
                                }) > 0;
                            });
                        },
                        selectTarget: -1,
                        multitarget: true,
                        multiline: true,
                        line: 'wood',
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_longjuan');
                            event.bool = true;
                            event.list = [];
                            'step 1'
                            var targets = {
                                'all': [],
                            };
                            for (var i = 1; i < 6; i++) {
                                if (!player.isEmpty(i)) continue;
                                targets['equip' + i] = game.filterPlayer(function(target) {
                                    if (get.attitude(player, target) > 0) return false;
                                    var equip = target.getEquip(i);
                                    if (equip && player.canEquip(equip) && get.equipValue(equip, player) > 0) {
                                        targets.all.add(target);
                                        return true;
                                    };
                                    return false;
                                });
                            };
                            player.chooseTarget(1, event.bool, event.bool ? "选择一名角色将其一张牌移动给你" : "是否再移动一张牌？", function(card, player, target) {
                                if (target == player || _status.event.list.contains(target)) return false;
                                return target.countCards('e', function(cardx) {
                                    return player.canEquip(cardx);
                                }) > 0 || target.countCards('j', function(cardx) {
                                    return player.canAddJudge(cardx);
                                }) > 0;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var targets = _status.event.map;
                                var result = function(current) {
                                    var count = -1;
                                    for (var i in targets) {
                                        if (targets[i].contains(current)) count++;
                                    };
                                    return count;
                                };
                                var count = result(target);
                                if (count <= 0) return -1;
                                if (get.attitude(player, target) <= 0) return 1 / count;
                                return -1;
                            }).set('list', event.list).set('map', targets);
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                event.list.push(target);
                                player.choosePlayerCard(target, "将" + get.translation(target) + "的一张牌移动给你", 'ej', true, function(button) {
                                    var player = _status.event.player;
                                    var card = button.link;
                                    var target = _status.event.getParent().target;
                                    if (get.position(card) == 'j') return -1;
                                    if (get.value(card, target) < 0 && get.value(card, player) > 0) {
                                        return get.value(card, player) + get.sgn(get.attitude(player, target)) * get.value(card, target);
                                    } else {
                                        return get.value(card, player);
                                    };
                                    return -1;
                                }).set('filterButton', function(button) {
                                    if (get.position(button.link) == 'e') return player.canEquip(button.link, false);
                                    if (get.position(button.link) == 'j') return player.canAddJudge(button.link);
                                });
                            } else {
                                event.finish();
                            };
                            'step 3'
                            var card = result.cards[0];
                            target.$give(card, player);
                            if (get.position(card) == 'e') {
                                player.equip(card);
                            } else {
                                player.addJudge(card);
                            };
                            game.delay();
                            'step 4'
                            event.bool = false;
                            event.goto(1);
                        },
                        ai: {
                            order: function(item, player) {
                                var targets = {
                                    'all': [],
                                };
                                for (var i = 1; i < 6; i++) {
                                    if (!player.isEmpty(i)) continue;
                                    targets['equip' + i] = game.filterPlayer(function(target) {
                                        if (get.attitude(player, target) > 0) return false;
                                        var equip = target.getEquip(i);
                                        if (equip && player.canEquip(equip) && get.equipValue(equip, player) > 0) {
                                            targets.all.add(target);
                                            return true;
                                        };
                                        return false;
                                    });
                                };
                                var result = function(target) {
                                    var count = -1;
                                    for (var i in targets) {
                                        if (targets[i].contains(target)) count++;
                                    };
                                    return count;
                                };
                                var targets1 = targets.all.slice(0);
                                targets1.sort(function(a, b) {
                                    return result(a) - result(b);
                                });
                                var targets2 = [];
                                var total = 0;
                                for (var i = 0; i < targets1.length; i++) {
                                    var current = targets1[i];
                                    var es = current.getCards('e');
                                    for (var j = 0; j < targets2.length; j++) {
                                        for (var k = 0; k < es.length; k++) {
                                            if (!player.canEquip(es[k]) || targets2[j].getEquip(get.subtype(es[k]))) es.splice(k--, 1);
                                        };
                                    };
                                    if (es.length > 0) {
                                        total += 1;
                                        targets2.add(current);
                                    };
                                };
                                if (total >= 2) return 20;
                                if (player.hp <= 1 && total > 0) return 2;
                                return -1;
                            },
                            result: {
                                player: function(player) {
                                    return 1;
                                }
                            },
                        },
                    },
                    "radiance_jiahu": {
                        locked: true,
                        mod: {
                            maxHandcard: function(player, num) {
                                return num + player.countCards('e');
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + player.countCards('e');
                            },
                        },
                    },
                    "radiance_zhugong": {
                        usable: 1,
                        enable: "phaseUse",
                        content: function() {
                            player.chooseUseTarget({
                                name: 'wanjian',
                                radiance_zhugong: true,
                            }, true, false);
                        },
                        ai: {
                            threaten: 1.8,
                            order: function(card, player) {
                                return get.order({
                                    name: 'wanjian',
                                }, player) + 0.5;
                            },
                            result: {
                                player: function(player) {
                                    if (!player.hasSkill('radiance_zhugong_used') && !game.hasPlayer(current => get.attitude(player, current) > 0 && current.hp < 2)) return 1;
                                    return player.getUseValue('wanjian');
                                },
                            },
                            effect: {
                                player: function(card, player, target) {
                                    if (!player.hasSkill('radiance_zhugong_used') && get.tag(card, 'damage')) {
                                        if (target.hp == 1) return 1;
                                        if (!get.tag(card, 'multitarget') && get.attitude(target, player) > 0) return [0, 0.3, 0, 0];
                                    };
                                },
                            },
                        },
                        group: 'radiance_zhugong_recover',
                        subSkill: {
                            recover: {
                                trigger: {
                                    player: 'useCardEnd',
                                },
                                filter: function(event, player) {
                                    if (player.hasSkill('radiance_zhugong_used')) return false;
                                    var targets = game.filterPlayer(target => target.isDamaged() && target.getHistory('damage', function(evt) {
                                        return evt.card == event.card && evt.getParent('useCard') == event;
                                    }).length > 0);
                                    return targets.length > 0;
                                },
                                check: function(event, player) {
                                    var targets = game.filterPlayer(target => target.isDamaged() && target.getHistory('damage', function(evt) {
                                        return evt.card == event.card && evt.getParent('useCard') == event;
                                    }).length > 0);
                                    var eff = 0;
                                    for (var i = 0; i < targets.length; i++) {
                                        eff += get.recoverEffect(targets[i], player, player);
                                    };
                                    return eff > 0;
                                },
                                prompt2: function(event, player) {
                                    var targets = game.filterPlayer(target => target.isDamaged() && target.getHistory('damage', function(evt) {
                                        return evt.card == event.card && evt.getParent('useCard') == event;
                                    }).length > 0);
                                    targets.sort(lib.sort.seat);
                                    return "令" + get.translation(targets) + (targets.length > 1 ? "各" : "") + "回复1点体力，然后你摸一张牌";
                                },
                                content: function() {
                                    'step 0'
                                    player.addTempSkill('radiance_zhugong_used');
                                    event.targets = game.filterPlayer(target => target.isDamaged() && target.getHistory('damage', function(evt) {
                                        return evt.card == trigger.card && evt.getParent('useCard') == trigger;
                                    }).length > 0);
                                    player.line(event.targets, 'water');
                                    'step 1'
                                    target = event.targets.shift();
                                    target.recover(player, 'nocard');
                                    if (event.targets.length > 0) event.redo();
                                    'step 2'
                                    player.draw();
                                },
                            },
                            used: {
                                charlotte: true,
                                locked: true,
                                mark: true,
                                intro: {
                                    content: "祝弓的回血效果本回合已使用",
                                },
                            },
                        },
                    },
                    "radiance_huimou": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        filter: function(event, player) {
                            if (player.getHistory('damage', evt => evt.num > 0).length > 0) return true;
                            // if (game.hasPlayer2(current => current.getStat('kill') > 0)) return true;
                            return false;
                        },
                        prompt2: "本回合你受到过伤害，可以亮出牌堆顶三张牌，然后可以以任意顺序使用任意张亮出的牌。",
                        content: function() {
                            'step 0'
                            var cards = get.cards(3);
                            game.cardsGotoOrdering(cards);
                            event.cards = cards;
                            player.showCards(cards, "辉眸亮出的牌");
                            'step 1'
                            if (player.getHandcardLimit() < 0 || event.cards.length == 0) {
                                event.finish();
                                return;
                            };
                            var dialog = ui.create.dialog("辉眸：可以使用一张牌"); // （"当前上限为" + player.getHandcardLimit() + "）"
                            dialog.add(event.cards);
                            player.chooseButton(dialog).set('ai', function(button) {
                                var card = button.link;
                                var player = _status.event.player;
                                if (player.getHandcardLimit() > 2) return player.getUseValue(card) * get.order(card);
                                return player.getUseValue(card) - 2;
                            }).set('filterButton', function(button) {
                                var card = button.link;
                                var player = _status.event.player;
                                return player.hasUseTarget(card);
                            });
                            'step 2'
                            if (result.bool) {
                                var card = result.links[0];
                                event.cards.remove(card);
                                player.chooseUseTarget(card, true, false);
                                event.goto(1);
                            };
                        },
                    },
                    "radiance_waidao": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return target != player;
                        },
                        selectTarget: -1,
                        multitarget: true,
                        multiline: true,
                        line: 'wood',
                        content: function() {
                            'step 0'
                            event.targets = get.sort(targets.slice(0), 'seat', player);
                            event.togain = [];
                            'step 1'
                            event.target = targets.shift();
                            event.target.chooseCard('h', 1, "将一张手牌交给" + get.translation(player) + "，如果是大点有机会视为使用锦囊").set('ai', function(card) {
                                var target = _status.event.player;
                                var player = _status.event.getParent().player;
                                if (get.attitude(target, player) <= 0) {
                                    if (get.value(card) <= 0) return 0.1 - get.value(card);
                                    if (get.value(card) < 2 && get.number(card) > 11) return 3 - get.value(card);
                                } else {
                                    return 4.5 - get.value(card);
                                };
                                return -1;
                            });
                            'step 2'
                            if (result.bool) {
                                event.togain.push(result.cards[0]);
                            };
                            'step 3'
                            if (targets.length > 0) event.goto(1);
                            'step 4'
                            if (event.togain.length == 0) {
                                event.goto(5);
                                event.decider = player;
                                return;
                            };
                            var decider = get.owner(event.togain[0]);
                            var max = get.number(event.togain[0], decider);
                            player.gain(event.togain[0], decider, 'give');

                            if (event.togain.length > 1) {
                                for (var i = 1; i < event.togain.length; i++) {
                                    var owner = get.owner(event.togain[i]);
                                    var num = get.number(event.togain[i], owner);
                                    player.gain(event.togain[i], owner, 'give');
                                    if (num > max) {
                                        max = num;
                                        decider = owner;
                                    } else if (num == max) {
                                        decider = player;
                                    };
                                };
                            };
                            event.decider = decider;
                            'step 5'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                            };
                            list.sort(lib.sort.card);
                            if (list.length == 0) {
                                event.finish();
                                return ui.create.dialog('无可用锦囊牌');
                            };
                            var dialog = ui.create.dialog('视为使用一张非延时类锦囊牌', [list, 'vcard']);
                            event.decider.chooseButton(dialog).set('ai', function(button) {
                                if (button.link[2] == 'wugu') return;
                                var effect = _status.event.player.getUseValue(button.link[2]);
                                if (effect > 0) return effect;
                                return 0;
                            }).set('filterButton', function(button) {
                                var card = {
                                    name: button.link[2],
                                    isCard: true,
                                };
                                var info = get.info(card);
                                return _status.event.player.hasUseTarget(card);
                            });
                            'step 6'
                            if (result.bool) {
                                event.decider.chooseUseTarget({
                                    name: result.links[0][2],
                                }, false).set('forced', true);
                            };
                        },
                        ai: {
                            order: function(item, player) {
                                var friends = player.getFriends();
                                if (friends.length && (player.ai.shown > 0 || player.identityShown)) return 10;
                                if (!friends.length) return 3;
                                // if (player.hasSkill('radiance_diankuang')) return -1;
                                return 1;
                            },
                            result: {
                                player: function(player) {
                                    return 1;
                                },
                            },
                        },
                    },
                    "radiance_diankuang": {
                        trigger: {
                            player: "phaseEnd",
                        },
                        init: function(player) {
                            player.storage.radiance_diankuang = false;
                        },
                        forced: true,
                        juexingji: true,
                        unique: true,
                        skillAnimation: "epic",
                        animationColor: "black",
                        filter: function(event, player) {
                            if (player.storage.radiance_diankuang) return false;
                            var cards = [];
                            player.getHistory('gain', function(evt) {
                                if (evt.getParent().name != 'radiance_waidao') return false;
                                cards = cards.concat(evt.cards);
                                return evt.cards.length > 0;
                            });
                            return !player.getHistory('skipped').contains('phaseUse') && cards.length < 2;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_diankuang');
                            player.removeSkill('radiance_waidao');
                            'step 1'
                            player.gainMaxHp(2);
                            'step 2'
                            player.recover(2);
                            'step 3'
                            player.addSkill('radiance_shengji');
                        },
                        derivation: ['radiance_shengji'],
                    },
                    "radiance_shengji": {
                        trigger: {
                            player: 'phaseJieshuBegin',
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            player.loseHp();
                            'step 1'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                            };
                            list.sort(lib.sort.card);
                            if (list.length == 0) {
                                event.finish();
                                return ui.create.dialog('无可用锦囊牌');
                            };
                            list.sort(lib.sort.card);
                            var dialog = ui.create.dialog('生祭：是否视为使用一张锦囊牌', [list, 'vcard']);
                            player.chooseButton(dialog).set('ai', function(button) {
                                var card = {
                                    name: button.link[2],
                                };
                                var effect = player.getUseValue(card);
                                if (effect > 0) return effect;
                                return 0;
                            }).set('filterButton', function(button) {
                                var card = {
                                    name: button.link[2],
                                    isCard: true,
                                };
                                var info = get.info(card);
                                return _status.event.player.hasUseTarget(card);
                            });
                            'step 2'
                            if (result.bool) {
                                player.chooseUseTarget({
                                    name: result.links[0][2],
                                }, false).set('forced', true);
                            };
                        },
                        group: 'radiance_shengji_damage',
                        subSkill: {
                            damage: {
                                trigger: {
                                    global: 'phaseJieshu',
                                },
                                filter: function(event, player) {
                                    return player.getHistory('damage', function(evt) {
                                        return evt.num > 0;
                                    }).length > 0;
                                },
                                forced: true,
                                content: function() {
                                    'step 0'
                                    player.loseMaxHp();
                                    'step 1'
                                    var list = [];
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        var name = lib.inpile[i];
                                        if (name == 'sha') {
                                            list.push(['基本', '', 'sha']);
                                            list.push(['基本', '', 'sha', 'fire']);
                                            list.push(['基本', '', 'sha', 'thunder']);
                                            list.push(['基本', '', 'sha', 'ice']);
                                        } else if (get.type(name) == 'basic') {
                                            list.push(['基本', '', name]);
                                        };
                                    }
                                    if (list.length == 0) {
                                        event.finish();
                                        return ui.create.dialog('无可用基本牌');
                                    };
                                    list.sort(lib.sort.card);
                                    var dialog = ui.create.dialog('生祭：是否视为使用一张基本牌', [list, 'vcard']);
                                    player.chooseButton(dialog).set('ai', function(button) {
                                        var card = {
                                            name: button.link[2],
                                            nature: button.link[3],
                                            isCard: true,
                                        }
                                        var effect = player.getUseValue(card);
                                        if (effect > 0) return effect;
                                        return 0;
                                    }).set('filterButton', function(button) {
                                        var card = {
                                            name: button.link[2],
                                            isCard: true,
                                        };
                                        var info = get.info(card);
                                        if (!info || info.notarget) return false;
                                        return _status.event.player.hasUseTarget(card);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var button = result.links[0];
                                        player.chooseUseTarget({
                                            name: result.links[0][2],
                                            nature: result.links[0][3],
                                        }, false).set('forced', true);
                                    };
                                },
                            },
                        },
                    },
                    "radiance_jueren": {
                        trigger: {
                            global: 'useCard'
                        },
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_jueren_used')) return false;
                            // if (!event.isFirstTarget) return false;
                            return event.card.name == 'sha' && player.hasCard(function(card) {
                                return get.type(card) == 'basic';
                            }, 'hs') && event.player.inRange(player) && player != _status.currentPhase;
                        },
                        check: function(event, player) {
                            if (get.attitude(player, event.player) > 0) return false;
                            var bool1 = false,
                                bool2 = false,
                                bool3 = false;
                            var hs = player.getCards('hs', function(card) {
                                if (get.damageEffect(event.player, player, player, get.nature(card)) <= 0 && get.name(card) == 'sha') return false;
                                if (event.player.hasActionTag('noNature') && get.nature(card)) return false;
                                if (event.player.hasActionTag('noNature') && !get.nature(card) && get.name(card) == 'sha') return false;
                                return get.type(card, player) == 'basic';
                            });
                            if (hs.length == 0) return false;
                            for (var target in event.targets) {
                                if (get.attitude(player, target) > 1) bool1 = true;
                                if (get.effect(target, event.card, event.player, player, true) < 0) bool2 = true;
                                if (hs.filter(card => get.alteredValue(card) < (target == player || get.zhu(player) == target ? 6 : 4)).length > 0) bool3 = true;
                            };
                            return bool1 && bool2 && bool3;
                        },
                        logTarget: "player",
                        firstDo: true,
                        content: function() {
                            'step 0'
                            event.source = trigger.player;
                            player.chooseCard('hs', "绝刃：请选择要打出的牌", 1, true, function(card) {
                                return get.type(card, player) == 'basic';
                            }).set('ai', function(card) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.player;
                                if (get.damageEffect(trigger.player, player, player, get.nature(card)) <= 0 && get.name(card) == 'sha') return false;
                                if (trigger.player.hasActionTag('noNature') && get.nature(card)) return false;
                                if (trigger.player.hasActionTag('noNormal') && !get.nature(card) && get.name(card) == 'sha') return false;
                                return 6 - get.alteredValue(card);
                            });
                            'step 1'
                            if (result.bool && result.cards.length > 0) {
                                player.addTempSkill('radiance_jueren_used');
                                event.card = result.cards[0];
                                player.respond(result.cards);
                                event.type = 2;
                                switch (get.name(event.card, player)) {
                                    case 'sha':
                                        event.type = 1;
                                        break;
                                    case 'shan':
                                        event.type = 3;
                                        break;
                                    default:
                                        event.type = 2;
                                        break;
                                };
                            } else {
                                event.finish();
                            };
                            'step 2'
                            event.source.chooseToRespond({
                                name: 'shan'
                            }).set('ai', function(card) {
                                if (get.attitude(_status.currentPhase, _status.event.player < 1)) return 0;
                                if (_status.event.type == 1 && _status.event.player.hp <= Math.max(2, _status.event.getTrigger().targets[0].hp)) {
                                    return 8 - get.alteredValue(card);
                                } else if (_status.event.type == 3 && _status.event.player.hasCard(function(card2) {
                                        return get.alteredValue(card2) > 5;
                                    }, 'he')) {
                                    return 6 - get.alteredValue(card);
                                } else if (_status.event.type == 2 && _status.event.getParent().player.countCards('hs') < 3) {
                                    return 6 - get.alteredValue(card);
                                };
                                return 0;
                            }).set('autochoose', lib.filter.autoRespondShan).set('type', event.type);
                            'step 3'
                            if (result.bool) {
                                trigger.all_excluded = true;
                                trigger.finished = true;
                                trigger.untrigger(true);
                                event.finish();
                            } else {
                                if (event.type == 2) {
                                    player.draw(2);
                                } else if (event.type == 3) {
                                    player.gainPlayerCard(trigger.player, 'he', 1);
                                } else {
                                    trigger.player.damage(2, player).set('card', event.card).set('cards', [event.card]).set('nature', get.nature(event.card));
                                };
                            };
                            'step 4'
                            if (event.type == 2) {
                                game.asyncDraw(trigger.targets, 2);
                            } else if (event.type == 3) {
                                var togain = trigger.cards.filterInD('od');
                                if (togain.length > 0) player.gain(togain, 'gain2');
                            };
                        },
                        ai: {
                            threaten: 1.1,
                            expose: 0.4,
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: false,
                            },
                        },
                        action_tag: {
                            profit: 2,
                            demand_sha: 2,
                            active_defend: 2,
                        },
                    },
                    "radiance_shengcheng": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        skillAnimation: 'epic',
                        limited: true,
                        animationColor: 'thunder',
                        intro: {
                            content: 'limited'
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_shengcheng != 'boolean') player.storage.radiance_shengcheng = false;
                        },
                        filter: function(event, player) {
                            return (!player.storage.radiance_shengcheng);
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_shengcheng');
                            'step 1'
                            event.cards = get.cards(5);
                            game.cardsGotoOrdering(event.cards);
                            event.ongoing = true;
                            player.showCards(event.cards);
                            for (var i = 0; i < 5; i++) {
                                if (event.cards[i].name == 'sha') event.ongoing = false;
                            };
                            'step 2'
                            if (event.ongoing) {
                                var card2 = get.cards(1)[0];
                                event.cards.add(card2);
                                player.showCards([card2]);
                                game.cardsGotoOrdering(card2);
                                if (card2.name == 'sha') {
                                    event.ongoing = false;
                                } else {
                                    game.delay(1);
                                    event.redo();
                                };
                            };
                            'step 3'
                            player.gain(event.cards, 'gain2', 'log');
                            'step 4'
                            player.addGaintag(event.cards, 'radiance_shengcheng');
                            player.addTempSkill('radiance_shengcheng_af');
                        },
                        ai: {
                            order: function(item, player) {
                                if (player.hp < 2) return 99;
                                return 8;
                            },
                            result: {
                                player: function(player) {
                                    if (player.hp <= 2 || player.countCards('h') <= 2) return 10;
                                    return 0;
                                }
                            },
                        },
                        subSkill: {
                            af: {
                                charlotte: true,
                                locked: true,
                                mod: {
                                    targetInRange: function(card, player, target) {
                                        if (card.name == 'sha' && target != player) {
                                            return true;
                                        }
                                    },
                                    ignoredHandcard: function(card, player) {
                                        if (card.hasGaintag('radiance_shengcheng')) {
                                            return true;
                                        }
                                    },
                                    cardDiscardable: function(card, player, name) {
                                        if (name == 'phaseDiscard' && card.hasGaintag('radiance_shengcheng')) {
                                            return false;
                                        }
                                    },
                                },
                                onremove: function(player, skill) {
                                    player.removeGaintag('radiance_shengcheng');
                                },
                            },
                        },
                        action_tag: {
                            profit: 7,
                            limited: 1,
                            draw: 6,
                        },
                    },


                    // hheaven
                    "radiance_quanneng": {
                        init: function(player, skill) {
                            if (!Array.isArray(player.storage.radiance_quanneng)) player.storage.radiance_quanneng = ['draw', 'discard', 'damage', 'recover'];
                            if (!Array.isArray(player.storage.radiance_quanneng_used)) player.storage.radiance_quanneng_used = [];
                            if (!Array.isArray(player.storage.radiance_quanneng_disable)) player.storage.radiance_quanneng_disable = [];
                        },
                        mark: true,
                        marktext: "能",
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                if (!Array.isArray(player.storage.radiance_quanneng)) return;
                                if (player.storage.radiance_quanneng.length == 0) return "所有效果均已废除";
                                dialog.addText("还有下列效果未废除：");
                                for (var i = 0; i < player.storage.radiance_quanneng.length; i++) {
                                    var current = player.storage.radiance_quanneng[i];
                                    var str = lib.skill.radiance_quanneng.info[current];
                                    if (player.storage.radiance_quanneng_used.contains(current)) str += "（本轮已使用）";
                                    dialog.addText(str);
                                };
                            },
                        },
                        trigger: {
                            global: 'roundStart',
                        },
                        filter: function(event, player) {
                            if (game.roundNumber <= 1) return false;
                            if (player.storage.radiance_quanneng.length == 0) return false;
                            return player.storage.radiance_quanneng_used.length < player.storage.radiance_quanneng.length;
                        },
                        info: {
                            draw: "其他角色不于摸牌阶段摸了至少两张牌后摸两张牌",
                            discard: "其他角色不于弃牌阶段弃牌后获得其一张手牌",
                            damage: "其他角色不因【杀】受到伤害后视为使用一张【杀】",
                            recover: "其他角色不于濒死状态回复后回复1点体力",
                        },
                        translate: {
                            draw: "摸牌",
                            discard: "拿牌",
                            damage: "出杀",
                            recover: "回复",
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            var list = player.storage.radiance_quanneng_used.slice(0);
                            if (list.length == 0) list = player.storage.radiance_quanneng.slice(0);
                            var choiceList = [],
                                choices = [];
                            for (var i = 0; i < list.length; i++) {
                                choiceList.push("一名角色" + lib.skill.radiance_quanneng.info[list[i]]);
                                choices.push(lib.skill.radiance_quanneng.translate[list[i]]);
                            };
                            event.list = list;
                            player.chooseControl(choices).set('choiceList', choiceList).set('ai', function(event, player) {
                                var list2 = ['recover', 'discard', 'draw', 'damage'];
                                for (var i = 0; i < list2.length; i++) {
                                    if (event.list.contains(list2[i])) return event.list.indexOf(list2[i]);
                                };
                                return 0;
                            });
                            'step 1'
                            var reverse = {
                                "摸牌": 'draw',
                                "拿牌": 'discard',
                                "出杀": 'damage',
                                "回复": 'recover',
                            };
                            var choice = reverse[result.control];
                            player.storage.radiance_quanneng.remove(choice);
                            player.storage.radiance_quanneng_disable.add(choice);
                            player.markSkill('radiance_quanneng');
                            game.log(player, "废除了", 'radiance_quanneng', "的", result.control, "选项");
                        },
                        global: ['radiance_quanneng_clear'],
                        group: ['radiance_quanneng_draw', 'radiance_quanneng_discard', 'radiance_quanneng_damage', 'radiance_quanneng_recover'],
                        subfrequent: ['draw', 'recover'],
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                silent: true,
                                lastDo: true,
                                priority: 666,
                                forced: true,
                                charlotte: true,
                                filter: function(event, player) {
                                    return Array.isArray(player.storage.radiance_quanneng_used);
                                },
                                content: function() {
                                    player.storage.radiance_quanneng_used.length = 0;
                                },
                            },
                            draw: {
                                trigger: {
                                    global: 'drawEnd',
                                },
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    if (player.storage.radiance_quanneng_disable.contains('draw')) return false;
                                    if (player.storage.radiance_quanneng_used.contains('draw')) return false;
                                    return event.num > 1 && !event.getParent('phaseDraw', true);
                                },
                                frequent: true,
                                prompt2: "其他角色不于摸牌阶段摸了至少两张牌后，你可以摸两张牌",
                                content: function() {
                                    player.storage.radiance_quanneng_used.add('draw');
                                    player.draw(2);
                                },
                            },
                            discard: {
                                trigger: {
                                    global: 'discardEnd',
                                },
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    if (player.storage.radiance_quanneng_disable.contains('discard')) return false;
                                    if (player.storage.radiance_quanneng_used.contains('discard')) return false;
                                    return event.cards.length > 0 && event.player.countCards('h') > 0 && !event.getParent('phaseDiscard', true);
                                },
                                check: function(event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                prompt2: "其他角色不于弃牌阶段弃牌后，你可以获得其一张手牌",
                                logTarget: 'player',
                                content: function() {
                                    player.storage.radiance_quanneng_used.add('discard');
                                    if (trigger.player != player && !trigger.player.isUnknown(player)) player.addExpose(0.1);
                                    player.gainPlayerCard(1, 'h', true, trigger.player);
                                },
                            },
                            damage: {
                                trigger: {
                                    global: 'damageEnd',
                                },
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    if (player.storage.radiance_quanneng_disable.contains('damage')) return false;
                                    if (player.storage.radiance_quanneng_used.contains('damage')) return false;
                                    return event.num > 0 && !(event.card && get.name(event.card, event.source) == 'sha') && player.hasUseTarget('sha');
                                },
                                check: function(event, player) {
                                    return game.hasPlayer(function(target) {
                                        return player.canUse('sha', target) && get.effect(target, {
                                            name: 'sha',
                                            isCard: true,
                                        }, player, player) > 0;
                                    });
                                },
                                prompt2: "其他角色不因【杀】受到伤害后，你可以视为使用一张【杀】",
                                direct: true,
                                content: function() {
                                    player.storage.radiance_quanneng_used.add('damage');
                                    var str = "###" + get.prompt('radiance_quanneng_damage') + "###其他角色不因【杀】受到伤害后，你可以视为使用一张【杀】";
                                    player.chooseUseTarget(str, {
                                        name: 'sha',
                                    }, false).set('logSkill', 'radiance_quanneng_damage');
                                },
                            },
                            recover: {
                                trigger: {
                                    global: 'recoverBegin',
                                },
                                filter: function(event, player) {
                                    if (event.player == player) return false;
                                    if (player.storage.radiance_quanneng_disable.contains('recover')) return false;
                                    if (player.storage.radiance_quanneng_used.contains('recover')) return false;
                                    return event.num > 0 && !event.getParent('dying', true) && player.isDamaged();
                                },
                                frequent: true,
                                prompt2: "其他角色不于濒死状态回复后，你可以回复1点体力",
                                content: function() {
                                    player.storage.radiance_quanneng_used.add('recover');
                                    player.recover();
                                },
                            },
                        },
                    },
                    "radiance_duotian": {
                        enable: 'phaseUse',
                        mark: true,
                        limited: true,
                        unique: true,
                        skillAnimation: 'legend',
                        animationColor: 'key',
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                return "牌堆数：" + ui.cardPile.childNodes.length + "<br>弃牌堆数：" + ui.discardPile.childNodes.length;
                            },
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_duotian != 'boolean') player.storage.radiance_duotian = false;
                        },
                        filter: function(event, player) {
                            if (!player.hasSkill('radiance_quanneng')) return false;
                            if (!player.storage.radiance_quanneng_disable.length) return false;
                            if (player.storage.radiance_duotian !== false) return false;
                            return ui.cardPile.childNodes.length <= ui.discardPile.childNodes.length;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_duotian');
                            player.removeSkill('radiance_quanneng');
                            player.addTempSkill('radiance_duotian_af');
                            player.node.avatar.setBackgroundImage("extension/星耀璨然/radiance_hv001_luchasiphaelFallen.jpg");
                            player.update();
                        },
                        ai: {
                            order: 1,
                            combo: 'radiance_quanneng',
                            result: {
                                player: function(player, skill) {
                                    if (!Array.isArray(player.storage.radiance_quanneng_disable)) return;
                                    if (player.storage.radiance_quanneng_disable.length > 2) return 10;
                                    if (player.hp <= 1) return 10;
                                    return -10;
                                },
                            },
                        },
                    },
                    "radiance_duotian_af": {
                        enable: ['chooseToUse'],
                        init: function(player) {
                            // player.storage.radiance_duotian_af = (player.storage.radiance_quanneng_disable || []).length;
                            player.storage.radiance_duotian_af = 0;
                            player.storage.radiance_duotian_afname = [];
                        },
                        mark: true,
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                if (player.storage.radiance_duotian_af >= game.dead.length + player.storage.radiance_quanneng_disable.length) return "夺天不能再使用牌";
                                dialog.addText("弃牌堆中的牌名以及弃牌堆中与牌堆中该牌的牌名数量之差");

                                var names = [];
                                for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                    var current = ui.discardPile.childNodes[i];
                                    names.add(current.name);
                                };
                                for (var i = 0; i < names.length; i++) {
                                    var name = names[i];
                                    dialog.addText(get.translation(name) + "：" + (player.storage.radiance_duotian_afname.contains(name) ? "已使用过" : lib.skill.radiance_duotian_af.countx(name)));
                                };
                                // dialog.addText();
                            },
                        },
                        filter: function(event, player) {
                            if (player.storage.radiance_duotian_af >= game.dead.length + player.storage.radiance_quanneng_disable.length) return false;
                            for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                var current = ui.discardPile.childNodes[i];
                                if (!player.storage.radiance_duotian_afname.contains(current.name)) return true;
                            };
                            return false;
                        },
                        charlotte: true,
                        locked: false,
                        countx: function(name, player) {
                            if (get.itemtype(player) != player) player = _status.event.player;
                            if (get.itemtype(name) == 'card') name = card.name;
                            var num = 0;
                            for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                var current = ui.discardPile.childNodes[i];
                                if (current.name == name) num++;
                            };
                            for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
                                var current = ui.cardPile.childNodes[i];
                                if (current.name == name) num--;
                            };
                            return num;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var dialog = ui.create.dialog("夺天：选择要用的牌"),
                                    list = [];
                                for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                    var current = ui.discardPile.childNodes[i];
                                    list.push(current);
                                };
                                dialog.add(list);
                                return dialog;
                            },
                            filter: function(button, player) {
                                if (player.storage.radiance_duotian_afname.contains(button.link.name)) return false;
                                return _status.event.getParent().filterCard(button.link, player, _status.event.getParent());
                            },
                            check: function(button) {
                                var trigger = _status.event.getParent();
                                var card = button.link;
                                var player = _status.event.player;

                                if (trigger.type == 'phase') {
                                    if (player.getUseValue(card) > 0) {
                                        if (player.storage.radiance_duotian_af < game.dead.length + player.storage.radiance_quanneng_disable.length - 1 && lib.skill.radiance_duotian_af.countx(card) <= 0) return get.order(card) / 20;
                                        return get.order(card);
                                    };
                                } else if (trigger.ai) {
                                    var tmp = _status.event;
                                    _status.event = trigger;
                                    var result = trigger.ai(card, player, trigger);
                                    _status.event = tmp;
                                    return result;
                                } else if (_status.event.ai1) {
                                    var tmp = _status.event;
                                    _status.event = trigger;
                                    var result = event.ai1(card, player, trigger);
                                    _status.event = tmp;
                                    return result;
                                } else if (['shan', 'wuxie'].contains(get.name(card, player))) {
                                    return 1;
                                };
                                return -1;
                            },
                            backup: function(links, player) {
                                var card = links[0];
                                return {
                                    filterCard: function(card) {
                                        return false;
                                    },
                                    selectCard: -1,
                                    viewAs: get.autoViewAs(card, links),
                                    prompt: '选择' + get.translation(card) + '的目标',
                                    precontent: function() {
                                        delete result.skill;
                                        var name = event.result.card.name;
                                        event.result.cards = event.result.card.cards;
                                        event.result.card = get.autoViewAs(event.result.cards[0]);
                                        // event.result.card.name = name;
                                        player.storage.radiance_duotian_afname.add(name);

                                        var cards = [];
                                        for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                            var current = ui.discardPile.childNodes[i];
                                            if (current.name == name) cards.push(current);
                                        };
                                        cards.removeArray(event.result.cards);
                                        var num = 0,
                                            cards2 = [];
                                        while (ui.cardPile.childNodes.length > 0) {
                                            var current = ui.cardPile.removeChild(ui.cardPile.firstChild)
                                            cards2.push(current);
                                            if (current.name == name) num++;
                                        };
                                        player.storage.radiance_duotian_af++;
                                        if (cards.length < num) {
                                            player.storage.radiance_duotian_af = 666;
                                        };
                                        if (player.storage.radiance_duotian_af >= game.dead.length + player.storage.radiance_quanneng_disable.length) {
                                            player.unmarkSkill('radiance_duotian_af');
                                        } else {
                                            player.markSkill('radiance_duotian_af');
                                        };
                                        cards = cards.concat(cards2);
                                        cards.randomSort();
                                        for (var i = 0; i < cards.length; i++) {
                                            ui.cardPile.appendChild(cards[i]);
                                        };
                                        game.updateRoundNumber();
                                    },
                                };
                            },
                            prompt: function(links, player) {
                                return '选择' + get.translation(links[0]) + '的目标';
                            },
                        },
                        hiddenCard: function(player, name) {
                            if (player.storage.radiance_duotian_afname.contains(name) || player.storage.radiance_duotian_af >= game.dead.length + player.storage.radiance_quanneng_disable.length) return false;
                            if (name == 'wuxie') {
                                for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                    var current = ui.discardPile.childNodes[i];
                                    if (current.name == 'wuxie') return true;
                                };
                            };
                            return false;
                        },
                        ai: {
                            order: 10,
                            result: {
                                player: function(player) {
                                    var players = game.filterPlayer();
                                    return 1;
                                },
                            },
                            save: true,
                            respondTao: true,
                            respondShan: true,
                            respondSha: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.storage.radiance_duotian_af >= game.dead.length + player.storage.radiance_quanneng_disable.length) return false;
                                var names = [];
                                for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                    var current = ui.discardPile.childNodes[i];
                                    names.add(current.name);
                                };
                                names.removeArray(player.storage.radiance_duotian_afname);
                                if (tag == 'respondSha') {
                                    if (!names.contains('sha')) return false;
                                }
                                if (tag == 'respondShan') {
                                    if (!names.contains('shan')) return false;
                                }
                                if (tag == 'respondTao') {
                                    if (!names.contains('tao')) return false;
                                }
                                if (tag == 'save') {
                                    if (!names.contains('tao') && (!names.contains('jiu') || arg != player)) return false;
                                }
                            },
                        },
                    },
                    "radiance_huiguang": {
                        trigger: {
                            player: 'phaseZhunbeiBegin'
                        },
                        direct: true,
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_huiguang')).set('ai', function(target) {
                                var base = (target.isTurnedOver() || target.hasJudge('lebu')) ? 0.5 : 1;
                                var is = (target == player) ? 2 : 0;
                                return base * (Math.max(get.attitude(player, target), 0) + is) / (target.hp * 2 + target.countCards('h') + 1);
                            });
                            'step 1'
                            if (result.targets.length > 0) {
                                event.target = result.targets[0];
                                player.line(event.target, 'green');
                                player.logSkill('radiance_huiguang', event.target);
                                game.countPlayer(function(current) {
                                    current.removeSkill('radiance_huiguang_af');
                                });
                                player.chooseControl(['〇', '一', '二']).set('prompt', '令该角色摸至多两张牌').set('ai', function() {
                                    if (get.attitude(player, event.target) < 0) return 0;
                                    return 2;
                                });
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.index && result.control != 'cancel2') {
                                event.target.addTempSkill('radiance_huiguang_af', {
                                    player: 'phaseAfter',
                                });
                                var num = result.index;
                                if (num > 0) {
                                    event.target.draw(num);
                                };
                            };
                        },
                    },
                    "radiance_huiguang_af": {
                        forced: true,
                        charlotte: true,
                        firstDo: true,
                        popup: false,
                        trigger: {
                            global: 'damageBefore',
                        },
                        mark: true,
                        intro: {
                            content: '成为全场的伤害来源',
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            trigger.source = player;
                        },
                        mod: {
                            globalFrom: function(from, to, distance) {
                                return -Infinity;
                            }
                        },
                    },
                    "radiance_shengfa": {
                        enable: "phaseUse",
                        filterCard: true,
                        position: "h",
                        filter: function(event, player) {
                            var num = player.getStat().skill.radiance_shengfa;
                            if (num) {
                                num += 1;
                            } else {
                                num = 1;
                            };
                            return player.countCards('h') >= num;
                        },
                        check: function(card) {
                            if (ui.selected.cards.length >= 2) {
                                return 4 - get.alteredValue(card);
                            }
                            return 6 - get.alteredValue(card);
                        },
                        selectCard: function(card) {
                            var num = _status.event.player.getStat().skill.radiance_shengfa;
                            if (num) return num + 1;
                            return 1;
                        },
                        filterTarget: function(card, player, target) {
                            if (player == target) return false;
                            return player.inRange(target);
                        },
                        content: function() {
                            target.damage('nocard');
                        },
                        ai: {
                            order: function(item, player) {
                                var num = player.getStat().skill.radiance_shengfa;
                                if (!num) {
                                    return 7;
                                } else if (num == 1) {
                                    return 3;
                                } else if (num == 2) {
                                    return 1.5
                                }
                                return 1;
                            },
                            result: {
                                target: function(player, target) {
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    var num = player.getStat().skill.radiance_shengfa;
                                    if (num) {
                                        num++;
                                    } else {
                                        num = 1;
                                    };
                                    if (num > 3) return 0;
                                    if (num == 3) return get.damageEffect(target, player, target);
                                    return get.damageEffect(target, player, target);
                                },
                            },
                        },
                    },
                    "radiance_yunming": {
                        trigger: {
                            global: "judge",
                        },
                        direct: true,
                        filter: function(event, player) {
                            return player.countCards('hes', {
                                color: 'black'
                            }) > 0;
                        },
                        content: function() {
                            'step 0'
                            var str = get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' + get.translation(trigger.player.judging[0]) + '，' + get.prompt('radiance_yunming');
                            player.chooseCard(str, 'hes', function(card) {
                                return (get.color(card) == 'black');
                            }).set('ai', function(card) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.player;
                                var judging = _status.event.judging;
                                var max = 0;
                                var min = 0;
                                var suits = ['spade', 'heart', 'diamond', 'club'];

                                for (var i = 1; i < 14; i++) {
                                    for (var j = 0; j < 4; j++) {
                                        var card2 = {
                                            number: i,
                                            suit: suits[j],
                                            name: judging.name,
                                        };
                                        max = Math.max(max, trigger.judge(card2));
                                        min = Math.max(min, trigger.judge(card2));
                                    }
                                }

                                var attitude = get.attitude(player, trigger.player);
                                if (attitude > 0) {
                                    if (max > trigger.judge(judging) + 0.1) return 5 - get.alteredValue(card);
                                } else if (attitude < 0) {
                                    if (min < trigger.judge(judging) - 0.1) return 5 - get.alteredValue(card);
                                };
                                return 0;
                            }).set('judging', trigger.player.judging[0]);
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_yunming', trigger.player);
                                player.respond(result.cards, 'highlight', 'radiance_yunming', 'noOrdering');
                            } else {
                                event.finish();
                            }
                            'step 2'
                            var card = trigger.player.judging[0];
                            var judge0 = trigger.judge(card);
                            var judge1 = 0;
                            var choice = '4';
                            var attitude = get.attitude(player, trigger.player);
                            var list = [];
                            event.suitx = ['heart', 'diamond', 'club', 'spade'];
                            event.suitchoice = event.suitx.randomGet();
                            for (var x = 0; x < 4; x++) {
                                for (var i = 1; i < 14; i++) {
                                    list.add(i);
                                    var judge2 = (trigger.judge({
                                        name: get.name(card),
                                        suit: event.suitx[x],
                                        number: i,
                                        nature: get.nature(card),
                                    }) - judge0) * attitude;
                                    if (judge2 > judge1) {
                                        choice = i;
                                        event.suitchoice = event.suitx[x];
                                        judge1 = judge2;
                                    }
                                }
                            }
                            player.chooseControl(list).set('ai', function() {
                                return _status.event.choice;
                            }).set('choice', choice).prompt = "运命：选择一个点数";
                            'step 3'
                            game.log(trigger.player, '判定结果点数为', '#g' + result.control);
                            player.popup(result.control, 'fire');
                            if (!trigger.fixedResult) trigger.fixedResult = {};
                            trigger.fixedResult.number = result.control;
                            'step 4'
                            player.chooseControl(event.suitx).set('ai', function() {
                                return _status.event.choice;
                            }).set('choice', event.suitchoice).prompt = "运命：选择一个花色";
                            'step 5'
                            game.log(trigger.player, '判定结果花色为', '#g' + result.control);
                            player.popup(result.control, 'fire');
                            if (!trigger.fixedResult) trigger.fixedResult = {};
                            trigger.fixedResult.suit = result.control;
                            if (result.control == 'club' || result.control == 'spade') {
                                trigger.fixedResult.color = 'black';
                            } else if (result.control == 'heart' || result.control == 'diamond') {
                                trigger.fixedResult.color = 'red';
                            }
                        },
                        ai: {
                            rejudge: true,
                            tag: {
                                rejudge: 1
                            }
                        },
                    },
                    "radiance_tianze": {
                        enable: "phaseUse",
                        usable: 1,
                        filter: function(event, player) {
                            return true;
                        },
                        filterTarget: function(card, player, target) {
                            return target == player || target == player.storage.radiance_tianze;
                        },
                        filterCard: function(card, player) {
                            return true;
                        },
                        prompt: "选择起点角色，从其开始的一个方向的所有角色需依次按点数递增弃牌，且你可以先弃一张作为起始点数",
                        position: 'h',
                        selectCard: [0, 1],
                        check: function(card) {
                            var player = _status.event.player;
                            if (get.attitude(player, player.getPrevious()) > 0 && get.attitude(player, player.getNext()) > 0) return 0;
                            return (3 - get.value(card));
                        },
                        content: function() {
                            'step 0'
                            delete player.storage.radiance_tianze;
                            event.count = 0;
                            event.num = 0;
                            if (cards.length > 0) event.num = get.number(cards[0]);
                            if (target) {
                                event.start = target;
                            } else {
                                event.start = player;
                            };
                            event.cardsx = [];
                            event.current = event.start || player;
                            event.getNext = function() {
                                if (event.type == -1) return event.current.getPrevious();
                                return event.current.getNext();
                            };
                            player.chooseControl("顺时针（逆序）", "逆时针（顺序）").set('ai', function(event, player) {
                                var targets = [player];
                                next = event.start.getNext()
                                previous = event.start.getPrevious();
                                while (!targets.contains(next) && !targets.contains(previous)) {
                                    if (get.attitude(player, previous) < 0) return 0;
                                    if (get.attitude(player, next) < 0) return 1;
                                    if (get.attitude(player, next) > 0 && next.countCards('h') == 0) return 0;
                                    if (get.attitude(player, previous) > 0 && previous.countCards('h') == 0) return 1;
                                    targets.push(next);
                                    targets.push(previous);
                                    next = next.getNext();
                                    previous = previous.getPrevious();
                                };
                                return 0;
                            });
                            'step 1'
                            event.type = -1 + result.index * 2;
                            if (event.start == player) event.current = event.getNext();
                            'step 2'
                            var str = '弃置一张';
                            str += event.num > 0 ? '点数大于' + event.num + '的' : '';
                            str += '手牌'
                            // str += event.current == player ? '' : '，不弃置可能会受到伤害。';
                            player.line(event.current);
                            if (event.current.countCards('h', function(card) {
                                    return get.number(card) > event.num && lib.filter.cardDiscardable(card, event.current);
                                })) {
                                event.current.chooseToDiscard('h', true, 1, str, function(card) {
                                    return get.number(card) > _status.event.getParent().num;
                                }).set('ai', function(card) {
                                    var event = _status.event.getParent();
                                    _status.event.type = event.type;

                                    if (event.current.hasSkillTag('nodamage')) return 0;
                                    if (get.number(card) <= event.num) return 0;

                                    if (event.getNext() == event.player) {
                                        if (get.attitude(event.current, event.player) > 0) return 0;
                                        return 100 - get.value(card);
                                    };
                                    var num = get.attitude(event.current, event.getNext()) > 0 ? 14 - get.number(card) : get.number(card);
                                    return num * num / (Math.max(get.value(card), 0.5));
                                });
                            } else {
                                event._result = {
                                    bool: false,
                                    cards: [],
                                };
                            };
                            'step 3'
                            if (result.bool && result.cards.length > 0) {
                                event.current.chooseBool("是否令" + get.translation(player) + "摸一张牌").set('choice', get.attitude(event.current, player) > 0);
                                event.num = get.number(result.cards[0]);
                                event.cardsx.add(result.cards[0]);
                                event.count++;
                            } else {
                                event.current.showHandcards();
                                event.goto(5);
                            };
                            'step 4'
                            if (result.bool) {
                                player.draw();
                            };
                            game.delay(0.9);
                            event.current = event.getNext();
                            if (event.current && event.current !== player) {
                                event.goto(2);
                            };
                            'step 5'
                            // player.draw(event.count);
                            event.cardsx = event.cardsx.filterInD('cod');
                            var list = ["伤害", "拿牌", 'cancel2'];
                            var str1 = "对" + get.translation(event.current) + "造成1点伤害";
                            var str2 = "获得" + get.translation(event.cardsx);

                            if (event.cardsx.length < 1) {
                                str2 = "没有可以获得的牌";
                                list.remove("拿牌");
                            };
                            var choiceList = [str1, str2];
                            if (event.current == player) {
                                choiceList.remove(str1);
                                list.remove("伤害");
                            };
                            if (list.length <= 1) {
                                event.finish();
                                return;
                            };
                            player.chooseControl(list).set('ai', function(event, player) {
                                var val = 0.001;
                                for (var i = 0; i < event.cardsx.length; i++) {
                                    val += player.getUseValue(event.cardsx[i]);
                                };
                                var effect = get.damageEffect(event.current, player, player);
                                if (val > effect) return 1;
                                if (effect > 0) return 0;
                                if (val >= 0) return 1;
                                if (get.value(event.cardsx, player) >= 0) return 1;
                                return 'cancel2';
                            }).set('choiceList', choiceList);
                            'step 6'
                            if (result.index == 0) {
                                event.current.damage(1, player, 'nocard');
                                player.storage.radiance_tianze = event.current;
                            } else if (result.index == 1 && event.cardsx.filterInD('cod').length > 0) {
                                player.gain(event.cardsx, 'gain2', 'log');
                            };
                        },
                        ai: {
                            order: 13,
                            result: {
                                player: function(player, target) {
                                    var next = target.next;
                                    var next2 = next.next;
                                    if (next == player || next2 == player) return 1;
                                    if (target != player && get.attitude(target, player) > 0) return 0;
                                    var val1 = 1;
                                    if (get.attitude(player, next) < 0) {
                                        if (next.countCards('h') <= 1) val1++;
                                        if (get.attitude(player, next2) < 0) val1++;
                                    };
                                    var previous = target.previous;
                                    var previous2 = previous.previous;
                                    var val2 = 1;
                                    if (get.attitude(player, previous) < 0) {
                                        if (previous.countCards('h') <= 1) val2++;
                                        if (get.attitude(player, previous2) < 0) val2++;
                                    };
                                    if (target != player) {
                                        val1++;
                                        val2++;
                                    };
                                    return Math.max(val1, val2);
                                },
                            },
                        },
                    },
                    "radiance_tianxuan": {
                        trigger: {
                            global: "judgeBefore",
                        },
                        filter: function(event, player) {
                            if (event.player != player) return !player.hasSkill('radiance_tianxuan_used');
                            return true;
                        },
                        check: function(event, player) {
                            if (event.player == player) return true;
                            if (get.attitude(player, event.player) == 0) return;
                            if (event.card) {
                                if (event.card.name == 'shandian') {
                                    if (get.attitude(player, event.player) < 0) {
                                        var card = get.cardPile(function(cardx) {
                                            return get.suit(cardx) == 'spade';
                                        });
                                        if (card && get.number(card, event.player) < 10 && get.number(card, event.player) > 1) return true;
                                    } else if (get.attitude(player, event.player) > 1) {
                                        var card = get.cardPile(function(cardx) {
                                            return true;
                                        });
                                        if (card && get.number(card, event.player) < 10 && get.number(card, event.player) > 1 && get.suit(card) == 'spade') return true;
                                    };
                                } else if (event.card.name == 'lebu') {
                                    if (get.attitude(player, event.player) > 1) {
                                        var card = get.cardPile(function(cardx) {
                                            return true;
                                        });
                                        if (card && get.suit(card) != 'heart') return true;
                                    };
                                } else if (event.card.name == 'bingliang') {
                                    if (get.attitude(player, event.player) > 1) {
                                        var card = get.cardPile(function(cardx) {
                                            return true;
                                        });
                                        if (card && get.suit(card) != 'club') return true;
                                    };
                                };
                            } else if (event.skill) {
                                if (event.skill == 'radiance_xianyue_add') {
                                    if (get.damageEffect(event.player, event.source || player, player, event.nature) > 0 && event.player.hp >= event.num + 1 && !event.player.hasSkillTag('noextra')) return true;
                                } else if (event.skill == 'radiance_xianyue_minus') {
                                    if (get.damageEffect(event.player, event.source || player, player, event.nature) < 0 && event.player.hp <= event.num) return true;
                                };
                            };
                            return false;
                        },
                        logTarget: function(event, player) {
                            if (event.player != player) return event.player;
                            return;
                        },
                        prompt2: function(event, player) {
                            var str = "你可以随机观看四种花色的牌各一张，选择其中一张牌并获得，此次判定结果视为此牌。";
                            if (event.player != player) return "每轮限一次，其他角色进行判定前，" + str;
                            return "当你进行判定前，" + str;
                        },
                        content: function() {
                            'step 0'
                            var cards = [];
                            var suits = ['spade', 'heart', 'club', 'diamond'];
                            for (var i = 0; i < 4; i++) {
                                var card = get.cardPile(function(cardx) {
                                    return get.suit(cardx) == suits[i];
                                });
                                if (card) cards.push(card);
                            };
                            if (!cards.length) {
                                event.finish();
                                return;
                            };
                            player.chooseCardButton(1, true, cards, "获得一张牌作为" + (trigger.judgestr || "") + "的判定结果").set('ai', function(button) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.player;
                                var att_cur = get.sgn(get.attitude(player, trigger.player));
                                var result = trigger.judge(button.link);
                                return att_cur * 1000 * result + get.useful(button.link);
                            });
                            'step 1'
                            if (result.bool && result.links) {
                                event.card = result.links[0];
                                player.gain(event.card, 'gain2');
                                if (trigger.player != player) player.addTempSkill('radiance_tianxuan_used', 'roundStart');
                            } else {
                                event.finish();
                            }
                            'step 2'
                            var str = get.translation(trigger.player) + "的" + (trigger.judgestr || "") + "判定";
                            event.videoId = lib.status.videoId++;
                            event.dialog = ui.create.dialog(str);
                            event.dialog.classList.add('center');
                            event.dialog.videoId = event.videoId;
                            game.addVideo('judge1', trigger.player, [get.cardInfo(card), str, event.videoId]);

                            var node;
                            if (game.chess) {
                                node = card.copy('thrown', 'center', ui.arena).animate('start');
                            } else {
                                node = player.$throwordered(card.copy(), true);
                            }
                            node.classList.add('thrownhighlight');
                            ui.arena.classList.add('thrownhighlight');

                            trigger.finish();
                            trigger._triggered = 2;
                            trigger.result = {
                                card: card,
                                judge: trigger.judge(card),
                                node: node,
                                number: get.number(card),
                                suit: get.suit(card),
                                color: get.color(card),
                            };
                            if (trigger.result.judge > 0) {
                                trigger.result.bool = true;
                                trigger.player.popup('洗具');
                            }
                            if (trigger.result.judge < 0) {
                                trigger.result.bool = false;
                                trigger.player.popup('杯具');
                            }
                            game.log(trigger.player, '的判定结果为', card);
                            trigger.direct = true;
                            game.delay(2);
                            'step 3'
                            ui.arena.classList.remove('thrownhighlight');
                            event.dialog.close();
                            game.addVideo('judge2', null, event.videoId);
                            ui.clear();
                            var card = event.card;
                            // trigger.position.appendChild(card);
                            trigger.result.node.delete();
                        },
                        ai: {
                            threaten: 1.5,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.name(card) == 'shandian') return 5;
                                    if (get.type(card) == 'delay') return 0;
                                    if (get.tag(card, 'respondShan') && target.getEquip('bagua') && !target.hasSkillTag('unequip2') &&
                                        !player.hasSkillTag('unequip') && !player.hasSkillTag('ignoreSkill') &&
                                        !player.hasSkillTag('directHit_ai')) return [-1, 0.5];
                                },
                            },
                        },
                        subSkill: {
                            used: {
                                inherit: 'radiance_used',
                                marktext: "璇",
                                intro: {
                                    content: "本轮已为其他角色改判过",
                                },
                            },
                        },
                    },
                    "radiance_xianyue": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        init: function(player, skill) {
                            if (!Array.isArray(player.storage.radiance_xianyue_add)) player.storage.radiance_xianyue_add = [];
                            if (!Array.isArray(player.storage.radiance_xianyue_minus)) player.storage.radiance_xianyue_minus = [];
                        },
                        intro: {
                            name: "仙乐",
                            mark: function(dialog, content, player, storage, skill) {
                                if (player.storage.radiance_xianyue_add && player.storage.radiance_xianyue_add.length > 0) {
                                    dialog.addText("已对下列角色发动过仙乐①");
                                    dialog.addSmall(player.storage.radiance_xianyue_add);
                                };
                                if (player.storage.radiance_xianyue_minus && player.storage.radiance_xianyue_minus.length > 0) {
                                    dialog.addText("已对下列角色发动过仙乐②");
                                    dialog.addSmall(player.storage.radiance_xianyue_minus);
                                };
                            },
                        },
                        filter: function(event, player) {
                            if (game.roundNumber == 1) return false;
                            return player.storage.radiance_xianyue_add.length > 0 || player.storage.radiance_xianyue_minus.length > 0;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var dialog = ui.create.dialog("是否发动【" + get.skillTranslation(_status.event.name, player) + "③】？", 'hidden');
                            dialog.addText("出牌阶段开始时，你可以重置仙乐的记录，要翻面并清除所有记录吗？");
                            dialog.addText("若选否则可以选择重置一名角色的记录");
                            if (player.storage.radiance_xianyue_add && player.storage.radiance_xianyue_add.length > 0) {
                                dialog.addText("已对下列角色发动过仙乐①");
                                dialog.addSmall(player.storage.radiance_xianyue_add);
                            };
                            if (player.storage.radiance_xianyue_minus && player.storage.radiance_xianyue_minus.length > 0) {
                                dialog.addText("已对下列角色发动过仙乐②");
                                dialog.addSmall(player.storage.radiance_xianyue_minus);
                            };
                            player.chooseBool(dialog).set('ai', function(event, player) {
                                if (player.isTurnedOver() || player.hasSkillTag('noturn')) return true;
                                var friends = player.getFriends(true);
                                if (player.identity == 'nei') {
                                    friends = game.filterPlayer(function(target) {
                                        return get.attitude(player, target) > 0;
                                    });
                                    if (get.population('fan') == 0) friends.remove(get.zhu(player));
                                };
                                var enemies = game.players.slice(0).removeArray(friends);
                                var list = player.storage.radiance_xianyue_add.concat(player.storage.radiance_xianyue_minus);
                                var count = 0;
                                for (var i = 0; i < list.length; i++) {
                                    if (get.attitude(player, list[i]) > 0) count++;
                                };
                                if (friends.length == 1) {
                                    return false;
                                } else if (friends.length > enemies.length) {
                                    return count > friends.length;
                                } else if (friends.length < enemies.length) {
                                    return count >= friends.length * 2 - 1;
                                };
                                return count > friends.length + 1;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_xianyue');
                                game.log(player, "选择了重置所有记录");
                                player.turnOver();
                                player.storage.radiance_xianyue_add.length = 0;
                                player.storage.radiance_xianyue_minus.length = 0;
                                player.unmarkSkill('radiance_xianyue');
                                event.finish();
                            } else {
                                var dialog = ui.create.dialog("是否重置一名角色的记录？", 'hidden');
                                if (player.storage.radiance_xianyue_add && player.storage.radiance_xianyue_add.length > 0) {
                                    dialog.addText("已对下列角色发动过仙乐①");
                                    dialog.addSmall(player.storage.radiance_xianyue_add);
                                };
                                if (player.storage.radiance_xianyue_minus && player.storage.radiance_xianyue_minus.length > 0) {
                                    dialog.addText("已对下列角色发动过仙乐②");
                                    dialog.addSmall(player.storage.radiance_xianyue_minus);
                                };
                                player.chooseTarget(1, dialog, function(card, player, target) {
                                    return player.storage.radiance_xianyue_add.contains(target) || player.storage.radiance_xianyue_minus.contains(target);
                                }).set('ai', function(target) {
                                    var player = _status.event.player;
                                    var num1 = 0,
                                        num2 = 0;
                                    if (player.storage.radiance_xianyue_add.contains(target)) num1 = 0.25 * (1 + target.countCards('h'));
                                    if (player.storage.radiance_xianyue_minus.contains(target)) num2 = 3 / (1 + target.hp);
                                    return (num1 + num2) * get.attitude(player, target);
                                });
                            };
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('radiance_xianyue');
                                game.log(player, "重置了", target, "的记录");
                                player.storage.radiance_xianyue_add.remove(target);
                                player.storage.radiance_xianyue_minus.remove(target);
                                if (player.storage.radiance_xianyue_add.length + player.storage.radiance_xianyue_minus.length == 0) player.unmarkSkill('radiance_xianyue');
                            };
                        },
                        group: ['radiance_xianyue_add', 'radiance_xianyue_minus'],
                        subSkill: {
                            extra: {
                                charlotte: true,
                            },
                        },
                    },
                    "radiance_xianyue_add": {
                        trigger: {
                            global: 'damageBegin1'
                        },
                        filter: function(event, player) {
                            if (!event.source || !event.source.isIn() || event.num < 1) return false;
                            return !player.storage.radiance_xianyue_add.contains(event.source);
                        },
                        check: function(event, player) {
                            if (event.player.hasSkillTag('noextra') || event.player.getEquip('baiyin')) return true;
                            return get.damageEffect(event.player, event.source, player, event.nature) > 0 && get.attitude(player, event.player) <= 0;
                        },
                        logTarget: 'source',
                        prompt2: function(event, player) {
                            return get.translation(event.source) + "即将对" + get.translation(event.player) + "造成" + event.num + "点伤害，是否令其进行判定？若为黑色此伤害+1，否则你摸牌。";
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_xianyue_add.add(trigger.source);
                            player.markSkill('radiance_xianyue');
                            'step 1'
                            trigger.source.judge(function(card) {
                                var trigger = _status.event.getTrigger();
                                if (get.color(card) == 'black') {
                                    if (trigger.player.hasSkillTag('noextra') || trigger.player.getEquip('baiyin')) return -1;
                                    return 1;
                                };
                                return 0;
                            }, 'radiance_xianyue_add');
                            'step 2'
                            if (result.color == 'black') {
                                trigger.num++;
                            } else {
                                var num = 1;
                                if (trigger.source == player) num++;
                                player.draw(num, player);
                            };
                        },
                    },
                    "radiance_xianyue_minus": {
                        trigger: {
                            global: 'damageBegin3'
                        },
                        filter: function(event, player) {
                            if (!event.player || !event.player.isIn() || event.num < 1) return false;
                            return !player.storage.radiance_xianyue_minus.contains(event.player);
                        },
                        check: function(event, player) {
                            return get.damageEffect(event.player, event.source, player, event.nature) < 0 && get.attitude(player, event.player) > 0;
                        },
                        logTarget: 'player',
                        prompt2: function(event, player) {
                            return get.translation(event.player) + "即将受到" + (event.source ? get.translation(event.source) + "造成的" : "") + event.num + "点伤害，是否令其进行判定？若为红色此伤害-1，否则你摸牌。";
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_xianyue_minus.add(trigger.player);
                            player.markSkill('radiance_xianyue');
                            'step 1'
                            trigger.player.judge(function(card) {
                                if (get.color(card) == 'red') return 1;
                                return 0;
                            }, 'radiance_xianyue_minus');
                            'step 2'
                            if (result.color == 'red') {
                                trigger.num--;
                            } else {
                                var num = 1;
                                if (trigger.player == player) num++;
                                player.draw(num, player);
                            };
                        },
                    },


                    "radiance_xianyi": {
                        trigger: {
                            player: ['changeHp', 'dyingBegin'],
                        },
                        init: function(player) {
                            if (!Array.isArray(player.storage.radiance_xianyi)) player.storage.radiance_xianyi = [];
                        },
                        filter: function(event, player) {
                            return !player.storage.radiance_xianyi.contains(player.hp);
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            player.storage.radiance_xianyi.add(player.hp);
                            'step 1'
                            player.draw(3);
                            'step 2'
                            player.recover();
                        },
                        action_tag: {
                            overall: 3,
                            limited: 0.5,
                            recover: 1,
                            draw: 1,
                        },
                    },
                    "radiance_quhai": {
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_quhai_used')) return false;
                            return game.countPlayer(function(target) {
                                return target.countCards('e') > 0 && player.getHistory('custom', function(evt) {
                                    return evt.radiance_quhai == target;
                                }).length == 0;
                            }) > 0;
                        },
                        filterTarget: function(card, player, target) {
                            return target.countCards('e') > 0 && player.getHistory('custom', function(evt) {
                                return evt.radiance_quhai == target;
                            }).length == 0;
                        },
                        content: function() {
                            'step 0'
                            event.num = player.getStat().skill.radiance_quhai;
                            if (!event.num) event.num = 0;
                            if (event.num >= 4) event.num = 4;
                            if (event.num > 0) event.num--;
                            player.getHistory('custom').push({
                                radiance_quhai: target,
                            });
                            target.chooseBool("去害：是否失去1点体力？不失去体力会被弃置装备牌").set('ai', function(event, player) {
                                var source = event.player;
                                if (get.attitude(player, source) > 0 && player.getEquip(1) && event.num > 1) return false;
                                if (player.hp <= 1) {
                                    return false;
                                };
                                if (player.countCards('e', {
                                        subtype: ['equip2', 'equip3', 'equip4', 'equip5', 'equip6'],
                                    } == 0) && player.getEquip(1)) {
                                    return 3.5 + event.num - get.value(player.getEquip(1)) < 0;
                                };
                                var es = player.getCards('e');
                                var max = es[0];
                                for (var i = 0; i < es.length; i++) {
                                    if (get.value(es[i]) > get.value(max)) max = es[i];
                                };
                                if (get.subtype(max) == 'equip2') return get.value(max) > 3;
                                if (get.subtype(max) == 'equip3') return get.value(max) > 6;
                                return get.value(max) > 5;
                            });
                            'step 1'
                            if (result.bool) {
                                target.loseHp(1);
                                player.addTempSkill('radiance_quhai_used', 'phaseUseEnd');
                                event.finish();
                            } else {
                                player.discardPlayerCard(target, 'e', true).set('ai', function(button) {
                                    var card = button.link;
                                    var target = get.owner(card);
                                    var att = get.attitude(_status.event.player, target);
                                    var val = get.value(card, target);
                                    if (get.subtype(card) == 'equip1') {
                                        if (target == player) {
                                            var count = player.countCards('hes', {
                                                subtype: 'equip1',
                                            });
                                            return 3 * (_status.event.getParent().num + count - 1) - val;
                                        };
                                        if (att > 1) return 3.5 * _status.event.getParent().num - val;
                                        return 1 - _status.event.getParent().num + val;
                                    };
                                    if (att > 1) return -val;
                                    return val;
                                });
                            };
                            'step 2'
                            if (result.cards && result.cards.length) {
                                var card = result.cards[0];
                                if (get.subtype(card) == 'equip1') {
                                    target.draw(event.num);
                                };
                            };
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                            },
                        },
                        ai: {
                            order: function(item, player) {
                                var num = player.getStat().skill.radiance_quhai;
                                if (!num) return 10;
                                return 3;
                            },
                            result: {
                                target: function(player, target) {
                                    var num = player.getStat().skill.radiance_quhai;
                                    if (!num) num = 0;
                                    if (num > 3) num = 3;
                                    if (target == player) {
                                        num += player.countCards('hes', {
                                            subtype: 'equip1',
                                        }) - 1;
                                    }
                                    var max = 0,
                                        min = 0;
                                    if (target.getEquip(1)) {
                                        max = Math.max(2.5 * num - get.value(target.getEquip(1), target), max);
                                    };
                                    var es = target.getCards('e');
                                    for (var i = 0; i < es.length; i++) {
                                        if (get.value(es[i], target) > 0) min = Math.min(-get.value(es[i], target), min);
                                        if (get.value(es[i], target) < 0) max = Math.max(-get.value(es[i], target), max);
                                    };
                                    if (get.attitude(player, target) > 1) return max;
                                    return min;
                                },
                            },
                        },
                    },
                    "radiance_heyu": {
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, content, player) {
                                var cards = player.getExpansions('radiance_heyu');
                                dialog.add(cards);
                            },
                            onunmark: function(storage, player) {
                                var cards = player.getExpansions('radiance_heyu');
                                if (cards.length) {
                                    player.$throw(cards, 1000);
                                    game.cardsDiscard(cards);
                                    game.log(cards, '被置入了弃牌堆');
                                };
                            },
                        },
                        marktext: "鹤",
                        onremove: function(player) {
                            var cards = player.getExpansions('radiance_heyu');
                            if (cards.length) {
                                player.$throw(cards, 1000);
                                game.cardsDiscard(cards);
                                game.log(cards, '被置入了弃牌堆');
                            };
                        },
                        trigger: {
                            global: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.getExpansions('radiance_heyu').length > 3) return false;
                            if (player.hp < 1) return false;
                            if (event.targets.length > 1) return false;

                            var card = event.card;
                            if (get.name(card) == 'sha' || get.type(card) == 'trick') return true;
                            return false;
                        },
                        logTarget: 'target',
                        prompt2: function(event, player) {
                            return "失去1点体力并无效" + get.translation(event.player) + "使用的【" + get.translation(event.card) + "】";
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(event.target)) return false;

                            if (get.effect(event.target, event.card, event.player, player) < 0 && (event.target.hp <= player.hp || (get.nature(event.card) && event.target.isLinked() && player.isLinked()))) {
                                if (get.tag(event.card, 'respondSha')) {
                                    if (event.target.countCards('h', {
                                            name: 'sha'
                                        }) == 0) {
                                        return true;
                                    }
                                } else if (get.tag(event.card, 'respondShan')) {
                                    if (event.target.countCards('h', {
                                            name: 'shan'
                                        }) == 0) {
                                        return true;
                                    }
                                } else if (get.tag(event.card, 'damage')) {
                                    if (event.target.countCards('h') < 2) return true;
                                } else if (get.tag(event.card, 'recover')) {
                                    return player.hp > 2;
                                }
                            }
                            return false;
                        },
                        locked: false,
                        content: function() {
                            'step 0'
                            trigger.getParent().excluded.add(trigger.target);
                            'step 1'
                            var suits = [];
                            var cards = player.getExpansions('radiance_heyu');
                            for (var i = 0; i < cards.length; i++) {
                                suits.add(get.suit(cards[i]));
                            };
                            event.suits = suits;
                            event.card = get.cards(0);
                            game.cardsGotoOrdering(event.card);
                            event.cards = [];
                            event.suits2 = [get.suit(event.card)];
                            player.showCards(event.card, "“鹤羽”展示的牌");
                            'step 2'
                            if (event.card && event.suits.contains(get.suit(event.card))) {
                                event.cards.push(event.card);
                                event.card = get.cards(0);
                                game.cardsGotoOrdering(event.card);
                                player.showCards(event.card, "“鹤羽”展示的牌");
                                game.delay(0, 0.5);
                                event.suits2.add(get.suit(event.card));
                                event.redo();
                            };
                            'step 3'
                            if (card) {
                                player.addToExpansion(card, 'gain2').gaintag.add('radiance_heyu');
                                player.markSkill('radiance_heyu');
                                game.log(player, '将', card, '置于武将牌上');
                            };
                            if (event.cards.length == 0) event.goto(6);
                            'step 4'
                            var dialog = ui.create.dialog("选择花色各不同的一张加入手牌", cards);
                            player.chooseButton(dialog, [1, event.suits2.length - 1]).set('filterButton', function(button) {
                                var card = button.link;
                                for (var i = 0; i < ui.selected.buttons.length; i++) {
                                    if (get.suit(ui.selected.buttons[i]) == get.suit(card.suit)) return false;
                                };
                                return true;
                            }).set('ai', function(button) {
                                return get.value(button.link) - 1;
                            });
                            'step 5'
                            if (result.bool) {
                                player.gain(result.links, 'gain2', 'log');
                            };
                            'step 6'
                            if (event.suits2.length != 2) player.loseHp();
                            'step 7'
                            game.updateRoundNumber();
                            game.delay();
                        },
                        ai: {
                            threaten: 1.2,
                        },
                    },
                    "radiance_xianci": {
                        enable: 'chooseToUse',
                        filter: function(event, player) {
                            var cards = player.getExpansions('radiance_heyu');
                            if (cards.length < 1) return false;
                            if (event.filterCard({
                                    name: 'tao',
                                }, player, event)) {
                                var color = {
                                    'red': 0,
                                    'black': 0,
                                };
                                for (var i = 0; i < cards.length; i++) {
                                    if (typeof color[get.color(cards[i])] == 'number') {
                                        if (color[get.color(cards[i])] > 0) {
                                            return true;
                                        } else {
                                            color[get.color(cards[i])] += 1;
                                        }
                                    }
                                }
                            }
                            return false;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var cards = player.getExpansions('radiance_heyu');
                                return ui.create.dialog('鹤羽', cards, 'hidden');
                            },
                            select: 2,
                            filter: function(button, player) {
                                if (ui.selected.buttons.length > 0) {
                                    return get.color(ui.selected.buttons[0].link) == get.color(button.link);
                                }
                                return true;
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                if (player.countCards('hs', 'tao') > 0) return 0;
                                var cards = player.getExpansions('radiance_heyu');

                                var evt = _status.event.getParent('chooseToUse', true);
                                if (evt && evt.type == 'dying') {
                                    if (evt.dying != player && get.effect(evt.dying, {
                                            name: 'tao'
                                        }, player, player) <= 0) return 0;
                                    return 2;
                                };
                                if (cards.length == 4) return 1;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function() {
                                        return false
                                    },
                                    selectCard: -1,
                                    viewAs: {
                                        name: 'tao',
                                        cards: links
                                    },
                                    cards: links,
                                    onuse: function(result, player) {
                                        var cards = player.getExpansions('radiance_heyu');
                                        result.cards = lib.skill[result.skill].cards;
                                        cards.removeArray(result.cards);
                                        player.markSkill('radiance_heyu');
                                        player.logSkill('radiance_heyu', result.targets);
                                    }
                                }
                            },
                            prompt: function(links, player) {
                                return '请选择【桃】的目标';
                            },
                        },
                        mod: {
                            globalTo: function(from, to, distance) {
                                var cards = to.getExpansions('radiance_heyu');
                                return distance + cards.length;
                            },
                            maxHandcard: function(player, num) {
                                var cards = player.getExpansions('radiance_heyu');
                                return num + cards.length;
                            },
                        },
                        locked: true,
                        ai: {
                            order: 10,
                            save: true,
                            combo: 'radiance_heyu',
                            skillTagFilter: function(player, tag, arg) {
                                var cards = player.getExpansions('radiance_heyu');
                                if (tag == 'save') {
                                    var color = {
                                        'red': 0,
                                        'black': 0,
                                    };
                                    for (var i = 0; i < cards.length; i++) {
                                        if (typeof color[get.color(cards[i])] == 'number') {
                                            if (color[get.color(cards[i])] > 0) {
                                                return true;
                                            } else {
                                                color[get.color(cards[i])] += 1;
                                            }
                                        }
                                    };
                                    return false;
                                };
                            },
                            result: {
                                player: function(player) {
                                    return 1;
                                },
                            },
                        },
                    },
                    "radiance_shengyu": {
                        enable: 'phaseUse',
                        usable: 1,
                        locked: false,
                        filter: function(event, player) {
                            return player.storage.disableEquip != undefined && (player.storage.disableEquip.length < 5 || player.storage.radiance_shilian);
                        },
                        content: function() {
                            'step 0'
                            if (player.storage.disableEquip.length < 5) {
                                player.chooseToDisable(false).set('ai', function(event, player, list) {
                                    var choices = ['equip5', 'equip3', 'equip4', 'equip2', 'equip1'];
                                    for (var i = 0; i < 5; i++) {
                                        if (list.contains(choices[i])) return choices[i];
                                    };
                                    return list.randomGet();
                                });
                            };
                            'step 1'
                            var num = Math.min(game.countPlayer(), player.storage.disableEquip.length);
                            var select = [1, num];
                            var str = "令至多" + get.cnNumber(num) + "名角色各摸两张牌";
                            if (player.storage.radiance_shilian === true && 1 == 0) {
                                select = [num, num];
                                str = "令" + get.cnNumber(num) + "名角色各摸两张牌";
                            }
                            player.chooseTarget(str, select, true).set('ai', function(target) {
                                return get.attitude(player, target);
                            });
                            'step 2'
                            if (result.targets) {
                                var targets = result.targets;
                                targets.sort(lib.sort.seat);
                                player.line(targets, 'green');
                                for (var i = 0; i < targets.length; i++) {
                                    targets[i].draw(2);
                                };
                            };
                        },
                        mod: {
                            attackRange: function(player, current) {
                                if (player.storage.disableEquip && player.storage.radiance_shilian === true) return current + player.storage.disableEquip.length;
                            },
                        },
                        ai: {
                            order: 14,
                            result: {
                                player: function(player) {
                                    return 10;
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            draw: 2,
                            support: 2,
                        },
                    },
                    "radiance_shilian": {
                        trigger: {
                            player: "phaseZhunbeiBegin",
                        },
                        init: function(player) {
                            player.storage.radiance_shilian = false;
                        },
                        forced: true,
                        juexingji: true,
                        unique: true,
                        skillAnimation: "epic",
                        animationColor: "water",
                        filter: function(event, player) {
                            if (player.storage.radiance_shilian || !player.storage.disableEquip) return false;
                            return player.storage.disableEquip.length >= game.countPlayer();
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_shilian');
                            var num = game.countPlayer() - 1;
                            player.chooseTarget(num, "选择一个顺序，其他角色将按照顺序进行“试炼”的选择", true, function(card, player, target) {
                                return target != player;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var list = ['equip5', 'equip3', 'equip4', 'equip2', 'equip1'];
                                var count = 1;
                                for (var i = 0; i < 5; i++) {
                                    if (!player.isDisabled(list[i])) continue;
                                    if (target.countCards('he', {
                                            subtype: list[i]
                                        }) > 0) count++;
                                };
                                return 100 + get.attitude(player, target) / count;
                            });
                            'step 1'
                            event.targets = result.targets.slice(0);
                            game.log(player, "选择的顺序为", event.targets);
                            'step 2'
                            if (event.targets.length) {
                                var target = event.targets.shift();
                                event.target = target;
                                player.line(target, 'water');
                                var str = "交给" + get.translation(player) + "一张类型为" + get.translation(player.storage.disableEquip) + "的牌，否则受到1点伤害";
                                target.chooseCard('he', 1, str, function(card) {
                                    if (get.type2(card) != 'equip') return false;
                                    var subtype = get.subtype(card);
                                    return _status.event.source.isDisabled(subtype);
                                }).set('source', player).set('ai', function(card) {
                                    if (_status.event.player.hasSkillTag('nodamage') || get.damageEffect(_status.event.player, _status.event.source, _status.event.player) >= 0) {
                                        return 0;
                                    };
                                    var base = 5;
                                    if (_status.event.player.hp <= 2) base *= 1.2;
                                    if (_status.event.player.hp <= 1) base *= 1.5;
                                    if (get.recoverEffect(_status.event.source, _status.event.source, _status.event.player) < 0) base += 2;
                                    return base - get.useful(card);
                                });
                            } else {
                                event.finish();
                            };
                            'step 3'
                            if (result.bool && result.cards.length) {
                                target.give(result.cards, player, true);
                            } else {
                                target.damage(1, player, 'nocard');
                            };
                            'step 4'
                            if (result.bool) {
                                var subtype = get.subtype(result.cards[0]);
                                player.enableEquip(subtype);
                            } else {
                                player.recover(1, 'nocard');
                            };
                            game.delay(0.5);
                            event.goto(2);
                        },
                        derivation: 'radiance_shengyux',
                    },
                    "radiance_shengyux": {},
                    "radiance_qiongguang": {
                        init: function(player) {
                            if (!player.storage.radiance_qiongguang) player.storage.radiance_qiongguang = [];
                        },
                        mark: true,
                        marktext: '穹',
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                if (player.hasSkill('radiance_qiongguang_used')) return "“穹光”本阶段不可以再发动";
                                if (player.storage.radiance_qiongguang && player.storage.radiance_qiongguang.length > 0) {
                                    dialog.addText("以下角色本回合因“穹光”获得过牌");
                                    dialog.addAuto(player.storage.radiance_qiongguang);
                                };
                                return "“穹光”可以发动";
                            },
                        },
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            return player.countCards('h') > 0 && !player.hasSkill('radiance_qiongguang_used');
                        },
                        filterCard: true,
                        position: 'h',
                        selectCard: [1, 1],
                        check: function(card) {
                            var player = _status.event.player;
                            var num = get.number(card, player);
                            if (player.storage.radiance_qiongguang.length < 1 && lib.watersky.func.isPrime(num)) return 8.1 - get.value(card);
                            return 5.1 - get.value(card);
                        },
                        content: function() {
                            'step 0'
                            var num = get.number(cards[0]);
                            if (!lib.watersky.func.isPrime(num)) player.addTempSkill('radiance_qiongguang_used', 'phaseUseEnd');

                            event.cards = get.cards(2);
                            game.cardsGotoOrdering(event.cards);
                            player.showCards(event.cards);
                            if (lib.watersky.func.findGCD(get.number(event.cards[0]), get.number(event.cards[1])) != 1) {
                                event.goto(6);
                            }
                            'step 1'
                            player.chooseTarget(1, '穹光：对一名角色造成1点伤害', lib.filter.notMe, true).set('ai', function(target) {
                                var player = _status.event.player;
                                if (get.attitude(player, target) > 1 && !target.hasSkillTag('nodamage')) return -1;
                                var base = player.storage.radiance_qiongguang.contains(target) ? 3 : 0;
                                return base + get.damageEffect(target, player, player);
                            });
                            'step 2'
                            event.target = result.targets[0];
                            game.log(player, "选择了", event.target, "作为", 'radiance_qiongguang', "的目标");
                            player.line(event.target, 'red');
                            event.target.damage(1, 'nocard');
                            player.addExpose(0.1);
                            'step 3'
                            var next = player.chooseToMove('穹光：分配亮出的牌', true);
                            next.set('list', [
                                ['亮出的牌', cards],
                                ['你获得的牌', []],
                                [(event.target.isIn() ? get.translation(event.target) + '获得的牌' : "不获得的牌"), []],
                            ]);
                            next.set('filterOk', function(moved) {
                                return moved[0].length == 0 && moved[1].length == 1;
                            });
                            next.set('processAI', function(list) {
                                var player = _status.event.player;
                                var cards = list[0][1].slice(0);
                                cards.sort(function(card1, card2) {
                                    return get.alteredValue(card1, player, 'hes', cards) - get.alteredValue(card2, player, 'hes', cards);
                                });
                                var card = cards.shift();
                                var cardsx = [card];
                                return [
                                    [],
                                    cards,
                                    cardsx,
                                ];
                            });
                            'step 4'
                            if (result.moved[1].length > 0) {
                                player.gain(result.moved[1], 'gain2', 'log');
                                if (result.moved[1].length == 2 || player.storage.radiance_qiongguang.contains(player)) {
                                    player.addTempSkill('radiance_qiongguang_used', 'phaseUseEnd');
                                } else {
                                    player.storage.radiance_qiongguang.push(player);
                                };
                            };
                            if (result.moved[2].length > 0 && event.target.isIn()) {
                                event.target.gain(result.moved[2], 'gain2', 'log');
                                if (result.moved[2].length == 2 || player.storage.radiance_qiongguang.contains(event.target)) {
                                    player.addTempSkill('radiance_qiongguang_used', 'phaseUseEnd');
                                } else {
                                    player.storage.radiance_qiongguang.push(event.target);
                                };
                            };
                            'step 5'
                            game.delay();
                            event.finish();
                            'step 6'
                            player.chooseTarget(1, '令一名角色获得' + get.translation(event.cards), true).set('ai', function(target) {
                                var player = _status.event.player;
                                return (get.attitude(player, target)) / (target.hp * 1.5 + target.countCards('h') + 1);
                            });
                            'step 7'
                            if (result.bool) {
                                game.log(player, "选择了", result.targets[0], "作为", 'radiance_qiongguang', "的目标");
                                result.targets[0].gain(event.cards, 'gain2', 'log');
                                player.addTempSkill('radiance_qiongguang_used', 'phaseUseEnd');
                                if (!result.targets[0].isUnknown(player) && result.targets[0] != player) player.addExpose(0.1);
                            };
                        },
                        subSkill: {
                            used: {
                                onremove: function(player, storage) {
                                    player.storage.radiance_qiongguang.length = 0;
                                },
                                charlotte: true,
                                locked: true,
                                ondisable: true,
                            },
                        },
                        ai: {
                            order: 12,
                            threaten: 1.5,
                            expose: 0.1,
                            result: {
                                player: function(player) {
                                    return 10;
                                },
                            },
                        },
                    },
                    "radiance_tianji": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.type(card, 'trick') != 'equip') return true;
                            return false;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseBool("天玑：失去1点体力来取消" + get.translation(trigger.card) + "对你的目标？").set('ai', function(event, player) {
                                var trigger = event._trigger;
                                var card = trigger.card;

                                if (trigger.getParent().excluded.contains(player)) return false;
                                if (get.effect(player, trigger.card, trigger.player, player) >= 0) return false;

                                if (player.canRespondTo(trigger, card)) return false;
                                if (get.tag(card, 'damage') && get.name(card) != 'huogong') {
                                    return true;
                                } else if (!get.tag(card, 'damage')) {
                                    if (!player.isDamaged()) return true;
                                    if (player.hp > 1 && player.needsToDiscard() && get.name(card) == 'lebu') return true;
                                };
                                return false;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_tianji');
                                if (!event.isMine()) game.delayx();
                                trigger.getParent().excluded.add(player);
                                trigger.getParent().targets.remove(player);
                                trigger.getParent().triggeredTargets2.remove(player);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.loseHp(1);
                            'step 3'
                            game.delay();
                        },
                        group: 'radiance_tianji_gain',
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: ["loseHpAfter"],
                                },
                                filter: function(event, player) {
                                    return event.num > 0;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    var str = "展示并获得牌堆顶的牌，直至出现";
                                    player.chooseControl(['大于7', '小于7', 'cancel2'], function() {
                                        return [0, 1].randomGet();
                                    }).set('prompt', get.prompt("radiance_tianji")).set('choiceList', [
                                        str + "点数大于7的牌",
                                        str + "点数小于7的牌",
                                    ]);
                                    'step 2'
                                    event.ongoing = true;
                                    event.count--;
                                    if (result.control == '大于7') {
                                        player.logSkill('radiance_tianji');
                                        game.log(get.translation(player), '选择了点数大于7');
                                        player.popup("大于7");
                                        event.type = 1;
                                    } else if (result.control == '小于7') {
                                        player.logSkill('radiance_tianji');
                                        game.log(get.translation(player), '选择了点数小于7');
                                        player.popup("小于7");
                                        event.type = 2;
                                    } else {
                                        event.finish();
                                    };
                                    'step 3'
                                    if (event.ongoing) {
                                        var card = get.cards(0);
                                        player.gain(card, 'gain2', 'log');

                                        if (get.number(card) > 7 && event.type == 1) {
                                            event.ongoing = false;
                                        } else if (get.number(card) < 7 && event.type != 1) {
                                            event.ongoing = false;
                                        };
                                        game.delay(0.7, 0.1);
                                        event.redo();
                                    };
                                    'step 4'
                                    if (event.count > 0) event.goto(1);
                                },
                            },
                        },
                        action_tag: {
                            overall: 5,
                            draw: 1.5,
                            loseHp_defend: 2,
                        },
                    },



                    // underworld
                    "radiance_siqi": {
                        trigger: {
                            global: ['dyingAfter']
                        },
                        frequent: true,
                        filter: function(event, player) {
                            return event.player.isIn();
                        },
                        content: function() {
                            var num = 1;
                            if (player == _status.currentPhase) {
                                num++;
                            } else {
                                if (!player.hasSkill('radiance_siqi_sha')) player.addTempSkill('radiance_siqi_sha', {
                                    player: 'phaseEnd',
                                });
                                player.storage.radiance_siqi_sha++;
                                player.markSkill('radiance_siqi_sha');
                            };
                            player.draw(num);
                        },
                    },
                    "radiance_siqi_sha": {
                        marktext: "死",
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                dialog.addText("可以额外使用" + get.cnNumber(storage) + "张【杀】");
                            },
                        },
                        init: function(player, skill) {
                            player.storage.radiance_siqi_sha = 0;
                        },
                        onremove: function(player, skill) {
                            delete player.storage.radiance_siqi_sha;
                        },
                        charlotte: true,
                        locked: true,
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + player.storage.radiance_siqi_sha;
                            },
                        },
                    },
                    "radiance_hunduan": {
                        trigger: {
                            player: "phaseUseBegin",
                        },
                        locked: true,
                        direct: true,
                        filter: function(event, player) {
                            return player.countCards('he', function(card) {
                                return get.color(card) == 'black';
                            }) > 0;
                        },
                        content: function() {
                            'step 0'
                            player.chooseToDiscard('he', get.prompt2("radiance_hunduan"), 1, function(card) {
                                return get.color(card) == 'black';
                            }).set('ai', function(card) {
                                var player = _status.event.player;
                                var hs = player.getCards('h', function(card2) {
                                    return card2 != card && card2.name !== 'sha' && get.tag(card2, 'damage');
                                });

                                var count = 0,
                                    countx = 0;
                                count += player.countCards('h', function(cardx) {
                                    if (cardx != card && get.name(card, player) == 'sha' && game.countPlayer(function(current) {
                                            if (player.canUse(cardx, current)) {
                                                if (get.distance(player, current) > 1) countx++;
                                                return true;
                                            };
                                        }) > 0) return 0.5;
                                });
                                if (player.getCardUsable('sha') * 0.5 <= count) count += player.getCardUsable('sha') * 0.5;
                                for (var i = 0; i < hs.length; i++) {
                                    var card2 = hs[i];
                                    if (game.hasPlayer(function(current) {
                                            return current != player && player.canUse(card2, current) && get.effect(current, card2, player, player) > 0;
                                        })) {
                                        count += 1;
                                    };
                                };
                                if (countx >= count && get.position(card) == 'e' && get.subtype(card) == 'equip1') return 0;
                                if (player.needsToDiscard(1 - count) > 0) return 5 - get.alteredValue(card);
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_hunduan');
                                var targets = game.filterPlayer(function(current) {
                                    return current != player;
                                });
                                targets.sort(lib.sort.seat);
                                event.targets = targets;
                                event.num = 0;
                                player.line(targets, 'green');
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (num < event.targets.length) {
                                event.targets[num].addTempSkill('radiance_hunduan_db');
                                event.num++;
                                event.redo();
                            };
                        },
                    },
                    "radiance_hunduan_db": {
                        trigger: {
                            player: 'gainBefore'
                        },
                        content: function() {
                            trigger.cancel();
                            var cards = trigger.result || trigger.cards;
                            if (cards && cards.length && !get.owner(cards[0])) {
                                player.$throw(cards, 1000);
                                game.cardsDiscard(cards);
                                game.log(player, '将', cards, '置入了弃牌堆');
                                game.delay(0.7);
                            }
                        },
                        charlotte: true,
                        forced: true,
                        marktext: "断",
                        debuff: true,
                        popup: false,
                        mod: {
                            cardEnabled2: function(card, player) {
                                if (player.hp > 0) return false;
                            },
                        },
                        init: function(player, skill) {
                            player.addSkillBlocker(skill);
                        },
                        onremove: function(player, skill) {
                            player.removeSkillBlocker(skill);
                        },
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte;
                        },
                        mark: true,
                        intro: {
                            content: function(storage, player, skill) {
                                var str = "不能使用或打出牌";
                                var list = player.getSkills(null, false, false).filter(function(i) {
                                    return lib.skill.radiance_hunduan_db.skillBlocker(i, player);
                                });
                                if (list.length) str += "，以下技能失效：" + get.translation(list);
                                return str;
                            }
                        },
                        ai: {
                            neg: true,
                        },
                    },
                    "radiance_yindun": {
                        mod: {
                            targetEnabled: function(card, player, target) {
                                if (['nanman', 'wanjian'].contains(get.name(card))) return false;
                                if (get.type(card) == 'delay') return false;
                            },
                        },
                        trigger: {
                            global: ['useCardAfter'],
                        },
                        filter: function(event, player) {
                            if (!player.isDamaged()) return false;
                            return ['nanman', 'wanjian'].contains(get.name(event.card)) || get.type(event.card) == 'delay';
                        },
                        forced: true,
                        content: function() {
                            player.recover();
                        },
                        action_tag: {
                            overall: 2,
                            direct_defend: 1,
                            recover: 0.5,
                        }
                    },
                    "radiance_huoshi": {
                        enable: "phaseUse",
                        usable: 1,
                        init: function(player, skill) {
                            if (!Array.isArray(lib.watersky.radiance.radiance_huoshi)) lib.watersky.radiance.radiance_huoshi = [];
                        },
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                var list = get.sort(lib.watersky.radiance.radiance_huoshi.slice(0), 'seat', player);
                                dialog.addText("以下角色已因“祸世”失去过体力");
                                dialog.addSmall(list);
                            },
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [
                                    '所有角色',
                                    '体力值小于等于你的角色',
                                    '体力值大于等于你的角色',
                                    '所有未因此失去过体力的角色',
                                ];
                                var choiceList = ui.create.dialog('祸世：请选择一项', 'forcebutton', 'hidden');
                                for (var i = 0; i < list.length; i++) {
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    var bool = lib.skill.radiance_huoshi.chooseButton.filter({
                                        link: i
                                    }, player);
                                    if (!bool) str += '<div style="opacity:0.5">';
                                    str += list[i];
                                    if (!bool) str += '</div>';
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = i;
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[i];
                                    }
                                    choiceList.buttons.add(next.firstChild);
                                }
                                return choiceList;
                            },
                            filter: function(button, player) {
                                var choices = [
                                    function(card, player, target) {
                                        return true;
                                    },
                                    function(card, player, target) {
                                        return target.hp <= player.hp;
                                    },
                                    function(card, player, target) {
                                        return target.hp >= player.hp;
                                    },
                                    function(card, player, target) {
                                        return !lib.watersky.radiance.radiance_huoshi.contains(target);
                                    },
                                ];
                                return game.hasPlayer(function(current) {
                                    return choices[button.link](null, player, current)
                                });
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                var choices = [
                                    function(card, player, target) {
                                        return true;
                                    },
                                    function(card, player, target) {
                                        return target.hp <= player.hp;
                                    },
                                    function(card, player, target) {
                                        return target.hp >= player.hp;
                                    },
                                    function(card, player, target) {
                                        return !lib.watersky.radiance.radiance_huoshi.contains(target);
                                    },
                                ];
                                var eff = game.countPlayer(function(target) {
                                    if (choices[button.link](null, player, target)) {
                                        var base = -2;
                                        if (target.hp <= 2) base -= (3 - target.hp);
                                        if (get.zhu(player) == target && get.attitude(player, target) > 0) base--;
                                        if (target.hasActionTag('loseHp_profit') && target.hp > 1) base *= 0.75;
                                        return base * get.attitude(player, target);
                                    };
                                    return 0;
                                });
                                return eff;
                            },
                            backup: function(links) {
                                var toreturn = {
                                    filterTarget: function(card, player, target) {
                                        return true;
                                    },
                                    selectTarget: -1,
                                    multitarget: true,
                                    log: false,
                                    popup: null,
                                    content: function() {
                                        'step 0'
                                        event.targets = get.sort(targets, 'seat', player);
                                        event.targets2 = event.targets.slice(0);
                                        player.logSkill('radiance_huoshi', event.targets);
                                        'step 1'
                                        if (event.targets.length > 0) {
                                            var target = event.targets.shift();
                                            target.loseHp();
                                            lib.watersky.radiance.radiance_huoshi.add(target);
                                            player.markSkill('radiance_huoshi');
                                            event.redo();
                                        };
                                        'step 2'
                                        var count = 0;
                                        for (var i = 0; i < event.targets2.length; i++) {
                                            if (!event.targets2[i].isIn()) {
                                                count++;
                                            };
                                        };
                                        if (count > 0) player.draw(2 * count);
                                    },
                                    ai: {
                                        order: 7,
                                        result: {
                                            player: function(player, target) {
                                                return 1;
                                            },
                                        },
                                    },
                                };
                                var choices = [
                                    function(card, player, target) {
                                        return true;
                                    },
                                    function(card, player, target) {
                                        return target.hp <= player.hp;
                                    },
                                    function(card, player, target) {
                                        return target.hp >= player.hp;
                                    },
                                    function(card, player, target) {
                                        return !lib.watersky.radiance.radiance_huoshi.contains(target);
                                    },
                                ];
                                toreturn.filterTarget = choices[links[0]];
                                return toreturn;
                            },
                        },
                        ai: {
                            order: 7,
                            result: {
                                player: function(player) {
                                    var choices = [
                                        function(card, player, target) {
                                            return true;
                                        },
                                        function(card, player, target) {
                                            return target.hp <= player.hp;
                                        },
                                        function(card, player, target) {
                                            return target.hp >= player.hp;
                                        },
                                        function(card, player, target) {
                                            return !lib.watersky.radiance.radiance_huoshi.contains(target);
                                        },
                                    ];
                                    for (var i = 0; i < choices.length; i++) {
                                        var eff = game.countPlayer(function(target) {
                                            if (choices[i](null, player, target)) {
                                                var base = -2;
                                                if (target.hp <= 2) base -= (3 - target.hp);
                                                if (get.zhu(player) == target && get.attitude(player, target) > 0) base--;
                                                if (target.hasActionTag('loseHp_profit') && target.hp > 1) base *= 0.75;
                                                return base * get.attitude(player, target);
                                            };
                                            return 0;
                                        });
                                        if (eff > 0) return eff;
                                    };
                                    return 0;
                                },
                            },
                        },
                        action_tag: {
                            overall: 5,
                            loseHp: 7,
                            negative: 1,
                        },
                    },

                    "radiance_jiguang": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        usable: 1,
                        init: function(player) {
                            if (Array.isArray(player.storage.radiance_jiguang)) return;
                            player.storage.radiance_jiguang = [];
                        },
                        filter: function(event, player) {
                            if (player.storage.radiance_jiguang_used) return false;
                            return true;
                        },
                        locked: false,
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                var list = [];
                                for (var i = 0; i < player.storage.radiance_jiguang.length; i++) {
                                    var name = player.storage.radiance_jiguang[i];
                                    if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                };
                                dialog.addSmall([list, 'vcard']);
                            },
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (player.storage.radiance_jiguang.contains(name)) continue;
                                    if (name == 'du') continue;
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                };
                                if (list.length == 0) {
                                    return ui.create.dialog('极光已无可用牌');
                                };
                                return ui.create.dialog('极光', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                return _status.event.getParent().filterCard({
                                    name: button.link[2],
                                    nature: button.link[3],
                                    radiance_jiguang: true,
                                }, player, _status.event.getParent());
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                var name = button.link[2];
                                if (player.countCards('hs', name) > 0) return 0;
                                if (name == 'shan') return 1;
                                if (name == 'wuxie') return 1;
                                if (name == 'huogong') return 1;
                                var evt = _status.event.getParent('chooseToUse', true);
                                if (evt && evt.type == 'dying') {
                                    if (evt.dying != player && get.effect(evt.dying, {
                                            name: name
                                        }, player, player) <= 0) return 0;
                                    if (evt.dying == player && name == 'jiu') return 2.1;
                                    return 2;
                                };
                                var effect = player.getUseValue(button.link[2], false);
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card) {
                                        return false;
                                    },
                                    selectCard: -1,
                                    popname: true,
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3],
                                        radiance_jiguang: true,
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_jiguang');
                                        player.storage.radiance_jiguang.add(result.card.name);
                                        player.markSkill('radiance_jiguang');
                                        player.storage.radiance_jiguang_used = result.card.name;
                                        var next = game.createEvent('radiance_jiguang_clear');
                                        next.player = player;
                                        _status.event.next.remove(next);
                                        var phase = _status.event.getParent('phase', true);
                                        if (phase) phase.after.push(next);
                                        next.setContent(function() {
                                            delete player.storage.radiance_jiguang_used;
                                        });
                                    },
                                    onrespond: function(result, player) {
                                        player.logSkill('radiance_jiguang');
                                        player.storage.radiance_jiguang.add(result.card.name);
                                        player.markSkill('radiance_jiguang');
                                        player.storage.radiance_jiguang_used = result.card.name;
                                        var next = game.createEvent('radiance_jiguang_clear');
                                        next.player = player;
                                        _status.event.next.remove(next);
                                        var phase = _status.event.getParent('phase', true);
                                        if (phase) phase.after.push(next);
                                        next.setContent(function() {
                                            delete player.storage.radiance_jiguang_used;
                                        });
                                    },
                                };
                            },
                            prompt: function(links, player) {
                                return '视为使用或打出' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '';
                            },
                        },
                        hiddenCard: function(player, name) {
                            if (player.storage.radiance_jiguang.contains(name) || player.storage.radiance_jiguang_used) return false;
                            var num = player.getStat().skill.radiance_jiguang;
                            if (!num) return name == 'wuxie';
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (card.radiance_jiguang) return true;
                            },
                        },
                        ai: {
                            order: 7,
                            result: {
                                player: function(player) {
                                    var players = game.filterPlayer();
                                    return 1;
                                },
                            },
                            threaten: 1.9,
                            save: true,
                            respondTao: true,
                            respondShan: true,
                            respondSha: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.storage.radiance_jiguang_used) return false;
                                if (tag == 'respondSha') {
                                    if (player.storage.radiance_jiguang.contains('sha')) return false;
                                }
                                if (tag == 'respondShan') {
                                    if (player.storage.radiance_jiguang.contains('shan')) return false;
                                }
                                if (tag == 'respondTao') {
                                    if (player.storage.radiance_jiguang.contains('tao')) return false;
                                }
                                if (tag == 'save') {
                                    if (player.storage.radiance_jiguang.contains('tao') && (player.storage.radiance_jiguang.contains('jiu') || arg != player)) return false;
                                }
                            },
                        },
                        action_tag: {
                            overall: 5,
                            sha_viewAs: 1,
                            trick_viewAs: 2,
                        },
                    },
                    "radiance_tianquan": {
                        trigger: {
                            player: ['phaseJieshuBegin'],
                        },
                        filter: function(event, player) {
                            return player.isMinHp(true) || player.isDamaged() || (Array.isArray(player.storage.radiance_jiguang) && player.storage.radiance_jiguang.length > 0);
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            if (!Array.isArray(player.storage.radiance_jiguang)) event.goto(3);
                            'step 1'
                            var list = [];
                            for (var i = 0; i < player.storage.radiance_jiguang.length; i++) {
                                var name = player.storage.radiance_jiguang[i];
                                if (name == player.storage.radiance_jiguang_used) continue;
                                if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                            };
                            if (list.length == 0) {
                                event.goto(3);
                                return;
                            } else {
                                var dialog = ui.create.dialog('是否恢复“极光”的一个已用牌名？', [list, 'vcard']);
                                player.chooseButton(dialog, 1).set('ai', function(button) {
                                    var player = _status.event.player;
                                    var name = button.link[2];
                                    if (name == 'tao') {
                                        var friends = player.getFriends(true);
                                        for (var i = 0; i < friends.length; i++) {
                                            if (friends[i].hp == 1 || (friends[i].countCards('h') <= 2 && friends[i].hp == 2)) return 10;
                                        };
                                        return 6;
                                    } else if (name == 'shan') {
                                        if (!player.hasShan()) return 8;
                                        return 4;
                                    } else if (name == 'wuxie') {
                                        var friends = player.getFriends(true);
                                        for (var i = 0; i < friends.length; i++) {
                                            if (friends[i].countCards('j').length > 0) return 7;
                                        };
                                        return 5;
                                    };
                                    return player.getUseValue(name, false);
                                });
                            };
                            'step 2'
                            if (result.bool) {
                                player.popup(result.links[0][2]);
                                game.log(player, "恢复了", 'radiance_jiguang', "的", result.links[0][2], "牌名");
                                player.storage.radiance_jiguang.remove(result.links[0][2]);
                                player.markAuto('radiance_jiguang');
                            };
                            'step 3'
                            if (player.isMinHp(true)) {
                                player.chooseDrawRecover(2, 1, true);
                            } else if (player.isDamaged()) {
                                player.draw();
                            };
                        },
                    },
                    "radiance_jimie": {
                        trigger: {
                            player: "phaseBefore",
                        },
                        forced: true,
                        locked: true,
                        juexingji: true,
                        fixed: true,
                        superCharlotte: true,
                        charlotte: true,
                        zero: true,
                        skillAnimation: "legend",
                        animationColor: "key",
                        priority: 100000,
                        filter: function(event, player) {
                            if (!Array.isArray(player.storage.radiance_jiguang)) return false;
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                if (name == 'du') continue;
                                if (get.type(name) != 'trick' && get.type(name) != 'basic') continue;
                                if (!player.storage.radiance_jiguang.contains(name)) return false;
                            };
                            return true;
                        },
                        content: function() {
                            game.directWinner = player;
                            if (game.showIdentity) {
                                game.showIdentity();
                            };
                            var bool = false;
                            if (player == game.me) {
                                bool = true;
                            } else {
                                var friends = player.getFriends(true);
                                if (friends.contains(game.me)) bool = true;
                            };
                            game.over(bool);
                        },
                    },
                    "radiance_cancun": {
                        enable: "phaseUse",
                        usable: 1,
                        filterCard: true,
                        selectCard: 1,
                        position: "h",
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        check: function(card) {
                            var number = get.number(card);
                            return (Math.abs(number - 7) + 1 / Math.max(get.value(card), 0.5));
                        },
                        content: function() {
                            'step 0'
                            event.number = get.number(cards[0]);
                            event.cards = get.cards(3 + 2 * player.getDamagedHp());
                            game.cardsGotoOrdering(event.cards);
                            player.showCards(event.cards);

                            event.less = 0;
                            for (var i = 0; i < event.cards.length; i++) {
                                if (get.number(event.cards[i]) < event.number) {
                                    event.less++;
                                } else if (get.number(event.cards[i]) > event.number) {
                                    event.less--;
                                }
                            }
                            'step 1'
                            var chooseButton = player.chooseButton([1, 3], ["残存", event.cards]);
                            chooseButton.set('ai', function(button) {
                                if (event.less > 0 && get.number(button.link) > event.number) return 0;
                                if (event.less < 0 && get.number(button.link) < event.number) return 0;
                                return get.value(button.link);
                            });
                            chooseButton.set('filterButton', function(button) {
                                if (ui.selected.buttons.length < 1) return true;
                                for (var i = 0; i < ui.selected.buttons.length; i++) {
                                    if (get.number(ui.selected.buttons[i].link) < event.number) {
                                        return get.number(button.link) <= event.number;
                                    } else if (get.number(ui.selected.buttons[i].link) > event.number) {
                                        return get.number(button.link) >= event.number;
                                    }
                                }
                                return true;
                            });
                            'step 2'
                            if (result.bool && result.links.length > 0) {
                                result.links.sort();
                                player.showCards(result.links);
                                player.gain(result.links, 'gain2', 'log');
                            }
                        },
                        ai: {
                            order: 15,
                            result: {
                                player: function(player) {
                                    return (3 + 2 * player.getDamagedHp()) / 2;
                                },
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'recover')) {
                                        if (player.getDamagedHp() == 1 && player.needsToDiscard() < 2) return 0;
                                    };
                                },
                            },
                        },
                    },
                    "radiance_shangyu": {
                        trigger: {
                            global: ["gameDrawAfter", "phaseBefore"],
                            player: ["dyingAfter", "recoverAfter"],
                        },
                        firstDo: true,
                        forced: true,
                        marktext: "羽",
                        intro: {
                            name: '殇羽',
                            content: 'mark'
                        },
                        init: function(player) {
                            if (!player.storage.radiance_shangyu_used) player.storage.radiance_shangyu_used = false;
                        },
                        filter: function(event, player) {
                            return !player.storage.radiance_shangyu_used || (event.name == 'recover' && !player.hasMark('radiance_shangyu'));
                        },
                        content: function() {
                            player.addMark('radiance_shangyu', trigger.name == 'recover' ? 1 : 2);
                            player.storage.radiance_shangyu_used = true;
                        },
                        group: "radiance_shangyu_damage",
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: ['damageBegin4'],
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return event.player.hasMark('radiance_shangyu') && event.num > 0;
                                },
                                content: function() {
                                    'step 0'
                                    trigger.cancel();
                                    trigger.player.removeMark('radiance_shangyu', 1);
                                    'step 1'
                                    if (trigger.source && trigger.source.countCards('he')) trigger.source.randomDiscard(1, true, 'he');
                                },
                            },
                        },
                        mod: {
                            maxHandcardBase: function(player, num) {
                                return (num + player.countMark('radiance_shangyu'));
                            },
                        },
                    },
                    "radiance_wenyi": {
                        trigger: {
                            global: "recoverAfter",
                        },
                        intro: {
                            content: 'players',
                        },
                        init: function(player) {
                            if (!player.storage.radiance_wenyi) player.storage.radiance_wenyi = [];
                        },
                        filter: function(event, player) {
                            if (event.player == player) return false;
                            return event.num > 0 && event.player.countCards('he') > 0;
                        },
                        logTarget: "player",
                        check: function(event, player) {
                            return get.attitude(player, event.player) < 0;
                        },
                        content: function() {
                            // trigger.player.chooseToDiscard('he', 1, true);
                            player.discardPlayerCard(trigger.player, 'he', 1, true);
                        },
                        ai: {
                            threaten: 1.6,
                            expose: 0.5,
                        },
                        group: ['radiance_wenyi_damage', 'radiance_wenyi_record', 'radiance_wenyi_die'],
                        subSkill: {
                            record: {
                                trigger: {
                                    global: 'recoverAfter',
                                },
                                forced: true,
                                silent: true,
                                charlotte: true,
                                popup: false,
                                sub: true,
                                firstDo: true,
                                filter: function(event, player) {
                                    return event.player != player;
                                },
                                content: function() {
                                    player.storage.radiance_wenyi.add(trigger.player);
                                    player.markSkill('radiance_wenyi');
                                },
                            },
                            damage: {
                                trigger: {
                                    player: 'phaseJieshuBegin',
                                },
                                direct: true,
                                filter: function(event, player) {
                                    return player.storage.radiance_wenyi.length > 0;
                                },
                                content: function() {
                                    'step 0'
                                    player.chooseTarget(get.prompt('radiance_wenyi'), '对一名回复过体力的其他角色造成1点伤害', function(card, player, target) {
                                        return player.storage.radiance_wenyi.contains(target);
                                    }).set('ai', function(target) {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.storage.radiance_wenyi.remove(target);
                                        player.markAuto('radiance_wenyi');
                                        player.logSkill('radiance_wenyi', target);
                                        target.damage('nocard');
                                        if (!target.isUnknown(player)) player.addExpose(0.5);
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    if (!target.isAlive()) {
                                        player.recover();
                                        player.draw(3);
                                    };
                                },
                            },
                            die: {
                                trigger: {
                                    player: 'die'
                                },
                                direct: true,
                                forceDie: true,
                                skillAnimation: true,
                                animationColor: 'key',
                                filter: function(event, player) {
                                    return player.storage.radiance_wenyi.filter(current => current.isAlive()).length > 0;
                                },
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("瘟疫");
                                    event.list = get.sort(player.storage.radiance_wenyi.filter(current => current.isAlive()), 'seat', _status.currentPhase);
                                    dialog.addText("是否令" + get.translation(event.list) + "各受到1点无来源伤害");
                                    player.chooseBool(dialog).set('ai', function(event, player) {
                                        var eff = 0;
                                        for (var i = 0; i < event.list.length; i++) {
                                            var current = event.list[i];
                                            if (get.zhu(player) == current && player.getFriends(true).contains(current)) {
                                                if (current.hp <= 1) return false;
                                                if (current.hp == 2 || current.isMinHp(true)) eff += get.damageEffect(current, player, player);
                                            };
                                            eff += get.damageEffect(current, player, player);
                                        };
                                        return eff > 1;
                                    }).set('forceDie', true);
                                    'step 1'
                                    if (!result.bool) {
                                        event.finish();
                                        return;
                                    };
                                    player.logSkill('radiance_wenyi', event.list);
                                    player.line(event.list);
                                    player.trySkillAnimate('radiance_wenyi_die', 'radiance_wenyi');
                                    'step 2'
                                    var current = event.list.shift();
                                    current.damage(1, 'nosource', 'nocard');
                                    if (event.list.length > 0) event.redo();
                                },
                            },
                        },
                        action_tag: {
                            overall: 4,
                            damage: 1,
                            discard: 2,
                        },
                    },
                    "radiance_yujia": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        derivation: ['radiance_qinshi'],
                        filter: function(event, player) {
                            if (player.countCards('hs') > 0) return true;
                            return false;
                        },
                        marktext: "假",
                        intro: {
                            content: 'mark',
                        },
                        ondisable: true,
                        onremove: function(player) {
                            player.storage.radiance_yujia = 0;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (name == 'shan') list.push(['基本', '', name]);
                                    else if (name == 'wuxie') list.push(['锦囊', '', name]);
                                }
                                return ui.create.dialog('驭假', [list, 'vcard']);
                            },
                            filter: function(button, player) {
                                var evt = _status.event.getParent();
                                //if (evt.type == 'wuxie') return true;
                                return evt.filterCard({
                                    name: button.link[2]
                                }, player, evt);
                            },
                            check: function(button) {
                                var player = _status.event.player;
                                if (player.countCards('h', button.link[2]) > 0) return 0;

                                if (button.link[2] == 'shan') return 2;

                                var evt = _status.event.getParent();
                                if (evt && evt.type == 'wuxie') {
                                    return player.countCards('h', function(card) {
                                        return get.value(card, player) < 5;
                                    });
                                } else if (evt && evt.name == 'chooseToRespond') {
                                    return 1;
                                }

                                var effect = player.getUseValue(button.link[2]);
                                if (effect > 0) return effect;
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        return true;
                                    },
                                    selectCard: 1,
                                    popname: true,
                                    check: function(card) {
                                        return 7.1 - get.value(card);
                                    },
                                    position: 'hs',
                                    viewAs: {
                                        name: links[0][2],
                                        nature: links[0][3],
                                        isCard: true,
                                    },
                                    onuse: function(result, player) {
                                        player.logSkill('radiance_yujia');
                                        player.addAdditionalSkill("radiance_qinshi", "radiance_qinshi");
                                        player.addMark('radiance_yujia', 1, true);
                                    },
                                    onrespond: function(result, player) {
                                        player.logSkill('radiance_yujia');
                                        player.addAdditionalSkill("radiance_qinshi", "radiance_qinshi");
                                        player.addMark('radiance_yujia', 1, true);
                                    },
                                }
                            },
                            hiddenCard: function(player, name) {
                                if (player.countCards('h') < 1) return false;
                                return name == 'wuxie';
                            },
                            prompt: function(links, player) {
                                return '将一张牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用或打出';
                            }
                        },
                        hiddenCard: function(player, name) {
                            if (player.countCards('h') < 1) return false;
                            return name == 'wuxie';
                        },
                        ai: {
                            respondSha: true,
                            respondShan: true,
                            skillTagFilter: function(player) {
                                if (player.countCards('h') < 1) return false;
                            },
                            order: 4,
                            result: {
                                player: function(player) {
                                    var allshown = true,
                                        players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].ai.shown == 0) {
                                            allshown = false;
                                        }
                                        if (players[i] != player && players[i].countCards('h') && get.attitude(player, players[i]) > 0) {
                                            return 1;
                                        }
                                    }
                                    if (allshown) return 1;
                                    return 0;
                                }
                            },
                            threaten: 1.9,
                        },
                        action_tag: {
                            overall: 2,
                            sha_viewAs: 1,
                            shan: 1,
                            wuxie: 1,
                            negative: 0.5,
                        }
                    },
                    "radiance_jiayi": {
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function(event, player) {
                            return event.source && event.source.isIn() && event.source != player && event.num > 0 && player.hasMark('radiance_yujia');
                        },
                        logTarget: "source",
                        locked: false,
                        check: function(event, player) {
                            return get.attitude(player, event.source) < player.countMark('radiance_yujia');
                        },
                        content: function() {
                            'step 0'
                            event.num = Math.min(player.countMark('radiance_yujia'), trigger.num);
                            trigger.source.addAdditionalSkill("radiance_qinshi", "radiance_qinshi");
                            'step 1'
                            event.num--;
                            player.removeMark('radiance_yujia', 1);
                            trigger.source.addMark('radiance_yujia', 1, true);
                            player.draw();
                            'step 2'
                            if (event.num > 0) {
                                player.chooseBool(get.prompt2('radiance_jiayi')).set('choice', (get.realAttitude || get.attitude)(player, trigger.source) <= 0);
                            } else {
                                if (player.countMark('radiance_yujia') < 1) player.removeAdditionalSkill('radiance_qinshi');
                                event.finish();
                            }
                            'step 3'
                            if (result.bool) {
                                event.goto(1);
                            }
                        },
                        ai: {
                            combo: 'radiance_yujia',
                        },
                        group: 'radiance_jiayi_draw',
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: 'phaseDrawBegin1',
                                },
                                forced: true,
                                filter: function(event, player, name) {
                                    if (event.numFixed) return false;
                                    return game.filterPlayer(function(target) {
                                        return target != player && target.hasMark('radiance_yujia');
                                    }).length > 0;
                                },
                                content: function() {
                                    trigger.num += game.filterPlayer(function(target) {
                                        return target != player && target.hasMark('radiance_yujia');
                                    }).length;
                                },
                            },
                        },
                        mod: {
                            maxHandcard: function(player, num) {
                                return num + game.filterPlayer(function(target) {
                                    return target != player && target.hasMark('radiance_yujia');
                                }).length;
                            },
                        },
                    },
                    "radiance_qinshi": {
                        trigger: {
                            player: 'phaseJieshuBegin',
                        },
                        filter: function(event, player) {
                            var num = player.hasSkill('radiance_yujia') ? 4 : 2;
                            if (game.countPlayer(function(current) {
                                    return current.hasSkill('radiance_yujia');
                                }) < 1) num = 1;
                            return player.countMark('radiance_yujia') >= num;
                        },
                        forced: true,
                        charlotte: true,
                        content: function() {
                            'step 0'
                            player.removeMark('radiance_yujia', player.countMark('radiance_yujia'), true);
                            player.removeAdditionalSkill('radiance_qinshi');
                            if (player.hasSkill('radiance_yujia')) player.draw(2);
                            'step 1'
                            player.loseHp(1);
                        },
                    },
                    "radiance_moxiang": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return target != player;
                        },
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                var str = "在下一个结束阶段";
                                if (typeof player.storage.radiance_moxiang_gl == 'object') {
                                    var num1, num2;
                                    if (player.storage.radiance_moxiang_gl.discard > 0) num1 = player.storage.radiance_moxiang_gl.discard * 2;
                                    if (player.storage.radiance_moxiang_gl.lose > 0) num2 = player.storage.radiance_moxiang_gl.lose;
                                    if (num1 && num2) {
                                        return str + "弃置" + get.cnNumber(num1) + "张牌并失去" + num2 + "点体力";
                                    } else if (num1) {
                                        return str + "弃置" + get.cnNumber(num1) + "张牌";
                                    } else if (num2) {
                                        return str + "失去" + num2 + "点体力";
                                    }
                                }
                            },
                        },
                        content: function() {
                            'step 0'
                            if (typeof target.storage.radiance_moxiang_gl !== 'object') {
                                target.storage.radiance_moxiang_gl = {
                                    'lose': 0,
                                    'discard': 0,
                                };
                            };
                            event.discard = false;
                            target.chooseToDiscard(2, 'h').set('ai', function(card) {
                                var player = _status.event.player;
                                if (get.tag(card, 'save')) return 0;
                                if (player.getDamagedHp() <= 1) return 0;
                                if (player.hp <= 1 && !player.hasFriend()) return 0;
                                return 5 + 1.5 * (3 - player.hp) - get.value(card);
                            }).set('prompt', "弃置两张牌并回复1点体力，下一个结束阶段失去1点体力；否则失去1点体力并摸两张牌，下一个结束阶段随机弃置两张牌");
                            'step 1'
                            if (result.bool) {
                                target.recover();
                                event.discard = true;
                                event.goto(3);
                            } else {
                                target.loseHp();
                            }
                            'step 2'
                            if (!target.isIn()) {
                                event.finish();
                            } else {
                                target.draw(2);
                            }
                            'step 3'
                            // if (!target.hasSkill('radiance_moxiang_gl')) target.addSkill('radiance_moxiang_gl');
                            if (event.discard) {
                                target.storage.radiance_moxiang_gl.lose++;
                            } else {
                                target.storage.radiance_moxiang_gl.discard++;
                            }
                            target.markSkill('radiance_moxiang');
                        },
                        global: 'radiance_moxiang_gl',
                        action_tag: {
                            overall: 3,
                            in: 1,
                            loseHp: 1,
                            recover: 0.5,
                        },
                        ai: {
                            order: 10,
                            result: {
                                target: -1,
                            },
                        },
                    },
                    "radiance_moxiang_gl": {
                        trigger: {
                            player: 'phaseEnd',
                        },
                        filter: function(event, player) {
                            return typeof player.storage.radiance_moxiang_gl == 'object' && player.storage.radiance_moxiang_gl.lose + player.storage.radiance_moxiang_gl.discard > 0;
                        },
                        forced: true,
                        charlotte: true,
                        priority: -30,
                        content: function() {
                            'step 0'
                            if (player.storage.radiance_moxiang_gl.discard > 0 && player.countCards('he') > 0) {
                                player.randomDiscard('he', 2);
                                player.storage.radiance_moxiang_gl.discard--;
                                event.redo();
                            };
                            'step 1'
                            if (player.storage.radiance_moxiang_gl.lose > 0 && player.isIn()) {
                                player.loseHp(1);
                                player.storage.radiance_moxiang_gl.lose--;
                                event.redo();
                            };
                            'step 2'
                            if (player.storage.radiance_moxiang_gl.discard < 1) player.unmarkSkill('radiance_moxiang');
                        },
                    },
                    "radiance_zaichun": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            if (!event.player || !event.player.isIn()) return false;
                            if (player == event.player) return false;
                            if (player.countCards('h') < 1) return false;

                            var card = event.card;
                            if (get.type2(card) == 'trick' || get.name(card) == 'sha') return true;
                            return false;
                        },
                        check: function(event, player) {
                            var card1 = event.card;
                            var hs = player.countCards('h');
                            if (card1.name == 'wugu') return hs < 3;
                            if (get.effect(player, card1, event.player, player) >= 0) return hs < 4;

                            if (get.name(event.card) == 'huogong') return hs < 4;
                            if (get.tag(event.card, 'damage')) {
                                if (player.hp == 1 && player.countCards('h', function(card) {
                                        return get.tag(card, 'save');
                                    }) > 0) {
                                    return false;
                                }
                            }
                            if (get.tag(event.card, 'respondSha')) {
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) == 1) {
                                    return false;
                                }
                            } else if (get.tag(event.card, 'respondShan')) {
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) == 1) {
                                    return false;
                                }
                            }
                            return player.countCards('h') < 4;
                        },
                        content: function() {
                            'step 0'
                            event.source = trigger.player;
                            event.source.discardPlayerCard(player, 'h', true);
                            'step 1'
                            var evt = trigger.getParent('useCard');
                            var next = game.createEvent('radiance_zaichun_draw');
                            next.player = player;
                            next.setContent(function() {
                                player.drawTo(4);
                            });
                            event.next.remove(next);
                            evt.after.push(next);
                        },
                    },
                    "radiance_zhuisi": {
                        shaRelated: true,
                        trigger: {
                            global: 'shaMiss'
                        },
                        filter: function(event, player) {
                            return player.canCompare(event.target);
                        },
                        check: function(event, player) {
                            if (!player.hasCard(function(card) {
                                    return get.value(card) < 6.1;
                                })) return false;
                            return get.attitude(player, event.target) < 0;
                        },
                        logTarget: 'target',
                        content: function() {
                            'step 0'
                            event.target = trigger.target;
                            player.chooseToCompare(trigger.target, function(card) {
                                var player = get.owner(card);
                                var getn = function(card) {
                                    if (player.hasSkill('tianbian') && get.suit(card) == 'heart') return 13;
                                    return get.number(card);
                                };
                                var event = _status.event.getParent();
                                if (event.player.hasSkill('radiance_nanming') && event.player.getAttackRange() > event.target.getAttackRange()) return 10 - get.value(card);
                                if (event.target.hasSkill('radiance_nanming') && event.target.getAttackRange() > event.player.getAttackRange()) return 10 - get.value(card);

                                var to = (player == event.player ? event.target : event.player);
                                var addi = (get.value(card) >= 8 && get.type(card) != 'equip') ? -10 : 0;
                                if (card.name == 'du') addi -= 5;
                                if (player == event.player) {
                                    return getn(card) - get.value(card) / 2 + addi;
                                } else {
                                    return getn(card) - get.value(card) / 2 + addi;
                                };
                            });
                            'step 1'
                            if (result.bool) {
                                trigger.untrigger();
                                trigger.trigger('shaHit');
                                trigger._result.bool = false;
                                trigger._result.result = null;
                            }
                        },
                        ai: {
                            expose: 0.3,
                        },
                    },
                    "radiance_nanming": {
                        trigger: {
                            player: 'compare',
                            target: 'compare'
                        },
                        forced: true,
                        locked: false,
                        filter: function(event, player) {
                            var num2 = 0;
                            if (player == event.player) {
                                num2 = event.target.getAttackRange();
                            } else {
                                num2 = event.player.getAttackRange();
                            }
                            return player.getAttackRange() > num2;
                        },
                        content: function() {
                            'step 0'
                            game.log(player, '拼点视为赢');
                            if (player == trigger.player) {
                                trigger.num1 = 14;
                            } else {
                                trigger.num2 = 14;
                            }
                        },
                        group: 'radiance_nanming_draw',
                        subfrequent: ['draw'],
                        subSkill: {
                            draw: {
                                trigger: {
                                    global: 'chooseToCompareBegin',
                                },
                                filter: function(event, player) {
                                    if (player == event.player) return true;
                                    if (event.targets) return event.targets.contains(player);
                                    return player == event.target;
                                },
                                frequent: true,
                                content: function() {
                                    player.draw();
                                },
                                sub: true,
                            },
                        },
                    },
                    "radiance_tingzhi": {
                        trigger: {
                            global: "phaseZhunbeiBegin",
                        },
                        direct: true,
                        filter: function(event, player) {
                            return event.player != player && player.hp > 0 && !event.player.hasSkill('radiance_tingzhi_db');
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            event.target = trigger.player;
                            player.chooseControl(['heart', 'diamond', 'club', 'spade', 'cancel2']).set('ai', function(event, player) {
                                if (get.attitude(player, event.target) >= 0) return 'cancel2';

                                var target = event.target;
                                var num = target.getHandcardLimit();
                                var count = target.countCards('h');
                                var bool = false;
                                switch (num) {
                                    case 0:
                                        bool = (player.hp > 1 || count > 2);
                                        break;
                                    case 1:
                                        bool = count > 1 || (player.hp < 2 && count > 3);
                                        break;
                                    case 2:
                                        bool = count > 3 || (player.hp < 2 && count > 5);
                                        break;
                                    case 3:
                                        bool = count > 5;
                                        break;
                                    default:
                                        bool = count > 6;
                                        break;
                                };
                                if (!bool) return 'cancel2';

                                var list = ['heart', 'diamond', 'club', 'spade'];
                                if (target.hp < 2) list.remove('heart');
                                if (target.countCards('h') > 3) list.remove('spade');
                                if (target.getAttackRange() > 2 && target.countCards('h') > 2) list.remove('club');

                                return list.randomGet();
                            }).set('prompt', "是否对" + get.translation(trigger.player) + "发动“停滞”？");
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.loseHp();
                                player.logSkill('radiance_tingzhi', event.target);
                                player.line(event.target);
                                if (Array.isArray(event.target.storage.radiance_tingzhi_suit)) {
                                    event.target.storage.radiance_tingzhi_suit.add(result.control);
                                } else {
                                    event.target.storage.radiance_tingzhi_suit = [result.control];
                                }
                                if (Array.isArray(event.target.storage.radiance_tingzhi_source)) {
                                    event.target.storage.radiance_tingzhi_source.add(player);
                                } else {
                                    event.target.storage.radiance_tingzhi_source = [player];
                                }
                                event.target.addTempSkill('radiance_tingzhi_db');
                            } else {
                                event.finish();
                            }
                        },
                        ai: {
                            expose: 0.1,
                            threaten: 1.5,
                        },
                    },
                    "radiance_tingzhi_db": {
                        charlotte: true,
                        locked: true,
                        debuff: true,
                        mark: true,
                        marktext: "滞",
                        intro: {
                            mark: function(dialog, content, player) {
                                if (!player.storage.radiance_tingzhi_suit || !player.storage.radiance_tingzhi_source) return "很正常";
                                if (player.storage.radiance_tingzhi_suit.length > 1) return "已被完全停止，无法使用任何牌！";
                                return '只能使用' + get.translation(player.storage.radiance_tingzhi_suit) + '牌';
                            },
                        },
                        mod: {
                            cardEnabled2: function(card, player) {
                                if (player.storage.radiance_tingzhi_suit && player.storage.radiance_tingzhi_suit.length > 1) return false;
                                if (!player.storage.radiance_tingzhi_suit.contains(get.suit(card))) {
                                    return false;
                                }
                            },
                        },
                        onremove: function(player, skill) {
                            player.storage.radiance_tingzhi_suit = [];
                            player.storage.radiance_tingzhi_source = [];
                        },
                        ai: {
                            neg: true,
                        },
                    },
                    "radiance_sansheng": {
                        trigger: {
                            global: ['phaseDiscardEnd'],
                        },
                        direct: true,
                        filter: function(event, player) {
                            if (event.player == player) return false;
                            var cards = [];
                            event.player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == event && evt.hs) cards.addArray(evt.hs);
                            });
                            return cards.length > 2;
                        },
                        content: function() {
                            'step 0'
                            player.chooseBool(get.prompt2('radiance_sansheng')).set('ai', function() {
                                return get.attitude(player, trigger.player) < 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_sansheng', trigger.player);
                                player.addExpose(0.6);
                                player.line(trigger.player);
                                trigger.player.damage();
                            }
                        },
                    },
                    "radiance_huisheng": {
                        marktext: '生',
                        trigger: {
                            player: ['damageBegin4', 'phaseJieshuBegin'],
                            global: 'gameDrawAfter',
                        },
                        forced: true,
                        filter: function(event, player) {
                            if (event.name == 'phaseJieshu') return player.countMark("radiance_huisheng") > 1;
                            return event.name != 'damage' || event.num > 0;
                        },
                        content: function() {
                            'step 0'
                            if (trigger.name == 'damage') {
                                player.addMark('radiance_huisheng', trigger.num);
                                trigger.cancel();
                                event.finish();
                            } else if (trigger.name == 'phaseJieshu') {
                                event.num = player.countMark("radiance_huisheng") - 1;
                            } else {
                                player.addMark('radiance_huisheng', 1);
                                event.finish();
                            }
                            'step 1'
                            player.removeMark('radiance_huisheng', event.num);
                            player.loseHp(event.num);
                            'step 2'
                            if (event.num > 0) {
                                player.gain(get.cardPile(function(card) {
                                    return get.name(card) == 'sha';
                                }), 'gain2', 'log');
                                event.num--;
                                event.redo();
                            }
                            'step 3'
                            game.updateRoundNumber();
                        },
                        intro: {
                            name: "生",
                            content: 'mark'
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + player.countMark("radiance_huisheng");
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (target.countMark('radiance_huisheng') > target.hp + 1) return 0;
                                        if (target.countMark('radiance_huisheng') > target.hp) return 0.2;
                                    };
                                },
                            },
                        },
                        action_tag: {
                            combo: 1,
                            damage_prevent: 9,
                            sha_multi: 2,
                            search: 1,
                        },
                    },
                    "radiance_yuanhun": {
                        shaRelated: true,
                        locked: false,
                        group: ["radiance_yuanhun_spade", "radiance_yuanhun_heart", "radiance_yuanhun_club", "radiance_yuanhun_diamond"],
                        subfrequent: ['diamond'],
                        subSkill: {
                            spade: {
                                trigger: {
                                    source: 'damageSource'
                                },
                                filter: function(event, player) {
                                    if (get.name(event.card, player) != 'sha' || get.suit(event.card, player) != 'spade') return false;
                                    return player.hasMark("radiance_huisheng") && event.num > 0 && event.notLink();
                                },
                                prompt2: function(event, player) {
                                    return '移除一个“生”标记';
                                },
                                content: function() {
                                    player.removeMark("radiance_huisheng", 1);
                                },
                            },
                            heart: {
                                trigger: {
                                    source: 'damageBegin1'
                                },
                                filter: function(event, player) {
                                    if (get.name(event.card, player) != 'sha' || get.suit(event.card, player) != 'heart') return false;
                                    return player.hasMark("radiance_huisheng") && event.num > 0 && event.notLink();
                                },
                                prompt2: function(event, player) {
                                    ;
                                    return '令此伤害+' + player.countMark("radiance_huisheng") + '';
                                },
                                content: function() {
                                    trigger.num += player.countMark("radiance_huisheng");
                                },
                            },
                            club: {
                                trigger: {
                                    player: 'useCardToPlayered'
                                },
                                prompt2: function(event, player) {
                                    return '令' + get.translation(event.target) + "额外使用" + get.cnNumber(player.countMark("radiance_huisheng")) + "张【闪】";
                                },
                                filter: function(event, player) {
                                    if (get.name(event.card, player) != 'sha' || get.suit(event.card, player) != 'club') return false;
                                    return player.hasMark("radiance_huisheng");
                                },
                                content: function() {
                                    var num = player.countMark("radiance_huisheng");
                                    var id = trigger.target.playerid;
                                    var map = trigger.getParent().customArgs;
                                    if (!map[id]) map[id] = {};
                                    if (typeof map[id].shanRequired == 'number') {
                                        map[id].shanRequired += num;
                                    } else {
                                        map[id].shanRequired = num + 1;
                                    };
                                },
                            },
                            diamond: {
                                trigger: {
                                    player: 'useCardToPlayered'
                                },
                                frequent: true,
                                prompt2: function(event, player) {
                                    return '摸' + get.cnNumber(player.countMark("radiance_huisheng")) + '张牌';
                                },
                                filter: function(event, player) {
                                    if (get.name(event.card, player) != 'sha' || get.suit(event.card, player) != 'diamond') return false;
                                    return player.hasMark("radiance_huisheng");
                                },
                                content: function() {
                                    var num = player.countMark("radiance_huisheng");
                                    player.draw(num);
                                },
                            },
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (card.name == 'sha' && get.suit(card) == 'club' && player.hasMark("radiance_huisheng")) {
                                    var num = player.getAttackRange(true) + player.countMark("radiance_huisheng");
                                    if (get.distance(player, target) <= num) return true;
                                };
                            },
                            aiValue: function(player, card, num) {
                                if (card.name == 'sha') {
                                    switch (get.suit(card)) {
                                        case 'spade':
                                            return num + 0.1;
                                        case 'heart':
                                            return num + 0.3;
                                        case 'club':
                                            if (player.getAttackRange() <= 1) return num + 0.2;
                                            return num - 0.1;
                                        case 'diamond':
                                            return num + 0.5;
                                    };
                                };
                            },
                            aiUseful: function(player, card, num) {
                                if (card.name == 'sha') {
                                    switch (get.suit(card)) {
                                        case 'spade':
                                            return num + 0.1;
                                        case 'heart':
                                            return num + 0.3;
                                        case 'club':
                                            if (player.getAttackRange() <= 1) return num + 0.2;
                                            return num - 0.1;
                                        case 'diamond':
                                            return num + 0.5;
                                    };
                                };
                            },
                            aiOrder: function(player, card, current) {
                                if (card.name == 'sha' && current > 0) {
                                    switch (get.suit(card)) {
                                        case 'spade':
                                            if (player.countMark('radiance_huisheng') > player.hp) return current + 0.1;
                                            return current - 0.5;
                                        case 'heart':
                                            if (player.countMark('radiance_huisheng') > 0) return current + 0.5;
                                            return current * 0.3;
                                        case 'club':
                                            return current + 0.1;
                                        case 'diamond':
                                            if (player.countMark('radiance_huisheng') > 1) return current + player.countMark('radiance_huisheng');
                                            return current * 0.25;
                                    };
                                };
                            },
                        },
                        ai: {
                            combo: 'radiance_huisheng',
                        },
                        action_tag: {
                            combo: 1,
                            sha_bonus: 2,
                            draw: 0.5,
                            range: 0.5,
                            directHit: 0.5,
                            demand_sha: 1,
                        },
                    },
                    "radiance_juyan": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        intro: {
                            content: '攻击范围-#',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseControl("选择目标", "随机目标", 'cancel2').set('ai', function(event, player) {
                                var unknown = true;
                                for (var i = 0; i < game.players.length; i++) {
                                    if (get.attitude(player, game.players[i]) < 0) {
                                        unknown = false;
                                        break;
                                    };
                                };
                                if (unknown) return 1;
                                var enemies = player.getEnemies();
                                if (enemies.length >= game.players.length / 2 + 1) return 1;
                                return 0;
                            }).set('choiceList', [
                                "选择一名其他角色获得“惧”",
                                "令随机两名其他角色获得“惧”"
                            ]).set('prompt', "惧魇");
                            'step 1'
                            if (result.index == 0) {
                                player.chooseTarget(lib.filter.notMe, 1, true, "选择一名其他角色获得“惧”").set('ai', function(target) {
                                    return -get.attitude(_status.event.player, target);
                                });
                            } else if (result.index == 1) {
                                player.logSkill('radiance_juyan');
                                var targets = game.players.slice(0);
                                targets.remove(player);
                                targets = targets.randomGets(2);
                                game.log(player, "随机选择了", targets, "作为", 'radiance_juyan', "的目标");
                                for (var i = targets.length - 1; i >= 0; i--) {
                                    targets[i].addMark('radiance_juyan', 1);
                                };
                                event.finish();
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('radiance_juyan', target);
                                target.addMark('radiance_juyan', 1);
                            };
                        },
                        mod: {
                            globalTo: function(from, to, distance) {
                                return distance + game.countPlayer(function(current) {
                                    return false;
                                    // return current != to && current.hasMark('radiance_juyan');
                                });
                            },
                        },
                        global: 'radiance_juyan_minus',
                        subSkill: {
                            minus: {
                                mod: {
                                    attackRange: function(player, current) {
                                        if (game.hasPlayer(function(target) {
                                                return target != player && target.hasSkill('radiance_juyan');
                                            })) return current - player.countMark('radiance_juyan');
                                    },
                                },
                                charlotte: true,
                            },
                        },
                    },
                    "radiance_zhuomu": {
                        trigger: {
                            global: 'phaseJieshu',
                        },
                        forced: true,
                        filter: function(event, player) {
                            return event.player != player && !event.player.inRange(player);
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            var choices = ["失去体力", "令其摸牌"];
                            var choiceList = [
                                "失去1点体力并使用一张武器牌",
                                "令" + get.translation(player) + "摸一张牌",
                            ];
                            var next = trigger.player.chooseControl().set('prompt', "灼暮：请选择一项");
                            if (trigger.player.hasMark('radiance_juyan')) {
                                next.set('forced', true);
                                choices.push("移去“惧”");
                                choiceList.push("依次执行另外两项，其中摸牌改为" + get.cnNumber(trigger.player.countMark('radiance_juyan')) + "张，然后移去所有“惧”");
                            } else {
                                choices.push('cancel2');
                            };
                            next.set('controls', choices);
                            next.set('choiceList', choiceList);
                            next.set('ai', function(event, player) {
                                var source = _status.event.getParent().player;
                                if (get.attitude(player, source) > 0 || player.hp <= 1) return 1;
                                if (!player.hasMark('radiance_juyan')) return 2;
                                if (player.getEquip(1) && player.getAttackRange() > 1) return 1;
                                if (player.countMark('radiance_juyan') > 1) return 2;
                                return 0;
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                if (result.index != 1) {
                                    trigger.player.loseHp(1);
                                    var card = get.cardPile(function(cardx) {
                                        return get.subtype(cardx) == 'equip1';
                                    });
                                    if (card && trigger.player.canEquip(card, true)) {
                                        trigger.player.equip(card);
                                    };
                                };
                                if (result.index != 0) {
                                    var num = 1;
                                    if (result.index == 2) {
                                        num = trigger.player.countMark('radiance_juyan');
                                        trigger.player.removeMark('radiance_juyan', num);
                                    };
                                    player.draw(num);
                                };
                            };
                        },
                    },
                    "radiance_moshi": {
                        marktext: "视",
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                if (game.me.hasSkillTag('viewHandcard', true, player)) {
                                    var hs = player.getCards('h');
                                    dialog.addText(get.translation(player) + "的手牌");
                                    if (hs.length) dialog.addSmall(hs);
                                } else {
                                    return "手牌正在被查看";
                                };
                            },
                        },
                        enable: ['chooseToUse', 'chooseToRespond'],
                        usable: 1,
                        filter: function(event, player) {
                            if (event.responded || event.radiance_moshi || player.hasSkill('radiance_moshi_used')) return false;
                            if (game.hasPlayer(function(current) {
                                    if (!current.hasMark('radiance_moshi')) return false;
                                    var hs = current.getCards('h');
                                    for (var i = 0; i < hs.length; i++) {
                                        if (event.filterCard(hs[i], player, event)) return true;
                                    };
                                })) return true;
                            return false;
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var dialog = ui.create.dialog("魔视：选择要用的牌");
                                for (var i = 0; i < game.players.length; i++) {
                                    var target = game.players[i];
                                    if (!target.hasMark('radiance_moshi') || target == player || !target.isIn()) continue;
                                    var hs = target.getCards('h');
                                    if (hs.length < 1) continue;
                                    dialog.addText(get.translation(target) + "的手牌");
                                    dialog.add(hs);
                                };
                                return dialog;
                            },
                            filter: function(button, player) {
                                return _status.event.getParent().filterCard(button.link, player, _status.event.getParent());
                            },
                            check: function(button) {
                                var trigger = _status.event.getParent();
                                var card = button.link;
                                var owner = get.owner(card);
                                var player = _status.event.player;
                                var att = get.attitude(player, owner);
                                if (att > 0 && owner.needsToDiscard() < 2) return -1;
                                if (att > 1 && trigger.type == 'save' && card.name == 'tao') return -1;

                                if (trigger.type == 'phase') {
                                    if (att > 1) return -1;
                                    return player.getUseValue(card) * (1 - att) / Math.max(1, owner.hp);
                                } else if (trigger.ai) {
                                    var tmp = _status.event;
                                    _status.event = trigger;
                                    var result = trigger.ai(card, player, trigger);
                                    _status.event = tmp;
                                    return result * (5 - att) / Math.max(0.5, owner.hp);
                                } else if (_status.event.ai1) {
                                    var tmp = _status.event;
                                    _status.event = trigger;
                                    var result = event.ai1(card, player, trigger);
                                    _status.event = tmp;
                                    return result * (5 - att) / Math.max(0.5, owner.hp);
                                } else if (['shan', 'wuxie'].contains(get.name(card, owner))) {
                                    return (1 - att) / Math.max(1, owner.hp) / owner.countCards('h');
                                };
                                return -1;
                            },
                            backup: function(links, player) {
                                var card = links[0];
                                return {
                                    filterCard: function(card) {
                                        return false;
                                    },
                                    selectCard: -1,
                                    viewAs: get.autoViewAs(card, links),
                                    prompt: '选择' + get.translation(card) + '的目标',
                                    precontent: function() {
                                        delete result.skill;
                                        var name = event.result.card.name;
                                        event.result.cards = event.result.card.cards;
                                        event.result.card = get.autoViewAs(event.result.cards[0]);
                                        event.result.card.name = name;
                                    },
                                    onuse: function(result, player) {
                                        var card = result.cards[0];
                                        var owner = get.owner(card);
                                        player.logSkill('radiance_moshi', owner);
                                        player.line(owner, 'key');
                                        owner.removeMark('radiance_moshi');
                                        if (!owner.isUnknown(player) && get.attitude(player, owner) < 0) player.addExpose(0.1);
                                        player.addTempSkill('radiance_moshi_used');
                                    },
                                    onrespond: function(result, player) {
                                        var card = result.cards[0];
                                        var owner = get.owner(card);
                                        player.logSkill('radiance_moshi', owner);
                                        player.line(owner, 'key');
                                        owner.removeMark('radiance_moshi');
                                        if (!owner.isUnknown(player) && get.attitude(player, owner) < 0) player.addExpose(0.1);
                                        player.addTempSkill('radiance_moshi_used');
                                    },
                                };
                            },
                            prompt: function(links, player) {
                                return '选择' + get.translation(links[0]) + '的目标';
                            },
                        },
                        hiddenCard: function(player, name) {
                            if (player.hasSkill('radiance_moshi_used')) return false;
                            if (game.hasPlayer(function(current) {
                                    if (!current.hasMark('radiance_moshi')) return false;
                                    return current.countCards('h', name) > 0;
                                })) return true;
                            return false;
                        },
                        ai: {
                            respondSha: true,
                            respondShan: true,
                            save: true,
                            viewHandcard: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (tag == 'viewHandcard' && arg.hasMark('radiance_moshi')) return true;
                                if (player.hasSkill('radiance_moshi_used')) return false;
                                var filter = function(card) {
                                    if (tag == 'respondSha') return get.name(card) == 'sha' || get.name(card) == 'hufu' || get.name(card) == 'yuchanqian';
                                    if (tag == 'respondShan') return get.name(card) == 'shan' || get.name(card) == 'hufu';
                                    if (tag == 'save') return get.name(card) == 'tao' || (arg == player && get.name(card) == 'jiu');
                                    return false;
                                };
                                if (game.hasPlayer(function(current) {
                                        if (!current.hasMark('radiance_moshi')) return false;
                                        return current.countCards('h', filter) > 0;
                                    })) return true;
                                return false;
                            },
                            order: function() {
                                return 10;
                            },
                            result: {
                                player: function(player) {
                                    return 1;
                                },
                            },
                        },
                        group: ['radiance_moshi_add'],
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: false,
                            },
                            add: {
                                trigger: {
                                    global: 'gameDrawAfter',
                                    player: 'phaseJieshuBegin',
                                },
                                filter: function(event, player) {
                                    return game.hasPlayer(function(target) {
                                        return target != player && !target.hasMark('radiance_moshi');
                                    });
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    if (trigger.name == 'phaseJieshu') {
                                        player.chooseTarget("令一名角色获得“视”", function(card, player, target) {
                                            return target != player && !target.hasMark('radiance_moshi');
                                        }).set('ai', function(target) {
                                            return (10 - get.attitude(_status.event.player, target)) * Math.max(0.5, target.countCards('h')) / Math.max(0.5, target.hp);
                                        });
                                    } else {
                                        var players = game.filterPlayer(target => target != player && !target.hasMark('radiance_moshi'));
                                        var num = Math.ceil(players.length / 2);
                                        var targets = players.randomGets(num);
                                        player.logSkill('radiance_moshi', targets);
                                        player.line(targets, 'key');
                                        for (var i = 0; i < targets.length; i++) {
                                            var target = targets[i];
                                            target.addMark('radiance_moshi');
                                        };
                                        event.finish();
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('radiance_moshi', target);
                                        target.addMark('radiance_moshi', 1)
                                    };
                                },
                            },
                        },
                        history: {
                            "radiance_moshi_old_backup": {
                                sourceSkill: 'radiance_moshi',
                                precontent: function() {
                                    game.log('is precontent');
                                    delete result.skill;
                                    var name = event.result.card.name;
                                    event.result.cards = event.result.card.cards;
                                    event.result.card = get.autoViewAs(event.result.cards[0]);
                                    event.result.card.name = name;
                                },
                                filterCard: function() {
                                    return false
                                },
                                selectCard: -1,
                                onuse: function(result, player) {
                                    var card = result.cards[0];
                                    var owner = get.owner(card);
                                    player.line(owner, 'key');
                                    owner.removeMark('radiance_moshi');
                                    player.addTempSkill('radiance_moshi_used');
                                },
                            },
                            "radiance_moshi_old": {
                                enable: ['chooseToUse'],
                                filter: function(event, player) {
                                    if (event.responded || event.type == 'wuxie' || event.radiance_moshi || player.hasSkill('radiance_moshi_used')) return false;
                                    if (game.hasPlayer(function(current) {
                                            if (!current.hasMark('radiance_moshi')) return false;
                                            var hs = current.getCards('h');
                                            for (var i = 0; i < hs.length; i++) {
                                                if (event.filterCard(hs[i], player, event)) return true;
                                            };
                                        })) return true;

                                    return false;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var evt = event.getParent(2);
                                    evt.radiance_moshi = true;
                                    var dialog = ui.create.dialog("魔视：选择要用的牌");
                                    for (var i = 0; i < game.players.length; i++) {
                                        var target = game.players[i];
                                        if (!target.hasMark('radiance_moshi') || target == player || !target.isIn()) continue;
                                        var hs = target.getCards('h');
                                        if (hs.length < 1) continue;
                                        dialog.addText(get.translation(target) + "的手牌");
                                        dialog.add(hs);
                                    };
                                    player.chooseButton(dialog).set('filterButton', function(button) {
                                        var trigger = _status.event.getParent(3);
                                        return trigger.filterCard(button.link, trigger.player, trigger);
                                    }).set('ai', function(button) {
                                        var trigger = _status.event.getParent(3);
                                        var card = button.link;
                                        var owner = get.owner(card);
                                        var player = _status.event.player;
                                        var att = get.attitude(player, owner);
                                        if (att > 0 && target.needsToDiscard() < 2) return -1;
                                        if (att > 1 && _status.event.type == 'save' && card.name == 'tao') return -1;

                                        if (trigger && trigger.ai) {
                                            var tmp = _status.event;
                                            _status.event = trigger;
                                            var result = trigger.ai(card, player, trigger);
                                            _status.event = tmp;
                                            return result * (5 - att) / Math.max(0.5, owner.hp);
                                        } else if (_status.event.ai1) {
                                            var tmp = _status.event;
                                            _status.event = trigger;
                                            var result = event.ai1(card, player, trigger);
                                            _status.event = tmp;
                                            return result * (5 - att) / Math.max(0.5, owner.hp);
                                        };
                                        return -1;
                                    });
                                    'step 1'
                                    var evt = event.getParent(2);
                                    if (result.bool && result.links && result.links.length) {
                                        if (evt.type == 'wuxie') {
                                            game.skipwuxie = true;
                                        }
                                        var name = result.links[0].name;
                                        game.broadcastAll(function(result, name) {
                                            lib.skill.radiance_moshi_backup.viewAs = {
                                                name: name,
                                                cards: [result],
                                                isCard: true
                                            };
                                            lib.skill.radiance_moshi_backup.prompt = '选择' + get.translation(result) + '的目标';
                                        }, result.links[0], name);
                                        evt.set('_backupevent', 'radiance_moshi_backup');
                                        evt.backup('radiance_moshi_backup');
                                    };
                                    evt.goto(0);
                                },
                            },
                        },
                    },
                    "radiance_xiongbi": {
                        init: function(player) {
                            player.storage.radiance_xiongbi = false;
                        },
                        mark: true,
                        intro: {
                            content: 'limited'
                        },
                        skillAnimation: 'legend',
                        animationColor: 'key',
                        unique: true,
                        limited: true,
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            if (game.roundNumber <= 1) return false;
                            return !player.storage.radiance_xiongbi && player.countCards('h') > 0;
                        },
                        filterTarget: function(card, player, target) {
                            return target != player;
                        },
                        selectTarget: function() {
                            return ui.selected.cards.length;
                        },
                        multitarget: true,
                        multiline: true,
                        line: 'key',
                        filterCard: function(card) {
                            var suit = get.suit(card);
                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                if (get.suit(ui.selected.cards[i]) == suit) return false;
                            };
                            return true;
                        },
                        complexCard: true,
                        selectCard: [1, 4],
                        check: function(card) {
                            var player = _status.event.player;
                            var count = 0,
                                num = 0,
                                lose = 0;
                            var targets = game.players.filter(function(target) {
                                return target.isIn() && get.attitude(player, target) < -1;
                            });
                            targets.sort(function(a, b) {
                                return get.attitude(player, b) / Math.max(b.hp, 1) - get.attitude(player, a) / Math.max(a.hp, 1);
                            });
                            for (var i = 0; i < targets.length; i++) {
                                if (num > 3) break;
                                var current = targets[i];
                                if (!current.hasMark('radiance_moshi') && lose >= player.hp - 1) continue;
                                if (!current.hasMark('radiance_moshi')) lose++;
                                if (current.hp <= 2) count++;
                                num++;
                            };
                            if (ui.selected.cards.length * 2 < count + num) return 5 - get.value(card, player);
                            return -1;
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_xiongbi = true;
                            player.awakenSkill('radiance_xiongbi');
                            event.targets = targets.slice(0);
                            event.targets.sort(lib.sort.seat);
                            event.count = 0;
                            'step 1'
                            if (event.targets.length) {
                                var target = event.targets.shift();
                                event.target = target;
                                target.loseHp(2);
                                if (target.hasMark('radiance_moshi')) {
                                    target.removeMark('radiance_moshi');
                                } else {
                                    event.count++;
                                };
                                game.delay(0.5);
                                event.redo();
                            };
                            'step 2'
                            if (event.count > 0) player.loseHp(event.count);
                        },
                        ai: {
                            order: 1,
                            result: {
                                target: function(player, target) {
                                    return -2;
                                },
                            },
                        },
                    },

                    // llost
                    "radiance_jibing": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, "极冰：对一名角色造成2（≥3血）/1点伤害，然后防止其受到伤害直至你下个回合或死亡").set('ai', function(target) {
                                var player = _status.event.player;
                                var others = game.filterPlayer(function(current) {
                                    return target != current && get.attitude(player, current) < 0;
                                });
                                var friends = player.getFriends(true);
                                if (others.length == 0 && friends.length > 1) return -1;
                                var eff = get.damageEffect(target, player, player);
                                if (target.hasSkillTag('nodamage')) {
                                    if (target.hasSkill('radiance_jibing_prevent')) return -1;
                                    return get.sgn(get.attitude(player, target));
                                };
                                var num = target.hasSkillTag('noextra') ? 1 : 2;
                                if (target.hp < 3) num = 1;
                                if (eff == 0) {
                                    return 0.1 / get.attitude(player, target);
                                } else if (eff < 0) {
                                    if (target.hp <= num) {
                                        if (player.hasSkill('radiance_dongling') && !player.storage.radiance_dongling.contains(target)) {
                                            if (get.recoverEffect(target, player, player) >= 0 && friends.contains(target)) {
                                                if (['zhu', 'bZhu', 'rZhu'].contains(target.identity)) return 15;
                                                if (target == player) return 9;
                                                return 5 + num;
                                            };
                                        };
                                    };
                                } else {
                                    if (get.attitude(player, target) > 0) return -1;
                                    if (target.hp < num || (target.hp == num && !game.hasPlayer(function(current) {
                                            return current.canSave(target);
                                        }))) return 10;
                                    return 10 / eff;
                                };
                                return -1;
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('radiance_jibing', target);
                                player.line(target, 'water');
                                event.target = target;
                                target.damage(target.hp > 2 ? 2 : 1, 'nocard', player);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            target.addSkill('radiance_jibing_prevent');
                        },
                    },
                    "radiance_jibing_prevent": {
                        trigger: {
                            player: 'damageBefore',
                        },
                        mark: true,
                        marktext: "冰",
                        intro: {
                            content: "防止受到伤害直至$的回合开始或其死亡",
                        },
                        forced: true,
                        charlotte: true,
                        priority: 65535,
                        init: function(player, skill) {
                            if (!player.storage.radiance_jibing_prevent) player.storage.radiance_jibing_prevent = [];
                            player.storage.radiance_jibing_prevent.add(_status.event.player || player);
                        },
                        filter: function(event, player) {
                            for (var i = player.storage.radiance_jibing_prevent.length - 1; i >= 0; i--) {
                                if (player.storage.radiance_jibing_prevent[i].isIn()) return true;
                            };
                            return false;
                        },
                        content: function() {
                            trigger.cancel();
                        },
                        ai: {
                            nofire: true,
                            nothunder: true,
                            noice: true,
                            nodamage: true,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) return 'zerotarget';
                                }
                            },
                        },
                        group: 'radiance_jibing_prevent_clear',
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: ['phaseBefore', 'dieAfter'],
                                },
                                filter: function(event, player) {
                                    return player.storage.radiance_jibing_prevent.contains(event.player);
                                },
                                forced: true,
                                silent: true,
                                firstDo: true,
                                content: function() {
                                    player.storage.radiance_jibing_prevent.remove(trigger.player);
                                    if (player.storage.radiance_jibing_prevent.length < 1) player.removeSkill('radiance_jibing_prevent');
                                },
                            },
                        },
                    },
                    "radiance_dongling": {
                        trigger: {
                            global: 'damageBegin4',
                        },
                        filter: function(event, player) {
                            if (event.num < event.player.hp) return false;
                            if (!player.storage.radiance_dongling.contains(event.player)) return true;
                            return false;
                        },
                        init: function(player, skill) {
                            if (!player.storage.radiance_dongling) player.storage.radiance_dongling = [];
                        },
                        firstDo: true,
                        logTarget: 'player',
                        check: function(event, player) {
                            return get.attitude(player, event.player) > 1; //&& get.recoverEffect(event.player, player, player) > 0;
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_dongling.add(trigger.player);
                            trigger.cancel();
                            // trigger.player.recover(trigger.num);
                        },
                    },
                    "radiance_dianxing": {
                        trigger: {
                            global: 'roundStart',
                        },
                        marktext: "星",
                        intro: {
                            content: "准备阶段时拥有“点星”的角色将摸一张牌",
                        },
                        direct: true,
                        filter: function(event, player) {
                            return game.countPlayer(function(target) {
                                return target.hasMark('radiance_dianxing');
                            }) < player.maxHp;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, get.prompt2('radiance_dianxing'), function(card, player, target) {
                                return !target.hasMark('radiance_dianxing');
                            }).set('ai', function(target) {
                                return target.hp / (1 + get.distance(_status.roundStart, target, 'absolute'));
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_dianxing', result.targets[0]);
                                result.targets[0].addMark('radiance_dianxing');
                            };
                        },
                        group: ['radiance_dianxing_draw', 'radiance_dianxing_die'],
                        subSkill: {
                            draw: {
                                trigger: {
                                    global: 'phaseZhunbei',
                                },
                                filter: function(event, player) {
                                    return event.player.hasMark('radiance_dianxing');
                                },
                                forced: true,
                                content: function() {
                                    player.draw();
                                },
                            },
                            die: {
                                trigger: {
                                    player: 'die',
                                    global: 'dieAfter',
                                },
                                filter: function(event, player, name) {
                                    if (name == 'dieAfter') return event.player.hasMark('radiance_dianxing') && player.isIn();
                                    return true;
                                },
                                direct: true,
                                forceDie: true,
                                content: function() {
                                    'step 0'
                                    if (trigger.player != player) {
                                        player.logSkill('radiance_dianxing');
                                        // player.chooseDrawRecover(2, 1);
                                        player.recover();
                                        event.finish();
                                        return;
                                    };
                                    game.filterPlayer(function(target) {
                                        return target.removeMark('radiance_dianxing');
                                    });
                                    player.chooseTarget("令一名角色获得“点星”", function(card, player, target) {
                                        return player != target && !target.hasSkill('radiance_dianxing');
                                    }).set('forceDie', true).set('ai', function(target) {
                                        var num = get.attitude(_status.event.player, target);
                                        num *= target.hp;
                                        return num;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('radiance_dianxing', target);
                                        player.line(target, 'green');
                                        target.addSkill('radiance_dianxing');
                                    };
                                },
                            },
                        },
                    },
                    "radiance_fangzhou": {
                        unique: true,
                        enable: 'phaseUse',
                        mark: true,
                        limited: true,
                        animationColor: 'water',
                        skillAnimation: true,
                        intro: {
                            content: 'limited'
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_fangzhou != 'boolean') player.storage.radiance_fangzhou = false;
                        },
                        filter: function(event, player) {
                            return (!player.storage.radiance_fangzhou);
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_fangzhou');
                            'step 1'
                            event.cards = get.cards(4);
                            game.cardsGotoOrdering(event.cards);
                            player.showCards(event.cards);
                            var bool1 = 0,
                                bool2 = 0,
                                bool3 = 0,
                                bool4 = 0;
                            for (var i = 0; i < 4; i++) {
                                if (get.suit(event.cards[i]) != 'spade') bool1 = 1;
                                if (get.suit(event.cards[i]) == 'heart') bool2 = 1;
                                if (get.type2(event.cards[i]) == 'equip') bool3 = 1;
                                if (get.name(event.cards[i]) == 'shan') bool4 = 1;
                            };
                            event.num = bool1 + bool2 + bool3 + bool4;
                            'step 2'
                            player.chooseTarget(true, "令一名角色获得" + get.translation(cards), function(card, player, target) {
                                return true;
                            }).set('ai', function(target) {
                                if (target.hasSkillTag('nogain')) return -1;
                                var num = get.attitude(_status.event.player, target);
                                num /= Math.max(1, target.hp);
                                return num;
                            });
                            'step 3'
                            if (result.bool) {
                                player.line(result.targets, 'water');
                                var target = result.targets[0];
                                target.gain(cards, 'gain2');
                            };
                            if (num < 1) event.finish();
                            'step 4'
                            num = Math.min(num, game.countPlayer());
                            player.chooseTarget(num, true, "令" + num + "名角色获得伤害免疫直至各自回合开始", function(card, player, target) {
                                return true;
                            }).set('ai', function(target) {
                                if (target.hasSkill('radiance_wudi')) return 0;
                                var num = get.attitude(_status.event.player, target);
                                num /= Math.max(1, target.hp);
                                if (target.isTurnedOver()) num *= 3;
                                return num;
                            });
                            'step 5'
                            if (result.bool && result.targets) {
                                player.line(result.targets, 'water');
                                for (var i = 0; i < result.targets.length; i++) {
                                    result.targets[i].addTempSkill('radiance_wudi', {
                                        player: 'phaseBefore',
                                    });
                                };
                            };
                        },
                        ai: {
                            order: function(item, player) {
                                return 10;
                            },
                            result: {
                                player: function(player) {
                                    var friends = player.getFriends(true);
                                    var zhu = get.zhu(player);
                                    if (player.hp <= 2) return 10;
                                    if (zhu && friends.contains(zhu) && zhu.hp <= 2) return 10;
                                    if (game.countPlayer(function(target) {
                                            return get.attitude(player, target) > 0;
                                        }) >= friends.length) return 10;
                                    return 0;
                                },
                            },
                        },
                    },


                    // ffree
                    "radiance_weiyong": {
                        trigger: {
                            global: 'phaseUseBegin'
                        },
                        filter: function(event, player) {
                            return !event.player.hasSkill('radiance_weiyong') && !event.player.hasSkill('radiance_weiyong_give');
                        },
                        locked: true,
                        direct: true,
                        shaRelated: true,
                        content: function() {
                            'step 0'
                            player.chooseCard('h', 1, '是否交给' + get.translation(trigger.player) + '一张红色手牌令其获得“威勇”的效果？', function(card) {
                                return get.color(card) == 'red';
                            }).set('ai', function(card) {
                                if (trigger.player.hasSkill('radiance_tingzhi_db') || get.attitude(player, trigger.player) < 1) return 0;
                                if (trigger.player.countCards('h', 'sha') > 0) return 5 - get.value(card);
                                if (trigger.player.countCards('h', 'sha') < 1 && get.name(card) == 'sha') return 6 - get.value(card);
                                return 0;
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_weiyong', trigger.player);
                                trigger.player.gain(result.cards, player, 'give');
                                trigger.player.addTempSkill('radiance_weiyong_give');
                                game.delay();
                            };
                        },
                        group: 'radiance_weiyong_give',
                        ai: {
                            expose: 0.2,
                        }
                    },
                    "radiance_weiyong_give": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        filter: function(event) {
                            return event.card.name == 'sha';
                        },
                        forced: true,
                        charlotte: true,
                        logTarget: 'target',
                        content: function() {
                            var id = trigger.target.playerid;
                            var map = trigger.getParent().customArgs;
                            if (!map[id]) map[id] = {};
                            if (typeof map[id].shanRequired == 'number') {
                                map[id].shanRequired += 1;
                            } else {
                                map[id].shanRequired = 2;
                            }
                        },
                        mod: {
                            globalFrom: function(from, to, distance) {
                                return distance - 1;
                            },
                        },
                    },
                    "radiance_yingzhi": {
                        trigger: {
                            global: 'shaHit'
                        },
                        filter: function(event, player) {
                            if (!event.player.isIn()) return false;
                            return !player.storage.radiance_yingzhi.contains(event.target);
                        },
                        check: function(event, player) {
                            return true;
                        },
                        init: function(player) {
                            if (!player.storage.radiance_yingzhi) player.storage.radiance_yingzhi = [];
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_yingzhi.add(trigger.target);
                            'step 1'
                            var num = 1;
                            if (trigger.player.hasSkill('radiance_weiyong') || trigger.player.hasSkill('radiance_weiyong_give')) num++;
                            player.draw(num);
                        },
                        global: 'radiance_yingzhi_clear',
                        subSkill: {
                            clear: {
                                trigger: {
                                    global: 'roundStart'
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                silent: true,
                                firstDo: true,
                                filter: function(event, player) {
                                    return player.storage.radiance_yingzhi && player.storage.radiance_yingzhi.length > 0;
                                },
                                content: function() {
                                    'step 0'
                                    player.storage.radiance_yingzhi.length = 0;
                                },
                            },
                        },
                    },
                    "radiance_chilie": {
                        trigger: {
                            player: ['phaseZhunbeiBegin', 'phaseJudgeBefore', 'phaseJieshuBegin'],
                        },
                        forced: true,
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            if (trigger.name == 'phaseZhunbei') {
                                player.draw(Math.max(player.getDamagedHp() + 1, 2));
                            } else if (trigger.name == 'phaseJudge') {
                                trigger.cancel();
                            } else {
                                player.loseHp();
                            }
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                return true;
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                            maxHandcardFinal: function(player, num) {
                                return Math.max(num, player.hp) + game.countPlayer();
                                // return Infinity;
                            },
                        },
                        ai: {
                            threaten: 1.5,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.type(card) == 'delay') return 0;
                                },
                            },
                        },
                    },
                    "radiance_yaoguang": {
                        trigger: {
                            player: ['useCard', 'respond'],
                        },
                        init: function(player, skill) {
                            if (!Array.isArray(player.storage.radiance_yaoguang)) player.storage.radiance_yaoguang = [];
                        },
                        marktext: "光",
                        intro: {
                            mark: function(dialog, content, player, storage, skill) {
                                var list = [];
                                for (var i = 0; i < player.storage.radiance_yaoguang.length; i++) {
                                    var name = player.storage.radiance_yaoguang[i];
                                    if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                };
                                dialog.addSmall([list, 'vcard']);
                            },
                        },
                        filter: function(event, player) {
                            return get.type(event.card, player) == 'basic' && !player.storage.radiance_yaoguang.contains(get.name(event.card, player));
                        },
                        frequent: true,
                        content: function() {
                            player.storage.radiance_yaoguang.add(get.name(trigger.card, player));
                            player.markSkill('radiance_yaoguang');
                            player.draw();
                        },
                        ai: {
                            threaten: 2.2,
                        },
                        global: 'radiance_yaoguang_clear',
                        subSkill: {
                            clear: {
                                trigger: {
                                    player: 'changeHp'
                                },
                                forced: true,
                                charlotte: true,
                                popup: false,
                                silent: true,
                                firstDo: true,
                                usable: 1,
                                filter: function(event, player) {
                                    return player.storage.radiance_yaoguang && event.num != 0;
                                },
                                content: function() {
                                    'step 0'
                                    player.storage.radiance_yaoguang.length = 0;
                                    player.unmarkSkill('radiance_yaoguang');
                                },
                            },
                        },
                    },
                    "radiance_bengyao": {
                        trigger: {
                            player: 'die'
                        },
                        forced: true,
                        skillAnimation: 'epic',
                        animationColor: 'metal',
                        forceDie: true,
                        filter: function(event, player) {
                            return event.source && event.source.isIn();
                        },
                        logTarget: 'source',
                        content: function() {
                            trigger.source.addSkill('radiance_bengyao_db');
                        },
                    },
                    "radiance_bengyao_db": {
                        trigger: {
                            player: 'phaseJieshu'
                        },
                        mark: true,
                        intro: {
                            content: '在结束阶段受到1点火焰伤害'
                        },
                        mark: true,
                        forced: true,
                        charlotte: true,
                        debuff: true,
                        content: function() {
                            'step 0'
                            player.damage(1, 'nosource', 'nocard', 'fire');
                        },
                        ai: {
                            neg: true,
                        }
                    },
                    "radiance_yingxue": {
                        trigger: {
                            player: ['damageEnd', 'phaseZhunbeiBegin'],
                            source: 'damageSource',
                        },
                        filter: function(event, player) {
                            if (event.name != 'damage') return true;
                            return event.num > 0;
                        },
                        marktext: "血",
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                dialog.addText("与其他角色计算距离时-" + storage + "，可以额外使用" + storage + "张【杀】");
                                if (player.stat[player.stat.length - 1].card.sha) {
                                    dialog.addText("本回合已使用" + player.stat[player.stat.length - 1].card.sha + "张【杀】");
                                };
                            },
                        },
                        init: function(player) {
                            if (!player.storage.radiance_yingxue) player.storage.radiance_yingxue = 0;
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            if (!event.count) event.count = trigger.num;
                            event.count--;
                            player.chooseControl(['摸牌', '获得血', 'cancel2'], function(event, player) {
                                if (player != _status.currentPhase) return 0;
                                if (player.countUsed('sha', true) > 0 && player.hasCard('sha', 'h')) return 1;

                                if (player.needsToDiscard() < 2) return 1;
                                return 0;
                            }).set('prompt', get.prompt("radiance_yingxue") + "（已使用" + player.countUsed('sha') + "张杀）").set('choiceList', [
                                '摸一张牌',
                                '与其他角色计算距离时-1，可以额外使用一张【杀】，结束阶段摸一张牌',
                            ]);
                            'step 1'
                            if (result.index == 0) {
                                player.logSkill('radiance_yingxue');
                                player.draw();
                            } else if (result.index == 1) {
                                player.logSkill('radiance_yingxue');
                                player.addMark('radiance_yingxue', 1);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (event.count > 0) event.goto(0);
                        },
                        global: "radiance_yingxue_end",
                        subSkill: {
                            end: {
                                trigger: {
                                    player: 'phaseJieshuBegin'
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player) {
                                    return player.storage.radiance_yingxue && player.storage.radiance_yingxue > 0;
                                },
                                content: function() {
                                    'step 0'
                                    player.logSkill('radiance_yingxue');
                                    var num = player.storage.radiance_yingxue;
                                    player.removeMark('radiance_yingxue', num);
                                    player.draw(num);
                                },
                            },
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + player.storage.radiance_yingxue;
                            },
                            globalFrom: function(from, to, current) {
                                return current - from.storage.radiance_yingxue;
                            },
                        },
                    },
                    "radiance_zhoufa": {
                        trigger: {
                            player: 'die'
                        },
                        forced: true,
                        forceDie: true,
                        skillAnimation: true,
                        animationColor: 'thunder',
                        filter: function(event) {
                            return event.source && event.source.isIn();
                        },
                        content: function() {
                            trigger.source.addSkill('radiance_zhoufa_db');
                            if (!trigger.source.hasJudge('shandian')) {
                                var card = get.cardPile('shandian', 'field');
                                if (!card) card = game.createCard('shandian');
                                trigger.source.$draw(card);
                                trigger.source.addJudge(card);
                                game.delay();
                            }
                        },
                        logTarget: 'source',
                        ai: {
                            threaten: function(viewer, player) {
                                if (!player.hasFriend()) return 1;
                                if (player.hp == 1) return 0.2;
                                return 1.5;
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (!target.hasFriend()) return;
                                    if (target.hp <= 1 && get.tag(card, 'damage')) {
                                        var bool = !player.hasFriend() || get.zhu(player) == player || player.identity == 'nei';
                                        if (player.getEnemies().length > 1 && bool) return [1, 0, 0, -3];
                                        if (!bool && player.hp < 2 && get.attitude(player, target) < 0) return [1, 0, 1, 2];
                                        return [1, 0, 1, -2];
                                    };
                                },
                            },
                        },
                    },
                    "radiance_zhoufa_db": {
                        charlotte: true,
                        debuff: true,
                        mark: true,
                        marktext: '罚',
                        intro: {
                            name: '咒罚',
                            content: '【闪电】的效果必中',
                        },
                        mod: {
                            judge: function(player, result) {
                                if (_status.event.cardname == 'shandian') {
                                    result.bool = false;
                                    result.judge = -6;
                                }
                            }
                        },
                        ai: {
                            neg: true,
                            effect: {
                                player: function(card, player, target) {
                                    if (get.name(card) == 'shandian') return [0, -5, 1, 0];
                                },
                                target: function(card, player, target) {
                                    if (get.name(card) == 'shandian') return [0, -5, 1, 0];
                                },
                            },
                        }
                    },
                    "radiance_zhanque": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        filter: function(event) {
                            return event.card.name == 'sha';
                        },
                        logTarget: 'target',
                        shaRelated: true,
                        check: function(event, player) {
                            return get.attitude(player, target) < 0;
                        },
                        content: function() {
                            'step 0'
                            trigger.target.chooseTarget('斩却：选择一名响应的其他角色', true, function(card, player, target) {
                                return target != _status.event.player;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.attitude(target, player) * target.countCards('h');
                            });
                            'step 1'
                            if (result.bool) {
                                event.target2 = result.targets[0];
                                trigger.target.line(event.target2);
                                game.log(trigger.target, "选择了", event.target2);
                                event.target2.chooseToRespond({
                                    name: 'shan'
                                }).set('ai', function(card) {
                                    var trigger = _status.event.getTrigger();
                                    var player = _status.event.player;
                                    if (get.attitude(player, trigger.target) <= 0) return 0;
                                    if (get.effect(trigger.target, trigger.card, trigger.player, player) > get.effect(player, {
                                            name: 'sha',
                                            isCard: true,
                                        }, trigger.player, player)) return 0;
                                    return 10 - get.useful(card);
                                }).set('prompt', "打出一张【闪】，否则" + get.translation(trigger.target) + "会额外受到【杀】的伤害");
                            };
                            'step 2'
                            if (!result.bool) {
                                trigger.target.damage().set('card', trigger.card).set('cards', trigger.cards).set('nature', get.nature(trigger.card));
                            };
                        },
                    },
                    "radiance_xiangyun": {
                        trigger: {
                            player: ['useCard', 'respond'],
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player, name) {
                            if (get.suit(event.card) != 'heart') return false;
                            if (name == 'useCardToTargeted' && 1 == 0) return event.player != event.target;
                            return true;
                        },
                        frequent: true,
                        locked: false,
                        content: function() {
                            player.draw();
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current, isLink) {
                                    if (current <= 0) return;
                                    var att_cur = get.sgn(get.attitude(player, target)) * 0.3;
                                    if (get.suit(card) == 'heart') return [1, 0, 1, att_cur]; // [对目标效果倍率，对目标效果加算，使用者收益倍率，使用者收益加算]
                                },
                                player: function(card, player, target, current) {
                                    if (current <= 0) return;
                                    if (get.suit(card) == 'heart') return [1, 0.3, 1, 0]; // [使用者收益倍率，使用者收益加算，对目标效果倍率，对目标效果加算]
                                },
                            },
                        },
                        mod: {
                            aiValue: function(player, card, num) {
                                if (get.suit(card) == 'heart') {
                                    return num * 1.1;
                                }
                            },
                            aiUseful: function(player, card, num) {
                                if (get.suit(card) == 'heart') {
                                    return num * 1.1;
                                }
                            },
                            aiOrder: function(player, card, num) {
                                if (get.suit(card) == 'heart' && num > 0) {
                                    if (player.needsToDiscard()) return num - 0.5;
                                    return num + 0.5;
                                }
                            },
                            ignoredHandcard: function(card, player) {
                                if (get.suit(card) == 'heart') {
                                    return true;
                                };
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && get.suit(card) == 'heart') {
                                    return false;
                                };
                            },
                        },
                    },
                    "radiance_suping": {
                        trigger: {
                            player: 'phaseUseBegin'
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_suping'), function(card, player, target) {
                                return player.canCompare(target);
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.damageEffect(target, player, player) / (target.countCards('h') + 0.5);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_suping', target);
                                player.chooseToCompare(target);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                var cards = target.getCards('h');
                                player.addTempSkill('radiance_suping_af');
                                target.addTempSkill('radiance_suping_db');
                                if (cards.length > 0) {
                                    target.addToExpansion(cards, 'giveAuto', target).gaintag.add('radiance_suping_db');
                                };
                            } else {
                                target.addTempSkill('radiance_suping_target');
                                event.finish();
                            };
                            'step 3'
                            player.chooseTarget("是否令一名其他角色获得“肃平”？", function(card, player, target) {
                                return target != player && !target.hasSkill('radiance_suping') && !target.hasSkill('radiance_suping_give');
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.attitude(player, target) / (get.distance(player, target, 'absolute') + 0.5) * (1 + Math.sqrt(target.countCards('h')));
                            });
                            'step 4'
                            if (result.bool) {
                                player.line(result.targets[0]);
                                game.log(result.targets, "获得了", 'radiance_suping');
                                result.targets[0].addTempSkill('radiance_suping_give', {
                                    player: 'phaseAfter',
                                });
                                result.targets[0].markSkill('radiance_suping_give');
                                if (result.targets[0].ai.shown > 0) player.addExpose(0.1);
                            };
                        },
                        ai: {
                            expose: 0.3,
                        },
                        subSkill: {
                            target: {
                                charlotte: true,
                                locked: true,
                                mod: {
                                    targetEnabled: function(card, player, target, now) {
                                        if (player == _status.currentPhase && player != target) {
                                            return false;
                                        }
                                    },
                                },
                            },
                            af: {
                                charlotte: true,
                                locked: true,
                                mod: {
                                    cardUsable: function(card, player, num) {
                                        if (card.name == 'sha') return num + 1;
                                    },
                                    globalFrom: function(from, to, distance) {
                                        if (to.hasSkill('radiance_suping_db')) return -Infinity;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_suping_db": {
                        trigger: {
                            global: 'phaseEnd'
                        },
                        forced: true,
                        popup: false,
                        charlotte: true,
                        filter: function(event, player) {
                            return player.getExpansions('radiance_suping_db').length > 0;
                        },
                        content: function() {
                            'step 0'
                            var cards = player.getExpansions('radiance_suping_db');
                            player.gain(cards, 'draw');
                            game.log(player, '收回了' + get.cnNumber(cards.length) + '张“肃平”牌');
                            'step 1'
                            player.removeSkill('radiance_suping_db');
                        },
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, storage, player) {
                                var list = player.getSkills(null, false, false).filter(function(i) {
                                    return lib.skill.radiance_suping_db.skillBlocker(i, player);
                                });
                                if (list.length) dialog.addText("失效技能：" + get.translation(list));

                                var cards = player.getExpansions('radiance_suping_db');
                                if (player.isUnderControl(true)) dialog.addAuto(cards);
                                else return '共有' + get.cnNumber(cards.length) + '张牌';
                            },
                        },
                        init: function(player, skill) {
                            player.addSkillBlocker(skill);
                        },
                        onremove: function(player, skill) {
                            player.removeSkillBlocker(skill);
                        },
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte && !get.is.locked(skill, player);
                        },
                    },
                    "radiance_suping_give": {
                        mark: true,
                        intro: {
                            content: "当前拥有“肃平”技能",
                        },
                        trigger: {
                            player: 'phaseUseBegin'
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_suping'), function(card, player, target) {
                                return player.canCompare(target);
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                return get.damageEffect(target, player, player) / (target.countCards('h') + 0.5);
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_suping', target);
                                player.chooseToCompare(target);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                var cards = target.getCards('h');
                                player.addTempSkill('radiance_suping_af');
                                target.addTempSkill('radiance_suping_db');
                                if (cards.length > 0) {
                                    target.addToExpansion(cards, 'giveAuto', target).gaintag.add('radiance_suping_db');
                                };
                            } else {
                                player.getHistory('custom').push({
                                    radiance_suping: target,
                                });
                                event.finish();
                            };
                        },
                        ai: {
                            expose: 0.3,
                        },
                    },
                    "radiance_xiaohu": {
                        trigger: {
                            global: 'compare',
                        },
                        filter: function(event, player) {
                            if (player.isTurnedOver()) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_xiaohu'), function(card, player, target) {
                                var trigger = _status.event.getTrigger();
                                return target == trigger.player || target == trigger.target;
                            }).set('ai', function(target) {
                                var trigger = _status.event.getTrigger();
                                var att1 = get.attitude(_status.event.player, trigger.player);
                                var att2 = get.attitude(_status.event.player, trigger.target);
                                if ((att1 < 1 || trigger.num1 > trigger.num2) && target == trigger.player) return -1;
                                if ((att2 < 1 || trigger.num1 <= trigger.num2) && target == trigger.target) return -1;
                                var source = trigger.getParent();
                                if (source.name && (lib.skill[source.name] || lib.card[source.name])) {
                                    var name = source.name;
                                    if (name == 'radiance_suping') {
                                        if (att1 > 1 && target == trigger.player && target.countCards('hs') > 2) return 1;
                                        if (att2 > 1 && target == trigger.target && trigger.player.countCards('hs') > 2 && target.hp <= 2) return 1;
                                        return -1;
                                    } else {
                                        if (att1 > 1 && target == trigger.player && target.countCards('hs') > 3) return 1;
                                        if (att2 > 1 && target == trigger.target && trigger.player.countCards('hs') > 2 && target.hp <= 1) return 1;
                                    };
                                };
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                trigger.untrigger(true);
                                player.logSkill('radiance_xiaohu', target);
                                game.log(target, '拼点视为赢');
                                if (target == trigger.player) {
                                    trigger.num1 = 15;
                                    trigger.num2 = get.number(trigger.card2);
                                } else {
                                    trigger.num2 = 15;
                                    trigger.num1 = get.number(trigger.card1);
                                };
                            } else {
                                event.finish();
                            };
                            'step 2'
                            var togain = [trigger.card1, trigger.card2].filterInD('cod');
                            var card1 = get.cardPile(function(card) {
                                return get.number(card) <= Math.max(get.number(trigger.card1), get.number(trigger.card2)) && get.number(card) >= Math.min(get.number(trigger.card1), get.number(trigger.card2));
                            });
                            if (card1) togain.push(card1);
                            var card2 = get.cardPile(function(card) {
                                return card != card1 && get.number(card) <= Math.max(get.number(trigger.card1), get.number(trigger.card2)) && get.number(card) >= Math.min(get.number(trigger.card1), get.number(trigger.card2));
                            });
                            if (card2) togain.push(card2);
                            if (togain.length) {
                                player.gain(togain, 'gain2');
                                player.turnOver();
                            };
                        },
                    },
                    "radiance_baiyi": {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            if (player == target) return false;
                            return true;
                        },
                        filterCard: true,
                        selectCard: [1, Infinity],
                        position: "h",
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        check: function(card) {
                            if (!ui.selected.cards.length) return 7 - get.value(card);
                            return 5 - get.value(card);
                        },
                        content: function() {
                            'step 0'
                            event.num = cards.length;
                            var str = "弃置" + get.cnNumber(event.num + 1) + "张牌，或受到1点伤害并令" + get.translation(player) + "摸" + get.cnNumber(event.num) + "张牌";
                            target.chooseToDiscard('he', str, event.num + 1).set('ai', function(card) {
                                if (!target.hasSkillTag('nodamage')) return 8 - _status.event.player.hp - get.value(card);
                                return 0;
                            });
                            'step 1'
                            if (!result.bool) {
                                target.damage(1, 'nocard');
                            } else {
                                event.finish();
                            }
                            'step 2'
                            player.draw(event.num);
                        },
                        ai: {
                            order: 11,
                            result: {
                                target: function(player, target) {
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    var cs = ui.selected.cards.length;
                                    var hs = target.countCards('h') * 2;

                                    if (hs > cs) {
                                        return Math.min(get.damageEffect(target, player) + hs - cs, -1);
                                    } else {
                                        return get.damageEffect(target, player);
                                    }
                                    return 0;
                                },
                            },
                        },
                        action_tag: {
                            overall: 5,
                            damage: 1,
                            change: 1,
                            discard: 0.5,
                            in: 1,
                        }
                    },
                    "radiance_fengxing": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        filter: function(event, player) {
                            if (player.hp < 1) return false;
                            var card = event.card;
                            return (get.name(card) == 'sha');
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并取消【' + get.translation(event.card) + '】？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            var card = event.card;
                            var eff = get.effect(player, card, event.player, player);
                            if (eff >= 1) return false;
                            if (player.hp > 1 && get.attitude(player, event.player) > 0) return true;

                            var id = player.playerid;
                            var map = event.getParent().customArgs;
                            var need = 1;
                            if (get.tag(card, 'respondShan')) {
                                if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                                if (player.countCards('hs', {
                                        name: 'shan'
                                    }) < need) {
                                    return true;
                                };
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            'step 1'
                            game.delayx();
                            trigger.getParent().targets.remove(player);
                            trigger.getParent().triggeredTargets2.remove(player);
                            'step 2'
                            event.cards = get.cards(2);
                            game.cardsGotoOrdering(event.cards);
                            player.showCards(event.cards, '风行');
                            'step 3'
                            var max = Math.max(get.number(event.cards[0]), get.number(event.cards[1]));
                            var min = Math.min(get.number(event.cards[0]), get.number(event.cards[1]));
                            var str = (max == min) ? '弃置一张点数与' + min + '相同的手牌' : '弃置一张点数在[' + min + ', ' + max + ']之间的手牌';
                            str += '，或令' + get.translation(player) + '回复1点体力';
                            trigger.player.chooseToDiscard('h', str, 1, function(card) {
                                var num = get.number(card);
                                return num <= max && num >= min;
                            }).set('ai', function(card) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.getParent().player;
                                var cards = _status.event.getParent().cards;

                                if (get.effect(player, trigger.card, trigger.player, _status.event.player) <= 0) return 0;
                                if (get.attitude(trigger.player, player) >= 0) return 0;
                                if (get.tag(cards[0], 'save') || get.tag(cards[1], 'save')) return 0;
                                return 7.1 - get.value(card);
                            });
                            'step 4'
                            if (result.bool) {
                                player.gain(event.cards, 'gain2', 'log');
                            } else {
                                player.recover();
                            };
                        },
                        ai: {
                            threaten: 1.6,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.name(card) != 'sha') return;
                                    if (target.hp > 1 && get.attitude(player, target) > 0) return 0;
                                    return Math.min(0.5, player.countCards('h') / 10);
                                }
                            }
                        },
                        action_tag: {
                            overall: 5,
                            loseHp_defend: 3,
                        }
                    },
                    "radiance_wanxiang": {
                        trigger: {
                            player: 'phaseUseBegin'
                        },
                        direct: true,
                        locked: false,
                        filter: function(event, player) {
                            return player.countCards('h') > 0;
                        },
                        content: function() {
                            'step 0'
                            player.chooseTarget(get.prompt2('radiance_wanxiang'), function(card, player, target) {
                                return player.canCompare(target);
                            }).set('ai', function(target) {
                                return -get.attitude(_status.event.player, target) / target.countCards('h');
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_wanxiang', result.targets[0]);
                                player.chooseToCompare(result.targets[0]);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool) {
                                if (['c', 'o', 'd'].contains(get.position(result.player))) player.gain(result.player, 'gain2', 'log');
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    var name = lib.inpile[i];
                                    if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                };
                                list.sort(lib.sort.card);
                                event.list = list;
                                if (list.length == 0) {
                                    event.finish();
                                    return ui.create.dialog('万象无可用牌');
                                };
                            } else {
                                player.addTempSkill('radiance_wanxiang_db');
                                if (['c', 'o', 'd'].contains(get.position(result.target))) player.gain(result.target, 'gain2', 'log');
                                event.finish();
                            };
                            'step 3'
                            var dialog = ui.create.dialog('视为使用一张非延时类锦囊牌', [event.list, 'vcard']);
                            player.chooseButton(dialog, true).set('ai', function(button) {
                                if (['wugu', 'jiedao'].contains(button.link[2])) return 0;
                                var effect = player.getUseValue(button.link[2], false);
                                if (effect > 0) return effect;
                                return 0;
                            }).set('filterButton', function(button) {
                                return _status.event.player.hasUseTarget({
                                    name: button.link[2],
                                    isCard: true,
                                }, false);
                            });
                            'step 4'
                            if (result.bool) {
                                player.chooseUseTarget({
                                    name: result.links[0][2]
                                }, false, 'nodistance').set('forced', true).set('logSkill', 'radiance_wanxiang');
                            }
                        },
                        action_tag: {
                            overall: 6,
                            discard: 1,
                            trick_viewAs: 2,
                            maxHand: 0.5,
                            negative: 0.5,
                        },
                    },
                    "radiance_wanxiang_db": {
                        charlotte: true,
                        forced: true,
                        debuff: true,
                        mod: {
                            cardEnabled2: function(card, player) {
                                if (get.type(card, 'trick', player) == 'trick') {
                                    return false;
                                }
                            },
                            ignoredHandcard: function(card, player) {
                                if (get.type(card, 'trick', player) == 'trick') {
                                    return true;
                                }
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && get.type(card, 'trick', player) == 'trick') {
                                    return false;

                                };
                            },
                        },
                        ai: {
                            neg: true,
                        },
                    },
                    "radiance_qiongjiu": {
                        trigger: {
                            target: 'useCardToTargeted',
                        },
                        filter: function(event, player) {
                            if (player == event.player) return false;
                            if (player.hp < 1) return false;

                            var card = event.card;
                            if (get.name(card) == 'sha' || get.type(card) == 'trick') return true;
                            return false;
                        },
                        prompt: function(event, player) {
                            return '是否失去1点体力并无效【' + get.translation(event.card) + '】对你的效果？';
                        },
                        check: function(event, player) {
                            if (event.getParent().excluded.contains(player)) return false;
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;
                            var card = event.card;
                            var id = player.playerid;
                            var map = event.getParent().customArgs;
                            var need = 1;
                            if (get.tag(card, 'respondSha')) {
                                if (map[id] && typeof map[id].shaReq == 'number') need = map[id].shaReq;
                                if (player.countCards('h', {
                                        name: 'sha'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'respondShan')) {
                                if (map[id] && typeof map[id].shanRequired == 'number') need = map[id].shanRequired;
                                if (player.countCards('h', {
                                        name: 'shan'
                                    }) < need) {
                                    return true;
                                };
                            } else if (get.tag(card, 'damage') && get.name(card) != 'huogong') {
                                return true;
                            };
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.loseHp(1);
                            'step 1'
                            trigger.getParent().excluded.add(player);
                            if (player.hasSkill('radiance_qiongjiu_used')) {
                                event.finish();
                            } else if (player.countCards('he') == 0) {
                                player.draw();
                                event.finish();
                            };
                            game.delay();
                            'step 2'
                            var str = "将一张牌置于弃牌堆，然后获得点数为此牌的倍数或因数的牌";
                            player.chooseCard('he', str).set('ai', function(card) {
                                var num = get.number(card);
                                var count = 0;
                                for (var i = 1; i < 14; i++) {
                                    if (num % i == 0 || i % num == 0) count++;
                                }
                                return count;
                            });
                            'step 3'
                            if (result.bool) {
                                player.lose(result.cards, ui.discardPile, 'visible');
                                player.$throw(result.cards, 1000);
                                game.log(player, '将', result.cards, '置入了弃牌堆');
                                event.num = get.number(result.cards[0]);
                                event.card = result.cards[0];
                                game.updateRoundNumber();
                            } else {
                                event.finish();
                            }
                            'step 4'
                            event.togain = [];
                            for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
                                var current = ui.discardPile.childNodes[i];
                                if (get.number(current) % event.num === 0 || event.num % get.number(current) === 0) {
                                    event.togain.push(current);
                                };
                            };
                            if (!event.togain.contains(event.card)) event.togain.push(event.card);
                            player.chooseButton(['获得其中的至多两张，若选择两张则直至你下一个回合开始前不能再以此法获得牌', event.togain], [1, 2], true).set('ai', function(button) {
                                var card = button.link;
                                if (ui.selected.buttons.length > 0) {
                                    if (player.isTurnedOver()) return -1;
                                    var targets = get.sort(game.filterPlayer(), 'seat', _status.currentPhase);
                                    for (var i = 1; i < targets.length; i++) {
                                        if (get.attitude(player, targets[i]) < 0) return -1;
                                        if (targets[i] == player) return _status.event.player.getUseValue(card);
                                    };
                                    return get.useful(card, _status.event.player) - 4;
                                };
                                return get.useful(card, _status.event.player);
                            }).set('filterButton', function(button) {
                                var card = button.link;
                                if (ui.selected.buttons.length > 0) {
                                    var card1 = ui.selected.buttons[0].link;
                                    if (get.number(card1) == _status.event.getParent().num) {
                                        return true;
                                    } else if (get.number(card1) % _status.event.getParent().num == 0) {
                                        return _status.event.getParent().num % get.number(card) == 0;
                                    } else {
                                        return get.number(card) % _status.event.getParent().num == 0;
                                    };
                                };
                                return true;
                            });
                            'step 5'
                            if (result.bool) {
                                player.gain(result.links, 'gain2', 'log');
                                if (result.links.length > 1) {
                                    player.addTempSkill('radiance_qiongjiu_used', {
                                        player: 'phaseBefore',
                                    });
                                };
                            };
                        },
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                            },
                        },
                        action_tag: {
                            overall: 3,
                            loseHp_defend: 0.5,
                            search: 1,
                        },
                    },
                    "radiance_shuanghun": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        marktext: "魂",
                        intro: {
                            content: "已于出牌阶段使用过#张牌",
                        },
                        forced: true,
                        content: function() {
                            var num = Math.max(player.countCards('h'), 2);
                            player.draw(num);
                        },
                        mod: {
                            maxHandcardBase: function(player, current) {
                                var num = Math.max(player.countCards('h'), 2);
                                return Math.max(num, current);
                            },
                            aiOrder: function(card, player, current) {
                                if (_status.event.type != 'phase') return current;
                                var evt = _status.event.getParent('phaseUse', true);
                                if (evt && evt.player == player) {
                                    if (player.countCards('h') > 7) return current + 1;
                                    if (player.countCards('h') <= 4) return 0;
                                    if (player.countMark('radiance_shuanghun') == 7 && player.countCards('h') <= 6) return 0;
                                };
                            },
                        },
                        group: ['radiance_shuanghun_mark', 'radiance_shuanghun_discard'],
                        derivation: ['radiance_xiansheng'],
                        subSkill: {
                            anime: {
                                skillAnimation: 'epic',
                                animationColor: 'metal',
                                content: function() {},
                            },
                            discard: {
                                trigger: {
                                    player: 'gainEnd',
                                },
                                filter: function(event, player) {
                                    return player.countCards('h') > 16;
                                },
                                forced: true,
                                content: function() {
                                    player.chooseToDiscard('h', 8, true);
                                },
                            },
                            mark: {
                                trigger: {
                                    player: 'useCardEnd',
                                },
                                direct: true,
                                locked: true,
                                filter: function(event, player) {
                                    return event.getParent(2).name == 'phaseUse' && event.getParent(2).player == player;
                                },
                                content: function() {
                                    player.addMark('radiance_shuanghun', 1, false);
                                    var num = player.countMark('radiance_shuanghun');
                                    switch (num) {
                                        case 2:
                                            player.logSkill('radiance_shuanghun');
                                            player.chooseToDiscard(1, 'h', true, "双魂：需弃置一张手牌");
                                            break;
                                        case 4:
                                            player.logSkill('radiance_shuanghun');
                                            player.link(true);
                                            break;
                                        case 8:
                                            player.logSkill('radiance_shuanghun');
                                            player.turnOver();
                                            break;
                                        case 16:
                                            player.logSkill('radiance_shuanghun');
                                            player.trySkillAnimate('radiance_shuanghun_anime', 'radiance_shuanghun');
                                            player.removeSkill('radiance_shuanghun');
                                            player.addSkill('radiance_xiansheng');
                                        default:
                                    };
                                },
                            },
                        },
                        ai: {
                            nogain: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player == _status.currentPhase) return player.countCards('h') < 13;
                                return player.countCards('h') < 7;
                            },
                        }
                    },
                    "radiance_xiansheng": {
                        trigger: {
                            source: ['damageBegin1', 'recoverBegin'],
                            global: 'drawBegin',
                        },
                        filter: function(event, player) {
                            if (!event.num) return false;
                            if (!event.source) return event.getParent().player == player;
                            return event.source == player;
                        },
                        lastDo: true,
                        forced: true,
                        content: function() {
                            trigger.num *= 2;
                        },
                        mod: {
                            maxHandcardFinal: function(player, current) {
                                return Math.max(current, 1) * 2;
                            },
                        },
                    },
                    "radiance_mizong": {
                        trigger: {
                            player: 'phaseBegin',
                        },
                        init: function(player, skill) {
                            if (!Array.isArray(player.storage.radiance_mizong_history)) player.storage.radiance_mizong_history = [];
                        },
                        content: function() {
                            'step 0'
                            player.judge();
                            'step 1'
                            player.storage.radiance_mizong_history.add(result.suit);
                            if (player.storage.radiance_mizong_history.length >= 4) {
                                player.trySkillAnimate('radiance_mizong_anime', 'radiance_mizong');
                                player.gainMaxHp(2);
                            } else {
                                player.storage.radiance_mizong_db = result.suit;
                                player.addTempSkill('radiance_mizong_db', {
                                    player: 'phaseBefore',
                                });
                                event.finish();
                            };
                            'step 2'
                            player.recover(2);
                            'step 3'
                            player.removeSkill('radiance_mizong');
                        },
                        group: 'radiance_mizong_rejudge',
                        subSkill: {
                            anime: {
                                skillAnimation: 'epic',
                                animationColor: 'metal',
                                content: function() {},
                            },
                            db: {
                                mark: true,
                                marktext: "迷",
                                intro: {
                                    content: "不能成为其他角色$牌的目标也不能对其他角色使用$牌",
                                },
                                charlotte: true,
                                mod: {
                                    playerEnabled: function(card, player, target) {
                                        if (player != target && get.suit(card) == player.storage.radiance_mizong_db) return false;
                                    },
                                    targetEnabled: function(card, player, target) {
                                        if (player != target && get.suit(card) == target.storage.radiance_mizong_db) return false;
                                    },
                                },
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_mizong_db;
                                },
                            },
                            rejudge: {
                                trigger: {
                                    player: 'judge',
                                },
                                filter: function(event, player) {
                                    if (event.fixedResult && event.fixedResult.suit) return false;
                                    return player.countCards('hes') > 0 && event.getParent().name == 'radiance_mizong';
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var str = "“迷踪”判定为" + get.translation(trigger.player.judging[0]) + "，是否打出一张牌代替判定牌？";
                                    if (player.storage.radiance_mizong_history.length > 0) str += "（本局游戏已判定过" + get.translation(player.storage.radiance_mizong_history) + "）";
                                    player.chooseCard(str, 'hes', function(card) {
                                        var player = _status.event.player;
                                        var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                        if (mod2 != 'unchanged') return mod2;
                                        var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);
                                        if (mod != 'unchanged') return mod;
                                        return true;
                                    }).set('ai', function(card) {
                                        var player = _status.event.player;
                                        if (get.alteredValue(card) > 4) return 0;
                                        if (!player.storage.radiance_mizong_history.contains(get.suit(card))) return 4 - get.alteredValue(card);
                                        return 0;
                                    }).set('judging', trigger.player.judging[0]);
                                    'step 1'
                                    if (result.bool) {
                                        player.respond(result.cards, 'highlight', 'noOrdering');
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        trigger.player.judging[0] = card;
                                        trigger.fixedResult = {
                                            card: card,
                                            name: card.name,
                                            number: get.number(card),
                                            suit: get.suit(card),
                                            color: get.color(card),
                                        };
                                        trigger.orderingCards.addArray(result.cards);
                                        game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                    };
                                },
                            },
                        },
                    },
                    "radiance_zhouyan": {
                        enable: "phaseUse",
                        usable: 2,
                        filter: function(event, player) {
                            return (!player.getStat('skill').radiance_zhouyan || player.hasSkill('radiance_zhouyan_used')) && game.hasPlayer(function(target) {
                                return lib.skill.radiance_zhouyan.filterTarget(null, player, target);
                            });
                        },
                        filterTarget: function(card, player, target) {
                            return player != target && target.countCards('h') > 0 && target != player.storage.radiance_zhouyan_used;
                        },
                        content: function() {
                            'step 0'
                            target.showHandcards();
                            'step 1'
                            var sha = target.countCards('h', 'sha');
                            var shan = target.countCards('h', 'shan');
                            var tao = target.countCards('h', 'tao') + target.countCards('h', 'jiu');
                            var list = [],
                                choiceList = [];
                            if (sha) {
                                list.push('sha');
                                choiceList.push("杀：获得其所有的【杀】且本阶段你使用【杀】的次数增加等量的数值");
                            };
                            if (shan) {
                                list.push('shan');
                                choiceList.push("闪：视为对其使用一张不能被【闪】响应的【杀】");
                            };
                            if (tao) {
                                list.push('tao');
                                choiceList.push("桃酒：视为对其使用一张伤害+1的【杀】");
                            };
                            if (!list.length) {
                                player.storage.radiance_zhouyan_used = target;
                                player.addTempSkill('radiance_zhouyan_used', 'phaseUseEnd');
                                event.finish();
                                return;
                            };
                            player.chooseControl(list).set('prompt', "咒眼：选择一项执行").set('ai', function(event, player) {
                                var eff = get.effect(event.target, {
                                    name: 'sha',
                                    isCard: true,
                                }, player, player);
                                if (eff <= 0) return 0;
                                if (_status.event.controls.contains('tao') && !target.hasShan() && !target.getEquip('bagua')) return 'tao';
                                if (target.hasShan && target.countCards('h', 'sha') > 1) return 'sha';
                                if (_status.event.controls.contains('shan')) return 'shan';
                                return 0;
                            }).set('choiceList', choiceList);
                            'step 2'
                            if (result.control == 'sha') {
                                var hs = target.getCards('h', 'sha');
                                player.gain(hs, target, false, 'give');
                                player.storage.radiance_zhouyan = hs.length;
                                player.addTempSkill('radiance_zhouyan_sha', 'phaseUseEnd');
                            } else if (result.control == 'shan' && player.canUse('sha', target, false)) {
                                var next = player.useCard({
                                    name: 'sha',
                                    radiance_zhouyan: true,
                                }, target, false);
                            } else if (result.control == 'tao' && player.canUse('sha', target, false)) {
                                var next = player.useCard({
                                    name: 'sha'
                                }, target, false);
                                next.baseDamage = 2;
                            };
                        },
                        ai: {
                            order: function() {
                                return 10;
                            },
                            result: {
                                target: function(player, target) {
                                    var eff = get.effect(target, {
                                        name: 'sha',
                                        isCard: true,
                                    }, player, target);
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    return (eff - 1) * target.countCards('h') / Math.max(1, target.hp);
                                },
                            },
                        },
                        global: 'radiance_zhouyan_direct',
                        subSkill: {
                            used: {
                                charlotte: true,
                                locked: true,
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_zhouyan_used;
                                },
                            },
                            sha: {
                                charlotte: true,
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_zhouyan;
                                },
                                mod: {
                                    cardUsable: function(card, player, num) {
                                        if (card.name == 'sha' && player.storage.radiance_zhouyan) return num + player.storage.radiance_zhouyan;
                                    },
                                },
                            },
                            direct: {
                                trigger: {
                                    player: 'useCardToPlayered',
                                },
                                filter: function(event, player, name) {
                                    return event.card.radiance_zhouyan;
                                },
                                silent: true,
                                charlotte: true,
                                forced: true,
                                firstDo: true,
                                priority: 50,
                                content: function() {
                                    trigger.directHit.push(trigger.target);
                                },
                            },
                        },
                    },
                    "radiance_lingjue": {
                        trigger: {
                            player: ['useCardAfter', 'respond'],
                        },
                        filter: function(event, player) {
                            if (player == _status.currentPhase) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var str = "灵觉：令一名手牌不大于体力值的角色获得一张" + (get.name(trigger.card, player) == 'shan' ? "杀" : "闪") + "？且若不为你则你摸牌";
                            player.chooseTarget(str, function(card, player, target) {
                                return target.countCards('h') <= target.hp;
                            }).set('ai', function(target) {
                                var name = _status.event.sha ? 'sha' : 'shan';
                                var att = get.attitude(_status.event.player, target);
                                return att * 10 / Math.sqrt(1 + target.countCards('h', name)) / Math.max(1, target.hp);
                            }).set('sha', get.name(trigger.card, player) == 'shan');
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.logSkill('radiance_lingjue', target);
                                player.line(target, 'water');
                                var card = get.cardPile(get.name(trigger.card, player) == 'shan' ? 'sha' : 'shan');
                                if (card) target.gain(card, 'draw2');
                                if (target != player) player.draw();
                            };
                        },
                    },
                    "radiance_shiren": {
                        enable: "phaseUse",
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return player != target && player.inRange(target);
                        },
                        content: function() {
                            'step 0'
                            player.addTempSkill('radiance_shiren_db', {
                                player: 'phaseBegin'
                            });
                            'step 1'
                            target.damage('nocard');
                        },
                        ai: {
                            damage: true,
                            order: 10,
                            result: {
                                player: function(player, target) {
                                    if (player.countCards('h', 'shan') == 0) return 0;
                                    if (player.hp < 2) return -get.value({
                                        name: 'shan'
                                    }, player);
                                    if (player.countCards('h', 'sha') < 1) return get.value({
                                        name: 'sha'
                                    }, player) - get.value({
                                        name: 'shan'
                                    }, player);
                                    return -2;
                                },
                                target: function(player, target) {
                                    var eff = get.damageEffect(target, player);
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    if (player.countCards('h', 'shan') > 0 && player.countCards('h', 'sha') < 1 && player.canUse('sha', target, false)) eff -= get.effect(target, {
                                        name: 'sha'
                                    }, player, player);
                                    return eff;
                                },
                            },
                        },
                    },
                    "radiance_shiren_db": {
                        mark: true,
                        marktext: "刃",
                        intro: {
                            content: "你的所有【闪】均视为【杀】。",
                        },
                        mod: {
                            cardname: function(card, player, name) {
                                if (card.name == 'shan' && get.position(card) == 'h') return 'sha';
                            },
                            targetInRange: function(card, player, target) {
                                if (card.name == 'sha') return true;
                            },
                        },
                        ai: {
                            skillTagFilter: function(player) {
                                if (!player.countCards('h', 'shan')) return false;
                            },
                            respondSha: true,
                            halfneg: true,
                        },
                        charlotte: true,
                        locked: true,
                    },
                    "radiance_chenji": {
                        enable: "phaseUse",
                        filterTarget: function(card, player, target) {
                            if (player == target) return false;
                            return player.countCards('h', function(cardx) {
                                return lib.skill.radiance_chenji.filterCard(cardx, player);
                            }) > 0;
                        },
                        intro: {
                            content: function(storage, player, skill) {
                                var list = player.getSkills(null, false, false).filter(function(i) {
                                    return lib.skill.radiance_chenji.skillBlocker(i, player);
                                });
                                if (list.length) return '失效技能：' + get.translation(list);
                                return '无失效技能';
                            },
                        },
                        filterCard: function(card, player) {
                            if (player.storage.radiance_chenji_suit) return player.storage.radiance_chenji_suit == get.suit(card, player);
                            return get.color(card) == 'black';
                        },
                        selectCard: 1,
                        position: "h",
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte;
                        },
                        check: function(card) {
                            var player = _status.event.player;
                            if (player.storage.radiance_chenji_suit) return 6 - get.value(card);
                            var count = player.countCards('h', {
                                suit: get.suit(card, player),
                            });
                            if (count == 1) {
                                if (game.hasPlayer(function(target) {
                                        return target.hasMark('radiance_chenji') && get.attitude(player, target) < 0;
                                    })) return 7.1 - get.value(card);
                                if (game.hasPlayer(function(target) {
                                        return get.attitude(player, target) < 0 && target.hp <= 1 && get.distance(player, target, 'absolute') * 2 > game.countPlayer();
                                    })) return 5 - get.value(card);
                                return 4 - get.value(card);
                            };
                            return 7.1 - get.value(card);
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_chenji_suit = get.suit(cards[0]);
                            target.addMark('radiance_chenji', 1);
                            if (!target.storage.skill_blocker || !target.storage.skill_blocker.contains('radiance_chenji')) target.addSkillBlocker('radiance_chenji');
                            game.log(target, "的技能因为", 'radiance_chenji', "失效了");
                        },
                        ai: {
                            order: function(item, player) {
                                var num = player.getStat().skill.radiance_chenji;
                                if (!num || num < 2) {
                                    return 99;
                                }
                                return 4.1;
                            },
                            result: {
                                target: function(player, target) {
                                    if (target.countMark('radiance_chenji') > 1 || target.hasSkill('radiance_jixing')) return 0;
                                    if (target.countMark('radiance_chenji') > 0) return -12;
                                    var skills = target.getSkills(true, false);
                                    if (skills.length < 1) return 0;
                                    var base = -10;
                                    for (var i = 0; i < skills.length; i++) {
                                        var info = lib.skill[skills[i]];
                                        if (info && info.zero) base += 3;
                                    }
                                    return Math.min(base, 0);
                                },
                            },
                            threaten: 2.1,
                        },
                        global: "radiance_chenji_disable",
                        group: 'radiance_chenji_draw',
                        subSkill: {
                            draw: {
                                trigger: {
                                    global: 'dieAfter',
                                },
                                filter: function(event, player) {
                                    return event.player.storage.radiance_chenji > 0;
                                },
                                forced: true,
                                content: function() {
                                    player.draw(trigger.player.storage.radiance_chenji * 3);
                                },
                            },
                        },
                    },
                    "radiance_chenji_disable": {
                        trigger: {
                            player: 'phaseAfter',
                        },
                        forced: true,
                        charlotte: true,
                        popup: false,
                        content: function() {
                            'step 0'
                            delete player.storage.radiance_chenji_suit;
                            'step 1'
                            player.removeMark('radiance_chenji', 1);
                            'step 2'
                            if (player.countMark('radiance_chenji') < 1) {
                                player.removeSkillBlocker('radiance_chenji');
                                game.log(player, "解除了", 'radiance_chenji_disable', "状态");
                            };
                        },
                    },
                    "radiance_zhaoyao": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var max = -1;
                            for (var i = 0; i < game.players.length; i++) {
                                if (game.players[i].isOut() || game.players[i] == player) continue;
                                max = Math.max(max, game.players[i].countCards('h'));
                            };
                            event.max = max;
                            player.chooseControl('一', '二', '三', 'cancel2').set('prompt', '招摇：选择摸牌数，当前场上其他角色最高手牌数为' + max).set('ai', function(event, player) {
                                var hs = player.countCards('h');
                                if (event.max - hs >= 3) return 2;
                                if (hs < event.max) return event.max - player.countCards('h') - 1;
                                if (hs == 0) return 2;
                                if (player.hp > 2 || player.countCards('h', 'tao') > 0 || (player.hp < 2 && player.countCards('h', 'jiu') > 0)) {
                                    return 2;
                                }
                                return 3;
                            });
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill('radiance_zhaoyao');
                                player.draw(result.index + 1);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (player.isMaxHandcard(true)) {
                                player.chooseControl('失去体力', '使用一张牌').set('prompt', '招摇：失去1点体力出牌阶段只能使用一张牌').set('ai', function() {
                                    if (player.hp > 2 || player.countCards('h', 'tao') > 0 || (player.hp < 2 && player.countCards('h', 'jiu') > 0)) {
                                        return 0;
                                    }
                                    var hs = player.getCards('h');
                                    var count = 0;
                                    for (var i = 0; i < hs.length; i++) {
                                        if (player.getUseValue(hs[i]) > 4) count++;
                                    }
                                    if (count >= player.needsToDiscard() && player.hp > 1) return 0;
                                    return 1;
                                });
                            } else {
                                event.finish();
                            }
                            'step 3'
                            if (result.index == 0) {
                                player.loseHp();
                            } else {
                                trigger.skipped = true;
                            }
                        },
                    },
                    "radiance_jianshang": {
                        trigger: {
                            player: ['phaseDiscardEnd'],
                        },
                        direct: true,
                        filter: function(event, player) {
                            var cards = [];
                            event.player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == event && evt.hs) cards.addArray(evt.hs);
                            });
                            return cards.filterInD('d').length > 0;
                        },
                        content: function() {
                            'step 0'
                            var cards = [];
                            player.getHistory('lose', function(evt) {
                                if (evt && evt.getParent('phaseDiscard') == trigger && evt.hs) cards.addArray(evt.hs);
                            });
                            event.cards = cards.filterInD('d');
                            player.chooseTarget('令一名其他角色成为“奸商”的对象', lib.filter.notMe).set('ai', function(target) {
                                var player = _status.event.player;
                                var att = get.attitude(player, target);
                                var length = _status.event.cards.length;
                                if (target.countCards('h') == 0 && att > 0) return -1;
                                if (length >= 3 && att > 0 && target.hp > 2) return target.hp + att;
                                if (length <= 2 && target.countCards('h') > 1) return -att;
                                if (target.hp < 2 && att < 0 && length <= 3 && target.countCards('h') > 1) return 2 - att;
                                return 0;
                            }).set('cards', event.cards);
                            'step 1'
                            if (result.bool) {
                                event.target = result.targets[0];
                                player.logSkill('radiance_jianshang', event.target);
                                player.line(event.target);
                                player.chooseCardButton(event.cards, '奸商：选择任意张你于此阶段弃置的牌', true, [1, event.cards.length]).set('ai', function(button) {
                                    var target = _status.event.target;
                                    var player = _status.event.player;
                                    var att = get.attitude(player, target);
                                    var length = _status.event.cards.length;
                                    var val = get.value(button.link, target);

                                    if (ui.selected.buttons.length > 0 && att > 0) return 0;
                                    if (target.countCards('h') == 0 && att > 0) return val + 10;
                                    if (length >= 3 && att > 0 && target.hp > 2) return 10 - val;
                                    if (length <= 2 && target.countCards('h') > 1) return 10 - val;
                                    if (target.hp < 2 && att < 0 && length <= 3 && target.countCards('h') > 1) return 5 + val;
                                    return val;
                                }).set('target', event.target).set('cards', event.cards);
                            } else {
                                event.finish();
                            }
                            'step 2'
                            if (result.bool && result.links.length) {
                                event.cardsx = result.links;
                                event.cards.removeArray(event.cardsx);
                                var value1 = 0,
                                    value2 = 0;
                                for (var i = 0; i < event.cardsx.length; i++) {
                                    value1 += get.value(event.cardsx[i], event.target);
                                }; // 给牌拿的牌
                                for (var i = 0; i < event.cards.length; i++) {
                                    value2 += get.value(event.cards[i], event.target);
                                }; // 掉血拿的牌

                                event.target.chooseCard(event.cardsx.length, 'h').set('ai', function(card) {
                                    var target = _status.event.player;
                                    var player = _status.event.getParent().player;
                                    var val = 0;
                                    for (var i = 0; i < ui.selected.cards.length; i++) {
                                        val += get.value(ui.selected.cards[i]);
                                    };
                                    var value1 = _status.event.value1;
                                    var value2 = _status.event.value2;

                                    if (get.attitude(target, player) > 1) {
                                        if (value1 >= value2) return 10 - val;
                                        if (value1 < value2 + 7 && target.hp > 1) return 0;
                                    };
                                    if (target.hp < 2 && target.countCards('h', function(cardx) {
                                            return get.tag(cardx, 'save');
                                        }) == 0) return 7 - val;

                                    return value1 * 1.5 - val - get.value(card);
                                }).set('value1', value1).set('value2', value2).set('prompt', '是否将' + get.cnNumber(event.cardsx.length) + "张手牌交给" +
                                    get.translation(player) + "并获得" + get.translation(event.cardsx));
                            }
                            'step 3'
                            if (result.bool) {
                                event.target.give(result.cards, player, false);

                            } else {
                                event.target.loseHp();
                                event.goto(5);
                            }
                            'step 4'
                            event.target.gain(event.cardsx, 'gain2');
                            event.finish();
                            'step 5'
                            if (event.target.isIn() && event.cards.length > 0) {
                                event.target.gain(event.cards, 'gain2');
                            }
                        },
                    },
                    "radiance_baoji": {
                        trigger: {
                            global: 'damageBegin1',
                        },
                        filter: function(event, player) {
                            return event.player != player && event.card && (get.name(event.card) == 'sha' || get.name(event.card) == 'juedou') && event.source && event.source == player && player.isIn() && event.notLink();
                        },
                        check: function(event, player) {
                            return get.damageEffect(event.player, player, player) > 0;
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            var list = ['red', 'black'];
                            var str = "暴击：请声明一个颜色";
                            player.chooseControl(list).set('prompt', str).set('ai', function(event, player) {
                                return [0, 1].randomGet();
                            });
                            'step 1'
                            event.type = result.control;
                            game.log(player, '声明了', event.type, '牌');
                            player.judge(function(card) {
                                if (get.color(card) == _status.event.type) return 1;
                                return -1;
                            }).set('type', event.type);
                            'step 2'
                            if (result.bool) {
                                trigger.num++;
                                event.finish();
                            } else {
                                player.chooseBool('暴击：是否失去1点体力，令此伤害+1？').set('ai', function() {
                                    if (player.hp < 2 || trigger.player.getEquip('baiyin') || trigger.player.hasSkill('noextra')) return false;
                                    return trigger.player.hp < player.hp + 1;
                                });
                            };
                            'step 3'
                            if (result.bool) {
                                trigger.num++;
                                player.loseHp();
                            }
                        },
                    },
                    "radiance_jiabei": {
                        trigger: {
                            player: 'gainBefore',
                        },
                        filter: function(event, player) {
                            return event.cards.length > 0 && event.getParent().name == 'draw';
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            event.cards = trigger.cards;
                            var list = ['red', 'black', 'spade', 'heart', 'club', 'diamond'];
                            var str = "加倍：请声明一个颜色或花色";
                            player.chooseControl(list).set('prompt', str).set('ai', function(event, player) {
                                if (event.cards.length == 1) return [0, 1].randomGet();
                                if (event.cards.length == 2) return [0, 1, 2, 3, 4, 5].randomGet();
                                return [2, 3, 4, 5].randomGet();
                            });
                            'step 1'
                            event.control = result.control;
                            game.log(player, '声明了', event.control, '牌');
                            player.popup(event.control);
                            event.bool = false;
                            for (var i = 0; i < event.cards.length; i++) {
                                var currentcard = event.cards[i];
                                if (get.color(currentcard) == event.control && ['red', 'black'].contains(event.control)) {
                                    event.bool = 1;
                                    break;
                                } else if (get.suit(currentcard) == event.control && !['red', 'black'].contains(event.control)) {
                                    event.bool = 2;
                                    break;
                                }
                            }
                            'step 2'
                            if (event.bool) {
                                game.log('radiance_jiabei', "：将要获得的牌中有", event.control, "牌");
                                game.log(player, "额外摸了", get.cnNumber(event.bool), "张牌");
                                trigger.getParent().num += event.bool;
                                var cards = get.cards(event.bool);
                                trigger.cards.addArray(cards);
                            }
                        },
                    },
                    "radiance_wenyu": {
                        mark: true,
                        intro: {
                            mark: function(dialog, storage, player, skill) {
                                var list = game.filterPlayer();
                                var str = '所有角色当前对应X值：<br>';
                                var num;
                                for (var i = 0; i < list.length; i++) {
                                    var id = list[i].playerid;
                                    if (typeof player.storage.radiance_wenyu[id] != 'number') {
                                        num = 2;
                                    } else {
                                        num = player.storage.radiance_wenyu[id];
                                    }
                                    str += get.translation(list[i]) + '：' + num + '<br>';
                                }
                                return str;
                            },
                        },
                        init: function(player) {
                            if (!player.storage.radiance_wenyu) player.storage.radiance_wenyu = {};
                        },
                        enable: "phaseUse",
                        filterCard: true,
                        position: "he",
                        filter: function(event, player) {
                            if (player.hasSkill('radiance_wenyu_used')) return false;
                            if (!game.hasPlayer(function(current) {
                                    return current.isDamaged();
                                })) return false;
                            return player.countCards('he') > 0;
                        },
                        check: function(card) {
                            var player = _status.event.player;
                            var players = game.filterPlayer();
                            var targets = [];
                            var needsToDiscard = function(target) {
                                var id = target.playerid;
                                var base = 0;
                                if (typeof player.storage.radiance_wenyu[id] != 'number') {
                                    base = 2;
                                } else {
                                    base = Math.max(player.storage.radiance_wenyu[id], 1);
                                };
                                if (base > 3) base = 4;
                                return base;
                            };
                            for (var i = 0; i < players.length; i++) {
                                var current = players[i];
                                if (get.attitude(player, current) <= 0 || get.recoverEffect(current, player, player) <= 0) continue;
                                if (targets.length == 0) {
                                    targets = [current];
                                } else if (get.recoverEffect(current, player, player) == get.recoverEffect(targets[0], player, player)) {
                                    targets.push(current);
                                } else if (get.recoverEffect(current, player, player) > get.recoverEffect(targets[0], player, player)) {
                                    targets = [current];
                                };
                            };
                            if (targets.length == 0) return -1;
                            targets.sort(function(a, b) {
                                return get.attitude(player, b) / (1 + needsToDiscard(b) * b.hp) - get.attitude(player, a) / (1 + needsToDiscard(a) * a.hp);
                            });
                            var base = needsToDiscard(targets[0]);
                            if (ui.selected.cards.length >= base) {
                                return 0;
                            };
                            return 8 - base - player.getAlteredValue(card, 'he', false);
                        },
                        selectCard: [1, 4],
                        prompt: '选择一名角色回复1点体力',
                        filterTarget: function(card, player, target) {
                            if (!target.isDamaged()) return false;
                            var length = ui.selected.cards.length;
                            var id = target.playerid;
                            var base;
                            if (typeof player.storage.radiance_wenyu[id] != 'number') {
                                base = 2;
                            } else {
                                base = Math.max(player.storage.radiance_wenyu[id], 1);
                            };
                            if (base > 3) base = 4;

                            return length == base;
                        },
                        content: function() {
                            'step 0'
                            target.recover();
                            'step 1'
                            player.judge(function(card) {
                                if (get.suit(card) == 'heart') return 6;
                                if (get.color(card) == 'black') return -1;
                                return 0;
                            });
                            'step 2'
                            var id = target.playerid;
                            if (result.judge <= 0) {
                                if (typeof player.storage.radiance_wenyu[id] != 'number') {
                                    player.storage.radiance_wenyu[id] = 3;
                                } else {
                                    player.storage.radiance_wenyu[id]++;
                                };
                                if (result.judge < 0) {
                                    player.addTempSkill('radiance_wenyu_used');
                                }
                            };
                        },
                        ai: {
                            order: function(item, player) {
                                var num = player.getStat().skill.radiance_wenyu;
                                if (!num) {
                                    return 9;
                                } else if (num == 1) {
                                    return 4;
                                } else if (num == 2) {
                                    return 2;
                                }
                                return 1;
                            },
                            result: {
                                target: function(player, target) {
                                    return Math.max(0, get.recoverEffect(target, player, player));
                                },
                                player: function(player, target) {
                                    return 0;
                                    var players = game.filterPlayer();
                                    var targets = [];
                                    var needsToDiscard = function(current) {
                                        var id = current.playerid;
                                        var base = 0;
                                        if (typeof player.storage.radiance_wenyu[id] != 'number') {
                                            base = 2;
                                        } else {
                                            base = Math.max(player.storage.radiance_wenyu[id], 1);
                                        };
                                        if (base > 3) base = 4;
                                        return base;
                                    };
                                    for (var i = 0; i < players.length; i++) {
                                        var current = players[i];
                                        if (get.attitude(player, current) <= 0 || get.recoverEffect(current, player, player) <= 0) continue;
                                        if (targets.length == 0) {
                                            targets = [current];
                                        } else if (get.recoverEffect(current, player, player) == get.recoverEffect(targets[0], player, player)) {
                                            targets.push(current);
                                        } else if (get.recoverEffect(current, player, player) > get.recoverEffect(targets[0], player, player)) {
                                            targets = [current];
                                        };
                                    };
                                    if (targets.length == 0) return -10;
                                    targets.sort(function(a, b) {
                                        return get.attitude(player, b) / (1 + needsToDiscard(b) * b.hp) - get.attitude(player, a) / (1 + needsToDiscard(a) * a.hp);
                                    });
                                    var base = needsToDiscard(targets[0]);
                                    if (player.countCards('he', card => 8 - base - player.getAlteredValue(card, 'he', false) > 0) >= base) return 0;
                                    return -10;
                                },
                            },
                            threaten: 1.5,
                        },
                        group: 'radiance_wenyu_reduce',
                        subSkill: {
                            used: {
                                charlotte: true,
                            },
                            reduce: {
                                trigger: {
                                    global: 'dyingBegin'
                                },
                                filter: function(event, player) {
                                    var id = event.player.playerid;
                                    if (typeof player.storage.radiance_wenyu[id] != 'number') return true;
                                    return true;
                                },
                                forced: true,
                                sub: true,
                                popup: false,
                                content: function() {
                                    var id = trigger.player.playerid;
                                    if (typeof player.storage.radiance_wenyu[id] == 'number') {
                                        player.storage.radiance_wenyu[id] -= 1;
                                    } else {
                                        player.storage.radiance_wenyu[id] = 1;
                                    };
                                },
                            },
                        },
                    },
                    "radiance_piaoling": {
                        trigger: {
                            player: 'judgeAfter'
                        },
                        frequent: true,
                        content: function() {
                            var num = 1;
                            if (trigger.result.suit == 'spade') num = 3;
                            player.draw(num);
                        },
                        action_tag: {
                            draw: 1,
                        },
                    },
                    "radiance_rongbi": {
                        trigger: {
                            global: 'useCardToTargeted',
                        },
                        marktext: "熔",
                        intro: {
                            content: 'players',
                        },
                        init: function(player) {
                            if (!player.storage.radiance_rongbi) player.storage.radiance_rongbi = [];
                        },
                        filter: function(event, player) {
                            if (get.name(event.card) != 'sha') return false;
                            if (player.countCards('h') < 1 || event.player == player || player.storage.radiance_rongbi.contains(event.target)) return false;
                            return true; //event.getParent().targets.length == 1;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseCard('h', "熔壁：" + get.translation(trigger.player) + "对" + get.translation(trigger.target) + "使用了【杀】，是否将一张手牌置于牌堆顶？", 1).set('ai', function(card) {
                                var trigger = _status.event.getTrigger();
                                var source = _status.event.source;
                                var target = _status.event.target;
                                var player = _status.event.player;
                                var att1 = get.attitude(player, source);
                                var att2 = get.attitude(player, target);
                                if (att2 < 1) return 0;
                                if (get.effect(target, trigger.card, source, player) >= 0) return 0;

                                var val = get.value(card);
                                var equip = get.cardPile(function(cardx) {
                                    return get.type(cardx) == 'equip' && target.canEquip(cardx);
                                }, 'cardPile');
                                if (!equip) {
                                    if (get.type(card) == 'equip' && get.subtype(card) != 'equip1') return 6 - val;
                                    if (target.hp <= 1 || (target.hp == 2 && player.hp > 2)) return 6 - val;
                                    return 0;
                                }
                                if (!target.hasShan()) {
                                    if (["equip3", "equip4", "equip6"].contains(get.subtype(equip))) {
                                        if (['tao', 'shan'].contains(get.name(card))) return 12 - val;
                                        if (get.name(card) == 'jiu' && target.hp < 2) return 13 - val;
                                    };
                                    if (["equip2", "equip5"].contains(get.subtype(equip))) {
                                        if (['zhu', 'bZhu', 'rZhu'].contains(target.identity) && target.hp <= 2) return 15 - val;
                                        return 5 - val;
                                    };
                                }
                                if (target.hp <= 2 && target.isDamaged() && 1 == 0) {
                                    if (get.subtype(card) == 'equip2') return 12 - val;
                                    if (get.subtype(equip) == 'equip2') return 10 - val;
                                };
                                if (source.hp <= 1 && !source.hasSkillTag('nodamage')) {
                                    if (att1 > 0 && (get.subtype(equip) == 'equip1' || get.subtype(card) == 'equip1')) return 0;
                                    if (get.subtype(card) == 'equip1') return 15 - val;
                                    if (get.subtype(equip) == 'equip1') return 10 - val;
                                };

                                return 7 - val;
                            }).set('source', trigger.player).set('target', trigger.target);
                            'step 1'
                            if (result.bool && result.cards) {
                                player.logSkill('radiance_rongbi', trigger.target);
                                player.line(trigger.target, 'green');
                                if (trigger.target != player) player.storage.radiance_rongbi.add(trigger.target);
                                player.markSkill('radiance_rongbi');

                                player.lose(result.cards, ui.cardPile, 'insert');
                                game.broadcastAll(function(player) {
                                    var cardx = ui.create.card();
                                    cardx.classList.add('infohidden');
                                    cardx.classList.add('infoflip');
                                    player.$throw(cardx, 1000, 'nobroadcast');
                                }, player);
                                game.log(player, '将一张牌置于牌堆顶');
                            } else {
                                event.finish();
                            };
                            'step 2'
                            game.updateRoundNumber();
                            'step 3'
                            var equip = get.cardPile(function(card) {
                                return get.type(card) == 'equip' && trigger.target.canEquip(card);
                            });
                            if (!equip) {
                                game.log(trigger.target, "无法从牌堆装备装备牌，【杀】被“熔壁”无效");
                                trigger.getParent().excluded.add(trigger.target);
                                event.finish();
                                return;
                            };
                            event.subtype = get.subtype(equip);
                            player.showCards(equip, "“熔壁”使用的装备牌");
                            trigger.target.$gain(equip, 'gain2');
                            trigger.target.equip(equip);
                            'step 4'
                            if (event.subtype == 'equip1') {
                                if (trigger.player.isIn()) trigger.player.damage(player, 'nocard');
                            } else if (["equip3", "equip4", "equip6"].contains(event.subtype)) {
                                trigger.target.draw(1, player);
                                player.draw();
                            } else {
                                game.log("对" + trigger.target, "的【杀】被“熔壁”无效");
                                trigger.getParent().excluded.add(trigger.target);
                            };
                        },
                        global: 'radiance_rongbi_reset',
                        subSkill: {
                            reset: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                filter: function(event, player) {
                                    return player.storage.radiance_rongbi && player.storage.radiance_rongbi.length;
                                },
                                forced: true,
                                silent: true,
                                charlotte: true,
                                popup: false,
                                sub: true,
                                content: function() {
                                    player.storage.radiance_rongbi = [];
                                    player.unmarkSkill('radiance_rongbi');
                                }
                            },
                        },
                        ai: {
                            threaten: 2.5,
                            expose: 0.2,
                        },
                        action_tag: {
                            overall: 4,
                            damage: 0.5,
                            recover: 0.25,
                            draw: 1,
                            active_defend: 2,
                            out: 1,
                        },
                    },
                    "radiance_chunzhu": {
                        trigger: {
                            player: 'phaseDrawBegin1',
                        },
                        locked: false,
                        filter: function(event, player) {
                            if (event.numFixed) return false;
                            var num = game.countPlayer(function(current) {
                                return current.getEquip(1);
                            });
                            return num > 0;
                        },
                        frequent: function(event) {
                            var num = game.countPlayer(function(current) {
                                return current.getEquip(1);
                            });
                            return num >= 0;
                        },
                        prompt: function(event, player) {
                            var num = game.countPlayer(function(current) {
                                return current.getEquip(1);
                            });
                            return "当前场上有" + get.cnNumber(num) + "张武器牌，是否发动“春祝”？（原本摸牌数为" + get.cnNumber(event.num) + "张）";
                        },
                        content: function() {
                            var num = game.countPlayer(function(current) {
                                return current.getEquip(1);
                            });
                            trigger.num += Math.ceil(num / 2);
                            game.log(player, "的摸牌数增加了", get.cnNumber(Math.ceil(num / 2)), "张");
                        },
                        mod: {
                            maxHandcard: function(player, num) {
                                return num + game.countPlayer(function(current) {
                                    return current.getEquip(2);
                                });
                            },
                        },
                        action_tag: {
                            overall: 2,
                            draw: 1.5,
                            maxHand: 1,
                        },
                    },


                    "radiance_zaowu": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseControl(['spade', 'heart', 'club', 'diamond', 'cancel2']).set('ai', function(event, player) {
                                var max = player.countCards('hs', function(card) {
                                    return get.suit(card) == 'club' && get.value(card) < 6;
                                });
                                var suit = 'club';
                                var list = ['spade', 'heart', 'diamond'];
                                for (var i = 0; i < 3; i++) {
                                    var num = player.countCards('hs', function(card) {
                                        return get.suit(card) == list[i] && get.value(card) < 6;
                                    });
                                    if (num > max) {
                                        max = num;
                                        suit = list[i];
                                    };
                                };
                                return suit;
                            }).set('prompt', get.prompt2('radiance_zaowu'));
                            'step 1'
                            if (result.control != 'cancel2') {
                                player.logSkill('radiance_zaowu');
                                game.log(player, "选择了", result.control, "花色");
                                player.storage.radiance_zaowu_suit = result.control;
                                player.storage.radiance_zaowu = 0;
                                lib.skill.radiance_zaowu.subSkill.use.marktext = result.control;
                                player.addTempSkill('radiance_zaowu_use', 'phaseUseEnd');
                            };
                        },
                        subSkill: {
                            use: {
                                enable: ['chooseToUse'],
                                filter: function(event, player) {
                                    return player.countCards('h') > 0;
                                },
                                filterCard: function(card, player) {
                                    return true;
                                },
                                selectCard: 1,
                                position: 'hs',
                                check: function(card) {
                                    var player = _status.event.player;
                                    if (get.number(card) >= player.storage.radiance_zaowu && get.suit(card) == player.storage.radiance_zaowu_suit) {
                                        return 9 - get.value(card);
                                    }
                                    return 6 - get.value(card);
                                },
                                viewAs: {
                                    name: 'wuzhong'
                                },
                                onuse: function(result, player) {
                                    // player.logSkill('radiance_zaowu');
                                    if (get.number(result.card) >= player.storage.radiance_zaowu && get.suit(result.card) == player.storage.radiance_zaowu_suit) {
                                        player.storage.radiance_zaowu = get.number(result.card);
                                    } else {
                                        player.removeSkill('radiance_zaowu_use');
                                    };
                                },
                                onremove: function(player, skill) {
                                    player.storage.radiance_zaowu = 0;
                                    delete player.storage.radiance_zaowu_suit;
                                },
                                prompt: function() {
                                    var player = _status.event.player;
                                    var str = "将一张手牌当做【无中生有】使用。若不为花色是" + get.translation(player.storage.radiance_zaowu_suit);
                                    if (player.storage.radiance_zaowu) str += "且点数不小于" + player.storage.radiance_zaowu;
                                    str += "的牌则此技能本阶段不能再发动";
                                    return str;
                                },
                                mark: true,
                                intro: {
                                    mark: function(dialog, storage, player, skill) {
                                        var str = "当前选择的花色为：" + get.translation(player.storage.radiance_zaowu_suit);
                                        if (player.storage.radiance_zaowu) str += "，目前已使用的最大点数为：" + player.storage.radiance_zaowu;
                                        return str;
                                    },
                                },
                            },
                        },
                    },
                    "radiance_sanyuan": {
                        trigger: {
                            player: 'useCard1'
                        },
                        filter: function(event, player) {
                            if (event.card.name == 'sha') return true;
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            if (get.nature(trigger.card)) {
                                if (player.stat[player.stat.length - 1].card.sha > 0) {
                                    player.stat[player.stat.length - 1].card.sha--;
                                }
                                event.finish();
                            }
                            'step 1'
                            var list = [];
                            list.push(['基本', '', 'sha', 'fire']);
                            list.push(['基本', '', 'sha', 'thunder']);
                            list.push(['基本', '', 'sha', 'ice']);

                            player.chooseButton([get.prompt('radiance_sanyuan'), [list, 'vcard']]).set('ai', function(button) {
                                var eff = 0,
                                    target;
                                var nature = button.link[3];
                                for (var i = 0; i < _status.event.targets.length; i++) {
                                    target = _status.event.targets[i];

                                    var eff1 = get.damageEffect(target, _status.event.player, _status.event.player);
                                    var eff2 = get.damageEffect(target, _status.event.player, _status.event.player, nature);
                                    eff += eff2;
                                    eff -= eff1;
                                }
                                if (eff >= 0) return 1 + eff;
                                return 0;
                            }).set('targets', trigger.targets);
                            'step 2'
                            if (result.bool) {
                                player.logSkill('radiance_sanyuan');
                                game.log(player, "将【杀】的属性变为了", result.links[0][3]);
                                player.popup(get.translation(result.links[0][3]) + "杀");
                                trigger.card.nature = result.links[0][3];
                                if (get.itemtype(trigger.card) == 'card') {
                                    var next = game.createEvent('radiance_sanyuan_clear');
                                    next.card = trigger.card;
                                    event.next.remove(next);
                                    trigger.after.push(next);
                                    next.setContent(function() {
                                        delete card.nature;
                                    });
                                }
                            }
                        },
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (card.name == 'sha' && card.nature !== undefined) {
                                    return true;
                                }
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha' && card.nature) return true;
                            },
                        },
                        group: 'radiance_sanyuan_prevent',
                        subSkill: {
                            prevent: {
                                trigger: {
                                    player: "damageBegin2",
                                },
                                forced: true,
                                locked: false,
                                sub: true,
                                filter: function(event, player) {
                                    if (!player.isEmpty(2)) return false;
                                    if (event.nature) return true;
                                    return false;
                                },
                                content: function() {
                                    trigger.cancel();
                                },
                            },
                        },
                        ai: {
                            nofire: true,
                            nothunder: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'nofire' || tag == 'nothunder') {
                                    if (!player.isEmpty(2)) return false;
                                }
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (!target.isEmpty(2)) return;
                                    if (get.tag(card, 'natureDamage')) return 'zerotarget';
                                },
                            },
                        },
                    },
                    "radiance_yunjian": {
                        enable: ['chooseToUse', 'chooseToRespond'],
                        filterCard: function(card) {
                            return get.type2(card) != 'basic';
                        },
                        selectCard: 1,
                        position: 'hes',
                        viewAs: {
                            name: 'sha',
                            radiance_yunjian: true,
                        },
                        filter: function(event, player) {
                            return player.countCards('he', function(card) {
                                return get.type2(card) != 'basic';
                            }) > 0;
                        },
                        precontent: function() {
                            player.addTempSkill('radiance_yunjian_af', 'phaseUseEnd');
                        },
                        onuse: function(result, player) {
                            player.logSkill('radiance_yunjian');
                        },
                        onrespond: function(result, player) {
                            player.logSkill('radiance_yunjian');
                        },
                        prompt: '将一张非基本牌当作【杀】使用或打出',
                        check: function(card) {
                            return 7 - get.value(card)
                        },
                        ai: {
                            respondSha: true,
                            skillTagFilter: function(player) {
                                return player.countCards('he', function(card) {
                                    return get.type2(card) != 'basic';
                                }) > 0;
                            },
                        },
                        locked: false,
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (card.radiance_yunjian) return true;
                            },
                            cardUsable: function(card, player, num) {
                                if (card.radiance_yunjian) return Infinity;
                            },
                        },
                    },
                    "radiance_yunjian_af": {
                        charlotte: true,
                        locked: true,
                        forced: true,
                        popup: false,
                        silent: true,
                        firstDo: true,
                        trigger: {
                            player: 'useCard'
                        },
                        filter: function(event, player) {
                            return event.card && event.card.name == 'sha' && event.card.radiance_yunjian && event.addCount !== false;
                        },
                        content: function() {
                            if (player.stat[player.stat.length - 1].card.sha > 0) {
                                player.stat[player.stat.length - 1].card.sha--;
                            }
                        },
                        mod: {
                            attackRange: function(player, current) {
                                return Infinity;
                            },
                        },
                    },
                    "radiance_leiyin": {
                        trigger: {
                            player: 'phaseUseEnd',
                        },
                        filter: function(event, player) {
                            if (player.countCards('h') == 0) return false;

                            var num1 = player.getHistory('sourceDamage', function(evt) {
                                return evt.num > 0 && evt.getParent('phaseUse', true) == event;
                            }).length;
                            var num2 = player.getHistory('useCard', function(evt) {
                                return evt.card && get.tag(evt.card, 'damage') && evt.getParent('phaseUse', true) == event;
                            }).length;

                            return num2 > num1;
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            var num = player.getHistory('useCard', function(evt) {
                                return evt.card && get.tag(evt.card, 'damage') && evt.getParent('phaseUse', true) == trigger;
                            }).length - player.getHistory('sourceDamage', function(evt) {
                                return evt.num > 0 && evt.getParent('phaseUse', true) == trigger;
                            }).length;
                            num = Math.min(num, 3);
                            event.num = num;
                            player.chooseControlList("雷引：可以选择一项", ["对一名其他角色造成1点雷电伤害", "弃置至多" + get.cnNumber(num) + "张手牌并对一名其他角色造成等量的伤害"]).set('ai', function(event, player) {
                                if (event.num > 1 && player.countCards('h', function(card) {
                                        return lib.filter.cardDiscardable(card, player, event) && get.value(card, player) <= 6;
                                    }) > 1) return 1;
                                return 0;
                            });
                            'step 1'
                            if (result.index == 0) {
                                player.chooseTarget("对一名其他角色造成1点雷电伤害", lib.filter.notMe).set('ai', function(target) {
                                    var player = _status.event.player;
                                    if (target.hasSkillTag('nodamage') || target.hasSkillTag('nothunder')) return -1;
                                    return get.damageEffect(target, player, player, 'thunder');
                                });
                            } else if (result.index == 1) {
                                var str = "弃置至多" + get.cnNumber(num) + "张手牌并对一名其他角色造成等量的伤害";
                                player.chooseCardTarget({
                                    prompt: get.prompt('radiance_leiyin'),
                                    prompt2: str,
                                    filterCard: function(card, player) {
                                        return lib.filter.cardDiscardable(card, player);
                                    },
                                    position: 'h',
                                    selectCard: function() {
                                        return [1, _status.event.count];
                                    },
                                    filterTarget: function(card, player, target) {
                                        return target != player;
                                    },
                                    ai1: function(card) {
                                        return 6.1 - get.value(card);
                                    },
                                    ai2: function(target) {
                                        var player = _status.event.player;
                                        if (target.hasSkillTag('nodamage') || target.hasSkillTag('nothunder')) return -1;
                                        return get.damageEffect(target, player, player, 'thunder');
                                    },
                                }).set('count', num);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool && result.targets.length) {
                                var num = 1;
                                if (result.cards && result.cards.length) {
                                    player.discard(result.cards);
                                    num = result.cards.length;
                                };
                                var target = result.targets[0];
                                event.target = target;
                                player.logSkill('radiance_leiyin', target);
                                player.line(target, 'red');
                                target.damage(num, 'thunder');
                            } else {
                                event.finish();
                            };
                            'step 3'
                            if (!target.isIn()) {
                                player.chooseControl(['摸牌', '出牌', 'cancel2']).set('prompt', "可以进行一个额外的摸牌或出牌阶段").set('ai', function(event, player) {
                                    if (player.needsToDiscard()) return 1;
                                    return 0;
                                });
                            } else {
                                event.finish();
                            };
                            'step 4'
                            if (result.index == 0) {
                                var next = game.createEvent('phaseDraw');
                                next.player = player;
                                next.setContent('phaseDraw', false, trigger.getParent('phase', true));
                            } else if (result.index == 1) {
                                var next = game.createEvent('phaseUse');
                                next.player = player;
                                next.setContent('phaseUse', false, trigger.getParent('phase', true));
                            };
                        },
                        mod: {
                            aiOrder: function(player, card, num) {
                                var event = _status.event.getParent('phaseUse', true);
                                if (!event) return;
                                if (get.tag(card, 'damage')) {
                                    var num1 = player.getHistory('sourceDamage', function(evt) {
                                        return evt.num > 0 && evt.getParent('phaseUse', true) == event;
                                    }).length;
                                    var num2 = player.getHistory('useCard', function(evt) {
                                        return evt.card && get.tag(evt.card, 'damage') && evt.getParent('phaseUse', true) == event;
                                    }).length;
                                    if (num1 < num2 && player.needsToDiscard() <= num1 - num2) return 0;
                                };
                            },
                        },
                        ai: {
                            expose: 0.4,
                        },
                    },
                    "radiance_yuanluo": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            if (!target.isDamaged()) {
                                event._result = {
                                    index: 0,
                                    control: "掉血摸牌",
                                };
                            } else {
                                var str = "渊落：选择要" + get.translation(target) + "执行的一项";
                                if (typeof player.storage.radiance_yuanluo == 'boolean') {
                                    str += "（上一次执行的选项为：" + (player.storage.radiance_yuanluo ? "掉血摸牌" : "弃牌回血") + "）";
                                };
                                player.chooseControl(["掉血摸牌", "弃牌回血"]).set('ai', function(event, player) {
                                    var target = event.target;
                                    var lose = target.getDamagedHp();
                                    var att = get.attitude(player, target);
                                    var bool = target.isMinHp() && player.hasSkill('radiance_ximing') && target != _status.currentPhase && !player.storage.radiance_ximing.contains(player) && att > 1;
                                    var bonus = bool ? 1 : 0;
                                    var profit1 = target.getDamagedHp() - 1,
                                        profit2 = 2 - target.getDamagedHp();
                                    if (!target.isDamaged()) profit2 = 0;

                                    if (typeof player.storage.radiance_yuanluo == 'boolean') {
                                        if (player.storage.radiance_yuanluo) {
                                            if (att > 0) profit1 += 1;
                                            if (bool) profit2 += 1;
                                        } else {
                                            if (att < 0) profit2 -= 1;
                                        };
                                    };
                                    if (att > 0) {
                                        if ((target.hp > 2 || target.canSave(target) || player.canSave(target)) && profit1 >= 2) return 0;
                                        if (profit2 >= 0) return 1;
                                    } else {
                                        profit1 *= -1;
                                        profit2 *= -1;
                                        if (profit2 > 2) return 1;
                                        if (profit1 < 0) return 0;
                                    };
                                    if (profit1 > prompt2) return 0;
                                    return 1;
                                }).set('choiceList', [
                                    "失去1点体力然后摸已损失体力值数量的牌",
                                    "弃已损失体力值数量的牌然后回复1点体力",
                                ]).set('prompt', str);
                            };
                            'step 1'
                            var str = "";
                            if (result.index == 0) {
                                event.type = 0;
                                str += "是否令" + get.translation(target) + "先摸牌再失去体力？";
                                if (player.storage.radiance_yuanluo === false) event.reverse = true;
                                player.storage.radiance_yuanluo = true;
                            } else {
                                event.type = 1;
                                str += "是否令" + get.translation(target) + "先回复体力再弃牌？";
                                if (player.storage.radiance_yuanluo) event.reverse = true;
                                player.storage.radiance_yuanluo = false;
                            };
                            if (event.reverse === true) {
                                player.chooseBool(str).set('ai', function(event, player) {
                                    if (event.type == 0 && get.attitude(player, event.target) < 0 && event.target.hp > 1) return true;
                                    if (event.type == 1 && get.attitude(player, event.target) > 0) return true;
                                    return false;
                                });
                            } else {
                                event.goto(3);
                            };
                            'step 2'
                            if (result.bool) {
                                event.goto(4)
                            } else {
                                event.reverse = false;
                            };
                            'step 3'
                            if (event.type == 0) {
                                target.loseHp();
                            } else {
                                if (target.getDamagedHp() > 0) target.chooseToDiscard('he', target.getDamagedHp(), true);
                            };
                            if (event.reverse) event.finish();
                            'step 4'
                            if (event.type == 0) {
                                if (target.getDamagedHp() > 0) target.draw(target.getDamagedHp());
                            } else {
                                target.recover('nocard', player);
                            };
                            if (event.reverse) event.goto(3);
                        },
                        ai: {
                            order: function(item, player) {
                                return 10;
                            },
                            result: {
                                target: function(player, target) {
                                    if (!target.isDamaged()) return -1;
                                    if (target.hp == 1) {
                                        if (!game.hasPlayer(function(current) {
                                                return current.canSave(target) && get.recoverEffect(target, current, current) > 0;
                                            })) return -10;
                                        if (target.getDamagedHp() > 1) return 0;
                                        return -1;
                                    };
                                    var att = get.attitude(player, target);
                                    var bool = target.isMinHp() && player.hasSkill('radiance_ximing') && target != _status.currentPhase && !player.storage.radiance_ximing.contains(player) && att > 1;
                                    var bonus = bool ? 1 : 0;
                                    var profit1 = target.getDamagedHp() - 1,
                                        profit2 = 2 - target.getDamagedHp();
                                    if (!target.isDamaged()) profit2 = 0;
                                    if (target.hp == 1) profit1 = target.getDamagedHp();

                                    if (typeof player.storage.radiance_yuanluo == 'boolean') {
                                        if (player.storage.radiance_yuanluo) {
                                            if (att > 0) profit1 += 1;
                                            if (bool) profit2 += 1;
                                        } else {
                                            if (att < 0) profit2 -= 1;
                                        };
                                    };
                                    if (att > 0) {
                                        if ((target.hp > 2 || target.canSave(target) || player.canSave(target)) && profit1 >= 2) return Math.max(profit1, profit2);
                                        if (profit2 >= 0 && target.isDamaged()) return 1;
                                    } else {
                                        return Math.min(profit1, profit2);
                                    };
                                    return -1;
                                },
                            },
                        },
                    },
                    "radiance_ximing": {
                        trigger: {
                            global: ["damageEnd", "loseAfter"],
                        },
                        marktext: "系",
                        intro: {
                            content: 'players',
                        },
                        init: function(player) {
                            if (!player.storage.radiance_ximing) player.storage.radiance_ximing = [];
                            if (!player.storage.radiance_ximing_exclude) player.storage.radiance_ximing_exclude = [];
                        },
                        filter: function(event, player) {
                            if (!event.player.isIn()) return false;
                            if (player.storage.radiance_ximing_exclude.contains(event.player)) return false;
                            if (event.name == 'damage' && !event.num) return false;
                            if (event.name == 'lose' && (event.player == _status.currentPhase || event.cards2.length == 0)) return false;
                            return event.player.isMinHp() && !player.storage.radiance_ximing.contains(event.player);
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var list = ["是", "否", "本轮忽略"];
                            var dialog = ui.create.dialog(get.prompt2('radiance_ximing', trigger.player));
                            player.chooseControl(dialog, list).set('ai', function(event, player) {
                                if (get.attitude(player, event._trigger.player) > 0.5) return 0;
                                return 1;
                            });
                            'step 1'
                            if (result.index == 0) {
                                player.logSkill('radiance_ximing', trigger.player);
                                player.draw(2);
                                if (trigger.player == player) {
                                    player.storage.radiance_ximing.push(trigger.player);
                                    player.markSkill('radiance_ximing');
                                    event.finish();
                                };
                            } else if (result.index == 2) {
                                player.storage.radiance_ximing_exclude.push(trigger.player);
                            };
                            if (result.index != 0) {
                                event.finish();
                            };
                            'step 2'
                            player.chooseCard(true, 2, 'h', '交给' + get.translation(trigger.player) + '两张手牌').set('ai', function(card) {
                                var player = _status.event.player;
                                var trigger = _status.event.getTrigger();
                                var target = trigger.player;
                                return target.getAlteredValue(card, player.getCards('h'), target.getCards('hes')) / Math.max(target.hp, 1) - player.getAlteredValue(card) / Math.max(player.hp, 1);
                            });
                            'step 3'
                            if (result.bool) {
                                trigger.player.gain(result.cards, player, 'giveAuto');
                                player.storage.radiance_ximing.push(trigger.player);
                                player.markSkill('radiance_ximing');
                            };
                        },
                        ai: {
                            threaten: 1.6,
                            expose: 0.2,
                        },
                        global: ['radiance_ximing_reset'],
                        subSkill: {
                            reset: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                charlotte: true,
                                sub: true,
                                filter: function(event, player) {
                                    return Array.isArray(player.storage.radiance_ximing);
                                },
                                content: function() {
                                    player.storage.radiance_ximing.length = 0;
                                    player.storage.radiance_ximing_exclude.length = 0;
                                    player.unmarkSkill('radiance_ximing');
                                }
                            },
                            mark: {
                                trigger: {
                                    player: ['damageBefore', 'loseEnd'],
                                },
                                forced: true,
                                silent: true,
                                popup: false,
                                charlotte: true,
                                sub: true,
                                filter: function(event, player) {
                                    if (event.name == 'lose') {
                                        if (event.player == _status.currentPhase) return false;
                                    };
                                    return event.player.isMinHp();
                                },
                                content: function() {
                                    trigger.radiance_ximing = true;
                                },
                            },
                        },
                    },
                    "radiance_shuangbi": {
                        trigger: {
                            player: 'useCardToPlayered',
                        },
                        init: function(player) {
                            if (typeof player.storage.radiance_shuangbi != 'boolean') player.storage.radiance_shuangbi = false;
                        },
                        filter: function(event, player) {
                            return get.tag(event.card, 'damage');
                        },
                        check: function(event, player) {
                            if (player.storage.radiance_shuangbi) return true;
                            return get.attitude(player, event.target) < 0;
                        },
                        prompt: function(event, player) {
                            if (player.storage.radiance_shuangbi) return "使用" + get.translation(event.card) + "指定了" + get.translation(event.target) + "，是否摸一张牌？";
                            return "使用" + get.translation(event.card) + "指定了" + get.translation(event.target) + "，是否令其非锁定技失效且无法响应？";
                        },
                        frequent: function(event, player) {
                            return player.storage.radiance_shuangbi;
                        },
                        shaRelated: true,
                        content: function() {
                            'step 0'
                            if (player.storage.radiance_shuangbi) {
                                player.draw();
                            } else {
                                trigger.directHit.add(trigger.target);
                                trigger.target.addTempSkill('fengyin');
                            }
                            'step 1'
                            player.storage.radiance_shuangbi = !player.storage.radiance_shuangbi;
                        },
                        ai: {
                            directHit_ai: true,
                            ignoreSkill: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (player.storage.radiance_shuangbi) return false;
                                if (arg.card) {
                                    if (!get.tag(arg.card, 'damage')) return false;
                                };
                                if (arg.target) {
                                    if (get.attitude(player, arg.target) > 1) return false;
                                };
                                if (arg.skill) {
                                    var info = get.info(arg.skill);
                                    if (info.equipSkill || info.charlotte || get.is.locked(arg.skill, arg.target)) return false;
                                };
                            },
                        },
                    },
                    "radiance_leiren": {
                        trigger: {
                            player: 'dyingAfter',
                        },
                        filter: function(event, player) {
                            return _status.currentPhase.isIn();
                        },
                        check: function(event, player) {
                            return get.damageEffect(_status.currentPhase, player, player, 'thunder') > 1;
                        },
                        content: function() {
                            _status.currentPhase.damage(1, 'thunder', 'nocard');
                        },
                        locked: false,
                        mod: {
                            attackRange: function(player, current) {
                                return current + player.getDamagedHp();
                            },
                            cardUsable: function(card, player, num) {
                                if (get.name(card, player) == 'sha') {
                                    var num1 = 0;
                                    if (player.getDamagedHp() > 1) num1 += 1;
                                    return num + num1;
                                };
                            },
                            maxHandcard: function(player, num) {
                                if (player.getDamagedHp() > 1) return num + 1;
                            },
                        },
                        group: 'radiance_leiren_draw',
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: ['drawBegin'],
                                },
                                forced: true,
                                sub: true,
                                filter: function(event, player, name) {
                                    return player.getDamagedHp() > 2 || (player.getDamagedHp() > 0 && event.getParent('phaseDraw', true));
                                },
                                content: function() {
                                    trigger.num += 1;
                                },
                            },
                        },
                    },
                    "radiance_senbao": {
                        trigger: {
                            global: 'phaseBefore',
                            player: 'enterGame',
                        },
                        marktext: "宝",
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, content, player) {
                                var cards = player.getExpansions('radiance_senbao');
                                if (cards && cards.length) {
                                    if (player == game.me || player.isUnderControl()) {
                                        dialog.add(cards);
                                    } else {
                                        return '共有' + get.cnNumber(cards.length) + '张“宝”';
                                    }
                                }
                            },
                            onunmark: function(storage, player) {
                                var cards = player.getExpansions('radiance_senbao');
                                if (cards.length) {
                                    player.$throw(cards, 1000);
                                    game.cardsDiscard(cards);
                                    game.log(cards, '被置入了弃牌堆');
                                };
                            },
                        },
                        forced: true,
                        filter: function(event, player) {
                            return (event.name != 'phase' || game.phaseNumber == 0);
                        },
                        content: function() {
                            'step 0'
                            player.addToExpansion(get.cards(4), 'draw').gaintag.add('radiance_senbao');
                        },
                        mod: {
                            attackRange: function(player, current) {
                                return current + player.getExpansions('radiance_senbao').length;
                            },
                        },
                        group: ['radiance_senbao_gain'],
                        subSkill: {
                            gain: {
                                trigger: {
                                    player: 'damageEnd',
                                    source: 'damageSource',
                                },
                                filter: function(event, player, name) {
                                    if (!event.notLink() || event.num < 1 || !event.card || get.name(event.card) != 'sha') return false;
                                    var target = event.player == player ? event.source : event.player;
                                    if (!target || target == player) return false;
                                    return target.countCards('he') > 0;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var target = trigger.player == player ? trigger.source : trigger.player;
                                    event.target = target;
                                    player.choosePlayerCard(target, 1, 'he', "将" + get.translation(target) + "的一张牌作为“宝”");
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('radiance_senbao', target);
                                        player.addToExpansion(result.links, target, 'give').gaintag.add('radiance_senbao');
                                    };
                                },
                            },
                        },
                    },
                    "radiance_runze": {
                        trigger: {
                            player: 'phaseDrawBegin1'
                        },
                        direct: true,
                        filter: function(event, player) {
                            return player.getExpansions('radiance_senbao').length > 0 && event.num > 0 && !event.numFixed;
                        },
                        content: function() {
                            'step 0'
                            var list = player.getExpansions('radiance_senbao');
                            player.chooseButton(1, ["润泽：将一张“宝”置于弃牌堆并令此阶段摸牌数+2", list, 'hidden'], function(button) {
                                var card = button.link;
                                var player = _status.event.player;
                                if (player.skipList.contains('phaseUse') && player.countCards('h') > 1) return -1;
                                return 1 / Math.max(0.1, get.useful(card));
                            });
                            'step 1'
                            if (result.bool) {
                                player.logSkill('radiance_runze');
                                player.$throw(result.links, 1000);
                                game.cardsDiscard(result.links);
                                game.log(result.links, '被置入了弃牌堆');
                                trigger.num += 2;
                            };
                        },
                        group: 'radiance_runze_discard',
                        subSkill: {
                            discard: {
                                trigger: {
                                    global: 'phaseDiscardBefore',
                                },
                                direct: true,
                                filter: function(event, player) {
                                    return player.getExpansions('radiance_senbao').length > 0 && event.player.needsToDiscard();
                                },
                                content: function() {
                                    'step 0'
                                    var list = player.getExpansions('radiance_senbao');
                                    player.chooseButton(1, ["润泽：获得一张“宝”并令" + get.translation(trigger.player) + "跳过弃牌阶段", list, 'hidden'], function(button) {
                                        var card = button.link;
                                        var player = _status.event.player;
                                        var target = _status.event.getTrigger().player;
                                        if (get.attitude(player, target) < 1) return -1;
                                        if (target.needsToDiscard() < 2) return -1;
                                        return Math.max(0.1, get.useful(card, player));
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('radiance_runze', trigger.player);
                                        game.log(trigger.player, "跳过弃牌阶段");
                                        player.gain(result.links, 'gain2', 'log');
                                        trigger.cancel();
                                    };
                                },
                            },
                        },
                        ai: {
                            combo: 'radiance_senbao',
                        },
                    },

                    // nnonhuman
                    "radiance_jiaoyan": {
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            // if (player.getStat('damage') && player.getStat('damage') > 0) return false;
                            var targets = game.filterPlayer2(function(target) {
                                return target != player;
                            });
                            for (var i = 0; i < targets.length; i++) {
                                if (targets[i].getHistory('damage', function(evt) {
                                        return evt.num > 0 && evt.getParent('phaseUse', true) == event.getParent() && evt.source == player;
                                    }).length > 0) return false;
                            };
                            return player.countCards('he', function(card) {
                                return get.tag(card, 'damage');
                            }) > 0;
                        },
                        filterCard: function(card, player) {
                            return get.tag(card, 'damage');
                        },
                        position: 'he',
                        check: function(card) {
                            return 7.1 - get.value(card);
                        },
                        discard: false,
                        lose: false,
                        delay: false,
                        filterTarget: function(card, player, target) {
                            if (ui.selected.targets.length == 0) {
                                return player != target;
                            } else {
                                return ui.selected.targets[0].canUse('sha', target, false);
                            };
                        },
                        selectTarget: 2,
                        multitarget: true,
                        prompt: "将一张伤害牌交给一名角色，然后选择令其使用【杀】的目标",
                        targetprompt: ['得到牌', '出杀目标'],
                        content: function() {
                            'step 0'
                            event.card = cards[0];
                            if (get.type(event.card) == 'equip') {
                                player.$give(event.card, targets[0], true);
                                targets[0].equip(event.card);
                            } else {
                                targets[0].gain(event.card, player, 'give');
                            };

                            player.getHistory('custom').push({
                                radiance_jiaoyan: true,
                            });
                            player.addTempSkill('radiance_jiaoyan_source', 'radiance_jiaoyanEnd');
                            'step 1'
                            targets[0].chooseToUse({
                                name: 'sha'
                            }, '对' + get.translation(targets[1]) + '使用一张【杀】').set('targetRequired', true).set('complexSelect', true).set('filterTarget', function(card, player, target) {
                                return target == _status.event.target2 && _status.event.source.canUse({
                                    name: 'sha'
                                }, target, false);
                            }).set('ai1', function(card) {
                                if (get.name(card) != 'sha') return -1;
                                var source = _status.event.source;
                                var target2 = _status.event.target2;
                                if (source.isTurnedOver()) return -1;
                                if (get.attitude(source, target2) > 0) {
                                    if (4 - source.countCards('h') >= 2 || _status.event.getParent().player.getFriends().length < source.getFriends().length) return -1;
                                    if (source.countCards('h') == 1 || source.countCards('h') >= 4) return 10;
                                    if (target2.hp > source.hp || target2.countCards('h', 'shan') > 0) return source.countCards('h') - 2;
                                };
                                return get.order(card);
                            }).set('ai2', function(target) {
                                var source = _status.event.source;
                                if (source.isTurnedOver()) return -1;

                                if (get.attitude(source, target) > 0) {
                                    if (4 - source.countCards('h') >= 3) return -1;
                                    if (source.countCards('h') == 1 || source.countCards('h') >= 4) return 10;
                                    if (target.hp > source.hp || target.countCards('h', 'shan') > 0) return source.countCards('h') - 2;
                                }
                                return 1;
                            }).set('source', targets[0]).set('target2', targets[1]);
                            'step 2'
                            if (result.bool) {
                                player.gainPlayerCard(targets[0], 'he', 'visible', 'visibleMove', "获得" + get.translation(targets[0]) + "的一张非伤害牌").set('filterButton', function(button) {
                                    var player = _status.event.player;
                                    return !get.tag(button.link, 'damage');
                                });
                            } else {
                                targets[0].draw(Math.max(1, 4 - targets[0].countCards('h')));
                                targets[0].turnOver();
                            };
                        },
                        group: 'radiance_jiaoyan_lose',
                        subSkill: {
                            lose: {
                                trigger: {
                                    global: 'phaseJieshu'
                                },
                                forced: true,
                                silent: true,
                                sub: true,
                                charlotte: true,
                                popup: false,
                                filter: function(event, player) {
                                    return player.getHistory('custom', function(evt) {
                                        return evt.radiance_jiaoyan;
                                    }).length > 1;
                                },
                                content: function() {
                                    player.loseHp();
                                },
                            },
                            source: {
                                trigger: {
                                    global: 'damageBegin1'
                                },
                                forced: true,
                                charlotte: true,
                                silent: true,
                                popup: false,
                                sub: true,
                                firstDo: true,
                                priority: 100,
                                filter: function(event, player) {
                                    if (!event.getParent(4) || event.getParent(4).name != 'radiance_jiaoyan') return false;
                                    return (event.card && event.card.name == 'sha');
                                },
                                content: function() {
                                    'step 0'
                                    trigger.source = player;
                                },
                            },
                        },
                        ai: {
                            order: function(item, player) {
                                var num = player.getStat().skill.radiance_jiaoyan;
                                if (!num) {
                                    return 9;
                                };
                                if (num > 1 || player.hp == 1) return 0;
                                return 7;
                            },
                            result: {
                                target: function(player, target) {
                                    var card;
                                    if (ui.selected.cards.length > 0) {
                                        card = ui.selected.cards[0];
                                    } else {
                                        card = {
                                            name: 'sha'
                                        };
                                    }
                                    if (ui.selected.targets.length == 0) {
                                        if (target.isTurnedOver()) return 10;
                                        if (target.hasSkillTag('noturn')) return 0;
                                        if (target.countCards('h', 'sha') < 1 && card.name != 'sha') return -10;

                                        var max = 0;
                                        if (target.countCards('h', function(card) {
                                                if (!get.tag(card, ' damage')) {
                                                    max = Math.max(max, get.value(card, player));
                                                    return true;
                                                }
                                                return false;
                                            }) > 0) {
                                            return -max;
                                        }
                                        return -3;
                                    } else {
                                        return -1;
                                    }
                                },
                            },
                        },
                    },
                    "radiance_tianhua": {
                        trigger: {
                            player: "damageBegin4",
                        },
                        forced: true,
                        usable: 1,
                        init: function(player) {
                            if (typeof player.storage.radiance_tianhua != 'number') player.storage.radiance_tianhua = 2;
                        },
                        mark: true,
                        marktext: "华",
                        intro: {
                            content: '与其他角色计算距离时-#，其他角色与你计算距离时+#，手牌上限+#',
                        },
                        filter: function(event, player) {
                            var evt = event.getParent('useCard', true);
                            return evt && event.card && event.card == evt.card && event.source != player && event.num > 0;
                        },
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            'step 1'
                            player.loseHp();
                            player.link(false);
                        },
                        group: 'radiance_tianhua_add',
                        global: 'radiance_tianhua_draw',
                        subSkill: {
                            add: {
                                trigger: {
                                    player: "loseHpAfter",
                                },
                                direct: true,
                                sub: true,
                                charlotte: true,
                                filter: function(event, player) {
                                    return true;
                                },
                                content: function() {
                                    'step 0'
                                    player.storage.radiance_tianhua += trigger.num;
                                    player.markSkill('radiance_tianhua');
                                },
                            },
                            draw: {
                                trigger: {
                                    player: 'phaseEnd'
                                },
                                forced: true,
                                sub: true,
                                filter: function(event, player) {
                                    return player.hasMark('radiance_tianhua');
                                },
                                content: function() {
                                    'step 0'
                                    player.draw(player.storage.radiance_tianhua);
                                    'step 1'
                                    player.removeMark('radiance_tianhua', 1, false);
                                },
                            },
                        },
                        mod: {
                            globalFrom: function(from, to, distance) {
                                if (typeof from.storage.radiance_tianhua == 'number') return distance - from.storage.radiance_tianhua;
                            },
                            globalTo: function(from, to, distance) {
                                if (typeof to.storage.radiance_tianhua == 'number') return distance + to.storage.radiance_tianhua;
                            },
                            maxHandcard: function(player, current) {
                                if (typeof player.storage.radiance_tianhua == 'number') return current + player.storage.radiance_tianhua;
                            }
                        },
                        ai: {
                            threaten: 0.9,
                        },
                        action_tag: {
                            overall: 2.5,
                            range: 1,
                            draw: 1.5,
                            loseHp_defend: 1,
                        },
                    },
                    "radiance_rumeng": {
                        trigger: {
                            player: ['phaseJudgeBefore', 'phaseUseBefore'],
                        },
                        filter: function(event, player) {
                            return player.isDamaged() || game.hasPlayer(function(target) {
                                return target != player && target.countCards('h') > 0;
                            });
                        },
                        prompt2: function(event, player) {
                            var str = "";
                            if (event.name == 'phaseJudge') str += "你可以跳过你的判定和摸牌阶段"
                            else str += "你可以跳过你的出牌和弃牌阶段";
                            str += "，则你回复1点体力，然后你可以观看一名其他角色的手牌，并可以选择";
                            if (!player.hasSkill('radiance_rumeng_sha') && !player.hasSkill('radiance_rumeng_shan')) {
                                str += "一项：1.获得其中一张【闪】；2.选择其中一张【杀】令其对你选择的另一名角色使用。";
                            } else if (!player.hasSkill('radiance_rumeng_sha')) {
                                str += "其中一张【杀】令其对你选择的另一名角色使用";
                            } else {
                                str += "获得其中一张【闪】";
                            };
                            return str;
                        },
                        check: function(event, player) {
                            if (event.name == 'phaseJudge') {
                                if (player.getDamagedHp() > 1) return true;
                                if (player.getDamagedHp() == 0) {
                                    return false;
                                };
                                return player.skipList.contains('phaseUse') || player.hasJudge('bingliang');
                            };
                            var base = player.countCards('h', function(card) {
                                return get.tag(card, 'recover') && player.getUseValue(card) > 0
                            }) > 0 ? 2 : 3;
                            if (player.needsToDiscard(-1) < 2 && player.getDamagedHp() <= 1 && player.hasSkill('radiance_manyue')) return true;
                            if (player.countCards('h', function(card) {
                                    return player.hasUseTarget(card) && player.getUseValue(card) > 0;
                                }) >= base || !player.isDamaged()) {
                                return false;
                            };
                            return true;
                        },
                        content: function() {
                            'step 0'
                            trigger.cancel();
                            player.skipList.add(trigger.name == 'phaseJudge' ? 'phaseDraw' : 'phaseDiscard');
                            player.recover('nocard');
                            'step 1'
                            var str = "可以观看一名其他角色手牌，若其有";
                            if (!player.hasSkill('radiance_rumeng_sha') && !player.hasSkill('radiance_rumeng_shan')) {
                                str += "【杀】或【闪】你可以执行后续效果";
                            } else if (!player.hasSkill('radiance_rumeng_sha')) {
                                str += "【杀】你可以令其使用之";
                            } else {
                                str += "【闪】你可以获得一张";
                            };
                            player.chooseTarget(1, str, function(card, player, target) {
                                return target != player && target.countCards('h') > 0;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var bool = Array.isArray(player.storage.radiance_rumeng) && player.storage.radiance_rumeng.contains(target);
                                if (!player.hasSkill('radiance_rumeng_shan') && !player.hasShan()) {
                                    if (bool) {
                                        if (target.countGainableCards(player, 'h', 'shan') > 0) return 4 * (1 - get.attitude(player, target));
                                        if (target.countGainableCards(player, 'h', 'shan') == 0) return 0;
                                    };
                                } else if (!player.hasSkill('radiance_rumeng_sha')) {
                                    if (bool) {
                                        if (target.countCards('h', function(card) {
                                                return get.name(card, target) == 'sha' && target.hasUseTarget(card, false);
                                            }) > 0) return 4 * (1 - get.attitude(player, target));
                                    };
                                } else if (!player.hasSkill('radiance_rumeng_shan')) {
                                    if (bool) {
                                        if (target.countGainableCards(player, 'h', 'shan') > 0) return 4 * (1 - get.attitude(player, target));
                                        if (target.countGainableCards(player, 'h', 'shan') == 0) return 0;
                                    };
                                };
                                return Math.max(0.4, 1 - get.attitude(player, target)) * Math.sqrt(target.countCards('h'));
                            });
                            'step 2'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                game.log(player, "通过“", 'radiance_rumeng', "”观看了", target, "的手牌");
                                if (!Array.isArray(player.storage.radiance_rumeng)) player.storage.radiance_rumeng = [];
                                player.storage.radiance_rumeng.add(target);
                                player.viewHandcards(target);
                                if (target.countCards('h', function(card) {
                                        if (!player.hasSkill('radiance_rumeng_shan') && get.name(card, target) == 'shan') return true;
                                        if (!player.hasSkill('radiance_rumeng_sha') && get.name(card, target) == 'sha') return true;
                                        return false;
                                    }) == 0) {
                                    event.finish();
                                };
                            } else {
                                event.finish();
                            };
                            'step 3'
                            var hs = target.getCards('h');
                            var str = "选择" + get.translation(target) + "的";
                            if (!player.hasSkill('radiance_rumeng_sha') && !player.hasSkill('radiance_rumeng_shan')) {
                                str += "一张【杀】令其对另一名角色使用或一张【闪】获得";
                            } else if (!player.hasSkill('radiance_rumeng_sha')) {
                                str += "一张【杀】令其对另一名角色使用";
                            } else {
                                str += "一张【闪】获得";
                            };
                            var dialog = ui.create.dialog(str);
                            dialog.add(hs);
                            player.chooseButton(dialog).set('filterButton', function(button) {
                                var target = _status.event.getParent().target;
                                var player = _status.event.player;
                                var card = button.link;
                                if (!player.hasSkill('radiance_rumeng_shan') && get.name(card, target) == 'shan' && lib.filter.canBeGained(card, player, target)) return true;
                                if (!player.hasSkill('radiance_rumeng_sha') && get.name(card, target) == 'sha' && target.hasUseTarget(card, false)) return true;
                                return false;
                            }).set('ai', function(button) {
                                var player = _status.event.player;
                                var card = button.link;
                                var owner = get.owner(card);
                                if (get.name(card, owner) == 'shan') return get.value(card, player, 'raw');
                                var max = -1;
                                for (var i = 0; i < game.players.length; i++) {
                                    var target = game.players[i];
                                    if (!owner.canUse(card, target, false)) continue;
                                    if (get.effect(target, card, owner, player) > max) max = get.effect(target, card, owner, player);
                                };
                                return max;
                            });
                            'step 4'
                            if (result.bool) {
                                var card = result.links[0];
                                event.card = card;
                                var name = get.name(card, target);
                                player.addTempSkill('radiance_rumeng_' + name);
                                if (name == 'shan') {
                                    target.give(result.links, player, true);
                                    event.finish();
                                };
                            } else {
                                event.finish();
                            }
                            'step 5'
                            player.chooseTarget(1, "令" + get.translation(target) + "对一名角色使用" + get.translation(card), function(card, player, target) {
                                var owner = _status.event.getParent().target;
                                return owner.canUse(_status.event.card, target, false);
                            }).set('ai', function(target) {
                                var owner = _status.event.getParent().target;
                                return get.effect(target, _status.event.card, owner, _status.event.player);
                            }).set('card', card);
                            'step 6'
                            if (result.bool) {
                                game.log(player, "令", target, "对", result.targets[0], "使用了", card);
                                target.useCard(card, result.targets[0], false, 'noai');
                            };
                        },
                        subSkill: {
                            sha: {
                                charlotte: true,
                                locked: true,
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_rumeng;
                                },
                            },
                            shan: {
                                charlotte: true,
                                locked: true,
                                onremove: function(player, skill) {
                                    delete player.storage.radiance_rumeng;
                                },
                            },
                        },
                    },
                    "radiance_manyue": {
                        trigger: {
                            player: 'phaseJieshuBegin',
                        },
                        filter: function(event, player) {
                            return !player.isDamaged();
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var list = [];
                            for (var i = 0; i < lib.inpile.length; i++) {
                                var name = lib.inpile[i];
                                var card = {
                                    name: name,
                                };
                                if (get.tag(card, 'damage')) {
                                    if (name == 'sha') {
                                        list.push(['基本', '', 'sha']);
                                        list.push(['基本', '', 'sha', 'fire']);
                                        list.push(['基本', '', 'sha', 'thunder']);
                                        list.push(['基本', '', 'sha', 'ice']);
                                    } else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                };
                            };
                            list.sort(lib.sort.card);
                            event.list = list;
                            if (list.length == 0) {
                                event.finish();
                                return ui.create.dialog('满月无可用牌');
                            };
                            var dialog = ui.create.dialog("满月：可以视为对一名角色使用一张伤害牌", [event.list, 'vcard']);
                            player.chooseButton(dialog).set('ai', function(button) {
                                var player = _status.event.player;
                                var card = {
                                    name: button.link[2],
                                    nature: button.link[3],
                                };
                                var max = -1;
                                for (var i = 0; i < game.players.length; i++) {
                                    var target = game.players[i];
                                    if (!player.canUse(card, target, false)) continue;
                                    if (get.effect_use(target, card, player, player) > max) max = get.effect_use(target, card, player, player);
                                };
                                return max;
                            }).set('filterButton', function(button) {
                                return _status.event.player.hasUseTarget({
                                    name: button.link[2],
                                    nature: button.link[3],
                                }, false);
                            });
                            'step 1'
                            if (result.bool) {
                                var card = {
                                    name: result.links[0][2],
                                    nature: result.links[0][3],
                                };
                                event.card = card;
                                game.log(card);
                                player.chooseTarget(1, "视为对一名角色使用" + get.translation(card) + "", function(card, player, target) {
                                    return player.canUse(_status.event.card, target, false);
                                }).set('ai', function(target) {
                                    return get.effect(target, _status.event.card, _status.event.player, _status.event.player);
                                }).set('card', card);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.bool && result.targets.length) {
                                var target = result.targets[0];
                                player.logSkill('radiance_manyue', target);
                                player.useCard(card, target, false).set('animate', true);
                            };
                        },
                    },
                    "radiance_diewu": {
                        trigger: {
                            global: 'phaseUseBegin',
                        },
                        init: function(player, skill) {
                            if (typeof player.storage.radiance_diewu != 'string') player.storage.radiance_diewu = 'male';
                        },
                        filter: function(event, player) {
                            return event.player.sex == player.storage.radiance_diewu;
                        },
                        check: function(event, player) {
                            var att = get.attitude(player, event.player);
                            if (att > 0) return (!event.player.needsToDiscard(-2) && event.player.hp > 1) || (event.player.countCards('h', function(card) {
                                return event.player.getUseValue(card) > 0 && get.name(card, event.player) > 1;
                            }) > 1);
                            return true;
                        },
                        logTarget: 'player',
                        content: function() {
                            'step 0'
                            player.draw(1);
                            trigger.player.addTempSkill('radiance_diewu_af');
                        },
                    },
                    "radiance_diewu_af": {
                        charlotte: true,
                        locked: true,
                        mod: {
                            maxHandcard: function(player, current) {
                                return current - 1;
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                    },
                    "radiance_fengying": {
                        trigger: {
                            player: ['phaseZhunbeiBegin', 'damageEnd'],
                        },
                        filter: function(event, player) {
                            if (event.name == 'damage' && event.num < 1) return false;
                            return true;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            if (player.countCards('h') > player.hp) {
                                player.chooseCardTarget({
                                    filterCard: true,
                                    filterTarget: function(card, player, target) {
                                        return target != player;
                                    },
                                    selectCard: player.countCards('h') - player.hp,
                                    selectTarget: [0, 1],
                                    ai1: function(card) {
                                        var player = _status.event.player;
                                        if (_status.event.du) {
                                            return -get.value(card, player, 'raw');
                                        };
                                        if (!game.hasPlayer(target => player.getFriends(false).contains(target))) return 0;
                                        return 7 - get.alteredValue(card, player);
                                    },
                                    ai2: function(target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (_status.event.du) return 0.5 - att;
                                        var nh2 = target.countCards('h') + target.hp * 1.5;
                                        var num = Math.sqrt(1 + nh2);
                                        return Math.max(att, 1) / num;
                                    },
                                    du: player.hasCard(function(card) {
                                        return get.value(card, player, 'raw') < 0;
                                    }),
                                    prompt: "风影",
                                    prompt2: "将超出体力值的手牌交给其他角色或弃置，然后回复1点体力",
                                });
                            } else {
                                event.goto(3);
                            };
                            'step 1'
                            if (result.bool) {
                                if (result.targets.length > 0) {
                                    // if (!player.isUnderControl(true) && get.attitude(player, result.targets[0]) < 0) {
                                    //    player.logSkill('radiance_fengying');
                                    //    player.discard(result.cards);
                                    // } else {};
                                    player.logSkill('radiance_fengying', result.targets[0]);
                                    player.give(result.cards, result.targets[0], false);
                                } else {
                                    player.logSkill('radiance_fengying');
                                    player.discard(result.cards);
                                };
                            } else {
                                event.goto(3);
                            }
                            'step 2'
                            if (player.isDamaged()) {
                                player.recover();
                                event.finish();
                            };
                            'step 3'
                            player.chooseBool("风影：是否将“蝶舞”的性别切换至" + (player.storage.radiance_diewu == 'female' ? "男" : "女") + "性？").set('ai', function(event, player) {
                                var num1 = game.countPlayer(function(target) {
                                        return target.sex == player.storage.radiance_diewu;
                                    }),
                                    num2 = game.countPlayer(function(target) {
                                        return target.sex != player.storage.radiance_diewu && ['male', 'female'].contains(target.sex);
                                    });
                                if (num2 - num1 > 0) return true;
                                return false;
                            });
                            'step 4'
                            if (result.bool) {
                                player.logSkill('radiance_fengying');
                                player.storage.radiance_diewu = player.storage.radiance_diewu == 'female' ? 'male' : 'female';
                                game.log(player, "切换了", 'radiance_fengying', "的性别，现在为", player.storage.radiance_diewu);
                            };
                        },
                    },

                    "radiance_yidai": {
                        trigger: {
                            player: 'die'
                        },
                        forced: true,
                        forceDie: true,
                        skillAnimation: true,
                        animationColor: 'thunder',
                        filter: function(event) {
                            return event.source && event.source.isIn();
                        },
                        content: function() {
                            trigger.source.addSkill('radiance_yidai');
                        },
                        logTarget: 'source',
                        mod: {
                            attackRange: function(player, current) {
                                if (current > 1) {
                                    return current - 1;
                                };
                            },
                        },
                        action_tag: {
                            overall: -1,
                            deterrence: 1,
                            negative: 1,
                        },
                        ai: {
                            neg: true,
                        }
                    },
                    "radiance_renlin": {
                        trigger: {
                            global: ["loseAfter", "cardsDiscardAfter", "gameDrawAfter"],
                        },
                        frequent: true,
                        locked: false,
                        filter: function(event, player) {
                            if (event.name == 'gameDraw') return true;
                            var cards = (event.cards2 || event.cards);
                            if (!cards) return false;
                            if (event.name == 'lose') {
                                if ((event.type != 'discard' && event.type != 'equip') || event.player == player) return false;
                            } else {
                                var evt = event.getParent();
                                if (evt.name != 'orderingDiscard' || (evt.relatedEvent && evt.relatedEvent.player == player)) return false;
                            };
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'equip' && get.subtype(cards[i]) == 'equip1' && get.position(cards[i], true) == 'd') return true;
                            };
                            return false;
                        },
                        init: function(player, skill) {
                            if (typeof player.storage.radiance_renlin != 'boolean') player.storage.radiance_renlin = false;
                        },
                        content: function() {
                            'step 0'
                            if (trigger.name == 'gameDraw') {
                                var card = get.cardPile(function(card) {
                                    return get.type(card) == 'equip' && get.subtype(card) == 'equip1';
                                });
                                if (card) {
                                    player.$gain(card, 'gain2');
                                    player.equip(card);
                                }
                                event.finish();
                            };
                            'step 1'
                            event.cards = [];
                            var cards = trigger.cards2 || trigger.cards;
                            for (var i = 0; i < cards.length; i++) {
                                if (get.type(cards[i]) == 'equip' && get.subtype(cards[i]) == 'equip1' && get.position(cards[i], true) == 'd') event.cards.push(cards[i]);
                            }
                            'step 2'
                            player.gain(event.cards, 'gain2', 'log');
                        },
                        group: 'radiance_renlin_save',
                        subSkill: {
                            save: {
                                trigger: {
                                    global: 'dyingBegin',
                                },
                                filter: function(event, player) {
                                    if (player.storage.radiance_renlin || event.player.hp > 0) return false;
                                    return player.countCards('he', {
                                        subtype: 'equip1'
                                    }) > 0;
                                },
                                direct: true,
                                skillAnimation: 'epic',
                                animationColor: 'metal',
                                content: function() {
                                    'step 0'
                                    player.chooseCardTarget({
                                        prompt: "刃林",
                                        prompt2: "重铸任意数量的武器牌，令一名濒死的角色回复",
                                        filterCard: function(card, player) {
                                            return get.subtype(card) == 'equip1';
                                        },
                                        position: 'he',
                                        selectCard: [1, Infinity],
                                        filterTarget: function(card, player, target) {
                                            return target.hp <= 0;
                                        },
                                        ai1: function(card) {
                                            return 9.1 - get.value(card);
                                        },
                                        ai2: function(target) {
                                            var player = _status.event.player;
                                            var zhu = get.zhu(player);
                                            if (zhu == target) return get.recoverEffect(target, player, player);
                                            var friends = player.getFriends();
                                            if (zhu == player && friends.contains(target)) return (player.hp > 2 ? get.recoverEffect(target, player, player) : -1);
                                            return get.recoverEffect(target, player, player) - 2;
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('radiance_renlin_save', result.targets[0]);
                                        player.storage.radiance_renlin = true;
                                        event.num = result.cards.length;
                                    } else {
                                        event.finish();
                                    };
                                    'step 2'
                                    player.lose(result.cards, ui.discardPile, 'visible');
                                    player.$throw(result.cards, 1000);
                                    player.draw(event.num);
                                    'step 3'
                                    trigger.player.recover(event.num, player, 'nocard');
                                },
                            },
                        },
                        mod: {
                            ignoredHandcard: function(card, player) {
                                if (get.subtype(card) == 'equip1') {
                                    return true;
                                }
                            },
                            cardDiscardable: function(card, player, name) {
                                if (name == 'phaseDiscard' && get.subtype(card) == 'equip1') {
                                    return false;
                                }
                            },
                        },
                        action_tag: {
                            profit: function(player, condition) {
                                if (!player.hasSkill('radiance_jianxing')) return 0.5;
                                return game.countPlayer() / 3;
                            },
                            garbageReuse: function(player, card) {
                                if (get.subtype(card) == 'equip1') return true;
                                return false;
                            },
                        },
                    },
                    "radiance_jianxing": {
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            return player.countCards('he', function(card) {
                                return get.type(card) == 'equip' && get.subtype(card) == 'equip1';
                            }) > 0 && !(player.hasSkill('radiance_jianxing_u') && player.hasSkill('radiance_jianxing_h') && player.hasSkill('radiance_jianxing_d') && player.hasSkill('radiance_jianxing_r'));
                        },
                        chooseButton: {
                            dialog: function(event, player) {
                                var players = game.players.slice(0);
                                players.sort(lib.sort.seat);
                                var map = {
                                    'd': "伤害",
                                    'h': "回复",
                                    'u': "使用",
                                    'r': "复原",
                                };
                                var list = ['d', 'h', 'u', 'r'];
                                if (player.hasSkill('radiance_jianxing_d')) list.remove('d');
                                if (player.hasSkill('radiance_jianxing_h')) list.remove('h');
                                if (player.hasSkill('radiance_jianxing_u')) list.remove('u');
                                if (player.hasSkill('radiance_jianxing_r')) list.remove('r');

                                var dialog = ui.create.dialog('剑醒', 'hidden');
                                var table = document.createElement('div');
                                table.classList.add('add-setting');
                                table.style.margin = '0';
                                table.style.width = '100%';
                                table.style.position = 'relative';
                                for (var i = 0; i < list.length; i++) {
                                    var current = list[i];
                                    var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                    td.innerHTML = '<span>' + map[current] + '</span>';
                                    td.link = current;
                                    td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    for (var j in lib.element.button) {
                                        td[j] = lib.element.button[j];
                                    }
                                    table.appendChild(td);
                                    dialog.buttons.add(td);
                                }
                                dialog.content.appendChild(table);

                                dialog.addText("目标角色");
                                dialog.add(players);
                                return dialog;
                            },
                            filter: function(button, player) {
                                if (ui.selected.buttons.length == 0) return (typeof button.link == 'string');
                                if (ui.selected.buttons.length == 1) {
                                    if (typeof button.link == 'string') return false;
                                    var selected = ui.selected.buttons[0].link;
                                    if (selected == 'd') return button.link != player;
                                    if (selected == 'u') return button.link != player && !button.link.getEquip(1);
                                    if (selected == 'h') return button.link.isDamaged();
                                    if (selected == 'r') return button.link.isTurnedOver() || button.link.isLinked();
                                };
                                return false;
                            },
                            select: 2,
                            complexSelect: true,
                            check: function(button) {
                                var player = _status.event.player;
                                if (player.countCards('he', function(card) {
                                        return get.type(card) == 'equip' && get.subtype(card) == 'equip1';
                                    }) <= 1) {
                                    return -1;
                                };
                                var zhu = get.zhu(player);
                                if (ui.selected.buttons.length == 0) {
                                    if (typeof button.link != 'string') return -1;
                                    if (zhu && zhu.isDamaged() && get.recoverEffect(zhu, player, player) > 1 && button.link == 'h') return 15;
                                    if (game.countPlayer(function(target) {
                                            return get.damageEffect(target, player, player) > 0 && target.hp == 1;
                                        }) && button.link == 'd') return 9;
                                    if (game.countPlayer(function(target) {
                                            return get.attitude(player, target) > 1 && target.isTurnedOver();
                                        }) && button.link == 'r') return 8;
                                    if (game.countPlayer(function(target) {
                                            return get.recoverEffect(target, player, player) > 0 && target.hp <= 2;
                                        }) && button.link == 'h') return 7;
                                    if (game.countPlayer(function(target) {
                                            return get.damageEffect(target, player, player) > 0;
                                        }) && button.link == 'd') return 6;
                                    if (game.countPlayer(function(target) {
                                            return (get.realAttitude || get.attitude)(player, target) > 0 && !target.getEquip(1) && target != player;
                                        }) && button.link == 'u') return 4;
                                    if (game.countPlayer(function(target) {
                                            return get.recoverEffect(target, player, player) > 0;
                                        }) && button.link == 'h') return 2;
                                    return 0;
                                };
                                if (ui.selected.buttons.length == 1) {
                                    var selected = ui.selected.buttons[0].link;
                                    if (typeof button.link == 'string') return 0;
                                    var target = button.link;
                                    switch (selected) {
                                        case 'u': {
                                            return (get.realAttitude || get.attitude)(player, target);
                                            break;
                                        }
                                        case 'd': {
                                            return get.damageEffect(target, player, player);
                                            break;
                                        }
                                        case 'h': {
                                            return get.recoverEffect(target, player, player);
                                            break;
                                        }
                                        case 'r': {
                                            if (target.isTurnedOver()) return get.attitude(player, target) - 1;
                                            break;
                                        }
                                        default:
                                            return 0;
                                            break;
                                    };
                                };
                                return 0;
                            },
                            backup: function(links, player) {
                                return {
                                    filterCard: function(card, player) {
                                        return get.type(card, player) == 'equip' && get.subtype(card) == 'equip1';
                                    },
                                    position: 'he',
                                    direct: true,
                                    selectCard: 1,
                                    discard: false,
                                    lose: false,
                                    delay: 0,
                                    check: function(card) {
                                        var player = _status.event.player;
                                        if (player.getAttackRange() < 1 && get.position(card) == 'e') return 15 - get.value(card);
                                        return 10 - get.value(card);
                                    },
                                    content: function() {
                                        'step 0'
                                        event.targetx = lib.skill.radiance_jianxing_backup.targetx;
                                        event.type = lib.skill.radiance_jianxing_backup.type;
                                        player.logSkill('radiance_jianxing', event.targetx);
                                        player.addTempSkill('radiance_jianxing_' + event.type, 'phaseUseEnd');
                                        if (event.type == 'd' || event.type == 'h') player.discard(cards);
                                        'step 1'
                                        if (event.type == 'd') {
                                            event.targetx.damage(1, player, 'nocard');
                                        } else if (event.type == 'h') {
                                            event.targetx.recover(1, player, 'nocard');
                                        } else if (event.type == 'u') {
                                            player.$give(cards, event.targetx, true);
                                            event.targetx.equip(cards[0]);
                                        } else if (event.type == 'r') {
                                            player.lose(cards, ui.cardPile, 'insert');
                                            game.log(player, '将', cards, '置于牌堆顶');
                                            game.broadcastAll(function(player) {
                                                var cardx = ui.create.card();
                                                cardx.classList.add('infohidden');
                                                cardx.classList.add('infoflip');
                                                player.$throw(cardx, 1000, 'nobroadcast');
                                            }, player);
                                            event.targetx.turnOver(false);
                                            event.targetx.link(false);
                                        };
                                    },
                                    type: links[0],
                                    targetx: links[1],
                                    ai: {
                                        order: 3,
                                        result: {
                                            player: function(player, target) {
                                                return 1;
                                            },
                                        },
                                        expose: 0.3,
                                    },
                                };
                            },
                            prompt: function(links, player) {
                                var map = {
                                    'd': "弃置一张武器牌并对" + get.translation(links[1]) + "造成1点伤害",
                                    'h': "弃置一张武器牌并令" + get.translation(links[1]) + "回复1点体力",
                                    'u': "令" + get.translation(links[1]) + "装备一张武器牌",
                                    'r': "置顶一张武器牌并令" + get.translation(links[1]) + "复原",
                                };
                                return map[links[0]];
                            },
                        },
                        ai: {
                            order: 3,
                            result: {
                                player: function(player, target) {
                                    return 1;
                                },
                            },
                            expose: 0.3,
                            combo: 'radiance_renlin',
                        },
                        locked: false,
                        mod: {
                            aiValue: function(player, card, num) {
                                if (get.type(card) == 'equip' && get.subtype(card) == 'equip1') {
                                    return num * 1.2;
                                }
                            },
                            aiOrder: function(player, card, num) {
                                if (get.type(card) == 'equip' && get.subtype(card) == 'equip1') {
                                    if (player.getEquip(1) && !(player.hasSkill('radiance_jianxing_d' && player.hasSkill('radiance_jianxing_h') && player.hasSkill('radiance_jianxing_u')))) {
                                        return 0.5;
                                    }
                                }
                            },
                        },
                        subSkill: {
                            d: {
                                charlotte: true,
                            },
                            h: {
                                charlotte: true,
                            },
                            u: {
                                charlotte: true,
                            },
                            r: {
                                charlotte: true,
                            },
                        },
                    },
                    "radiance_tenglong": {
                        trigger: {
                            global: "phaseUseBegin",
                        },
                        filter: function(event, player) {
                            if (event.player == player && player.storage.radiance_juesha == true && !player.hasCard('sha', 'h')) return false;
                            if (!player.hasSha()) return false;
                            return event.player != player;
                        },
                        direct: true,
                        locked: true,
                        firstDo: true,
                        priority: 99999,
                        content: function() {
                            'step 0'
                            if (trigger.player == player && player.storage.radiance_juesha == true && !player.hasCard('sha', 'h')) {
                                player.logSkill('radiance_tenglong');
                                player.gain(get.cardPile(function(card) {
                                    return get.name(card) == 'sha';
                                }), 'gain2');
                                event.finish();
                            }
                            'step 1'
                            event.next2 = player.chooseToUse({
                                name: 'sha'
                            }, '腾龙：对' + get.translation(trigger.player) + '或他的上下家使用一张【杀】').set('targetRequired', true).set('complexSelect', true).set('filterTarget', function(card, player, target) {
                                var trigger = _status.event.getTrigger();
                                var player = _status.event.player;
                                if (target != trigger.player && target != trigger.player.getNext() && target != trigger.player.getPrevious()) return false;
                                return player.canUse({
                                    name: 'sha'
                                }, target, false);
                            });
                            'step 2'
                            if (result.bool) {
                                player.logSkill('radiance_tenglong');
                                // player.draw();                             
                                if (!player.storage.radiance_juesha) {
                                    var history = player.getHistory('useCard', function(evt) {
                                        return evt.card.name == 'sha' && evt.getParent(2) == event;
                                    });
                                    var card = get.cardPile(card => get.type(card) == 'basic');
                                    if (history[0].targets.contains(trigger.player) && card) {
                                        player.gain(card, 'draw');
                                    } else {
                                        player.draw();
                                    };
                                };
                                player.addTempSkill('radiance_tenglong_af');
                                event.finish();
                            }
                        },
                        group: 'radiance_tenglong_sha',
                        subSkill: {
                            sha: {
                                trigger: {
                                    player: ['useCardBefore'],
                                },
                                filter: function(event, player) {
                                    return get.name(event.card) === 'sha' && player.storage.radiance_juesha === true;
                                },
                                forced: true,
                                firstDo: true,
                                priority: 600,
                                usable: 114514,
                                content: function() {
                                    game.countPlayer(function(current) {
                                        if (current != player && !current.hasSkill('radiance_tenglong_sha_db')) {
                                            current.addTempSkill('radiance_tenglong_sha_db', 'shaEnd');
                                        }
                                    });
                                    if (player.storage.counttrigger.radiance_tenglong_sha == 1) {
                                        var card = get.cardPile(function(card) {
                                            return get.type(card) == 'basic';
                                        });
                                        if (card) player.gain(card, 'draw', 'log').set('radiance_tenglong', true);
                                    };
                                },
                            },
                        },
                        ai: {
                            unequip_ai: true,
                            unequip: true,
                            ignoreSkill: true,
                            skillTagFilter: function(player, tag, arg) {
                                if (tag == 'ignoreSkill') {
                                    if (!player.storage.radiance_juesha) return false;
                                    if (!arg) return false;
                                    if (!arg.card || !arg.skill) return false;
                                    if (lib.skill[arg.skill].charlotte && !get.is.locked(arg.skill, player)) return false;
                                    if (arg.card.name != 'sha') return false;
                                };
                                if (arg && arg.name == 'sha') return true;
                                return false;
                            }
                        },
                        action_tag: {
                            overall: 6,
                            sha_multi: 3,
                            draw: 1,
                        },
                    },
                    "radiance_tenglongx": {},
                    "radiance_tenglong_af": {
                        charlotte: true,
                        forced: true,
                        mark: true,
                        marktext: "腾",
                        mod: {
                            globalTo: function(from, to, distance) {
                                return distance + 1;
                            },
                        },
                        intro: {
                            content: "其他角色与你计算距离时+1",
                        },
                    },
                    "radiance_tenglong_sha_db": {
                        inherit: 'fengyin',
                        mark: false,
                        charlotte: true,
                        debuff: true,
                        ai: {
                            neg: true,
                            unequip2: true,
                        },
                    },
                    "radiance_juesha": {
                        trigger: {
                            global: "dyingBegin",
                        },
                        firstDo: true,
                        priority: 1000,
                        unique: true,
                        mark: true,
                        skillAnimation: 'epic',
                        limited: true,
                        animationColor: 'fire',
                        intro: {
                            content: 'limited'
                        },
                        marktext: "绝",
                        init: function(player) {
                            if (typeof player.storage.radiance_juesha != 'boolean') player.storage.radiance_juesha = false;
                        },
                        filter: function(event, player) {
                            return (!player.storage.radiance_juesha);
                        },
                        logTarget: 'player',
                        check: function(event, player) {
                            if (event.player.hp < 0) return false;
                            return get.attitude(player, event.player) < 0;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_juesha');
                            player.draw(3);
                            'step 1'
                            trigger.player.hp = trigger.player.hp - 1;
                            trigger.player.update();
                        },
                        ai: {
                            expose: 0.5,
                        },
                        derivation: 'radiance_tenglongx',
                        action_tag: {
                            overall: 4,
                            limited: 1,
                            combo: 1,
                            draw: 1.5,
                            loseHp: 1,
                        },
                    },
                    "radiance_gongfa": {
                        trigger: {
                            global: 'useCardToPlayer'
                        },
                        filter: function(event, player) {
                            if (!event.isFirstTarget) return false;
                            if (player.getEquip(2)) return false;
                            if (get.name(event.card) != 'sha') return false;
                            if (!event.targets || event.player == player) return false;
                            for (var i = 0; i < event.targets.length; i++) {
                                if (event.targets[i] == player) return false;
                            }
                            return event.player.inRange(player);
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            trigger.targets.add(player);
                            player.draw();
                        },
                    },
                    "radiance_baohui": {
                        trigger: {
                            global: 'useCardAfter',
                        },
                        frequent: true,
                        shaRelated: true,
                        locked: false,
                        filter: function(event, player) {
                            if (!event.cards || event.cards.filterInD('od').length < 1) return false;
                            return get.name(event.card) == 'sha' && get.suit(event.card) == 'club' && event.targets.contains(player);
                        },
                        content: function() {
                            player.gain(trigger.cards.filterInD('od'), 'gain2', 'log');
                        },
                        mod: {
                            cardUsable: function(card, player, num) {
                                if (get.name(card) == 'sha' && get.suit(card) == 'club') return true;
                            },
                            aiOrder: function(player, card, num) {
                                if (get.name(card) == 'sha' && get.suit(card) == 'club') {
                                    return num - 0.1;
                                }
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.name(card) == 'sha') return 0.5;
                                }
                            }
                        },
                    },
                    "radiance_pangran": {
                        enable: 'phaseUse',
                        filter: function(event, player) {
                            return player.countCards('h', lib.skill.radiance_pangran.filterCard) > 0;
                        },
                        filterCard: function(card, player) {
                            return get.name(card) == 'shan';
                        },
                        check: function(card) {
                            return 1;
                        },
                        position: 'h',
                        selectCard: [1, Infinity],
                        debuff: true,
                        locked: true,
                        content: function() {
                            var num = cards.length;
                            player.draw(num);
                        },
                        mod: {
                            cardEnabled: function(card) {
                                if (card.name == 'shan') return false;
                            },
                            aiValue: function(player, card, num) {
                                if (get.name(card) == 'shan') {
                                    return 0.01;
                                }
                            },
                        },
                        action_tag: {
                            negative: 1,
                            overall: -1,
                            draw: 1,
                        },
                        ai: {
                            neg: true,
                            order: 20,
                            result: {
                                player: 1,
                            },
                        },
                    },
                    "radiance_mengdu": {
                        enable: 'phaseUse',
                        usable: 1,
                        filterTarget: function(card, player, target) {
                            return player != target && target.countCards('h') > 0;
                        },
                        content: function() {
                            'step 0'
                            target.showHandcards();
                            'step 1'
                            var sha = target.getCards('h', function(card) {
                                return ['sha', 'shan'].contains(card.name);
                            });
                            event.sha = sha;
                            if (sha.length > 0) {
                                target.chooseBool("弃置手牌中所有的【杀】和【闪】，或者不弃置并失去1点体力").set('ai', function() {
                                    if (_status.event.player.hp == 1 && _status.event.player.countCards('h', function(card) {
                                            return get.tag(card, 'save');
                                        }) < 1 && !_status.event.player.hasSkillTag('save')) {
                                        return true;
                                    }
                                    if (_status.event.player.getDamagedHp() < 2) {
                                        if (lib.watersky.func.radiancePlayerActionTag(_status.event.player, 'demand_sha') > 0) {
                                            return _status.event.cards.length < 2;
                                        }
                                        return _status.event.cards.length < 3;
                                    }
                                    return _status.event.cards.length - player.hp > 2;
                                }).set('cards', sha);
                            } else {
                                event.goto(3);
                            };
                            'step 2'
                            if (result.bool) {
                                target.discard(event.sha, player, 'notBySelf');
                            } else {
                                target.loseHp();
                            };
                            event.finish();
                            'step 3'
                            player.discardPlayerCard(target, 'h', 1, true, 'visible', "弃置" + get.translation(target) + "一张手牌，为基本牌你摸一张牌").set('ai', function(card) {
                                return (get.type(card, get.owner(card)) == 'basic' ? 2 : 1) * get.value(card, get.owner(card), 'raw');
                            });
                            'step 4'
                            if (result.bool) {
                                if (get.type(result.cards[0], target) == 'basic') player.draw();
                            };
                        },
                        ai: {
                            order: 10,
                            result: {
                                target: function(player, target) {
                                    return -1 * target.countCards('h') / Math.pow(Math.max(target.hp, 1), 2);
                                },
                            },
                        },
                    },
                    "radiance_weihao": {
                        mod: {
                            targetInRange: function(card, player, target) {
                                var num = player.getHistory('useCard', function(evt) {
                                    return evt.card.name == 'sha'
                                }).length;
                                if (num == 0 && get.name(card) == 'sha') return true;
                            },
                            selectTarget: function(card, player, range) {
                                var num = player.getHistory('useCard', function(evt) {
                                    return evt.card.name == 'sha'
                                }).length;
                                if (num == 0 && get.name(card) == 'sha') {
                                    range[0] = -1;
                                    range[1] = -1;
                                };
                            },
                            cardUsable: function(card, player, num) {
                                if (card.name == 'sha') return num + 1;
                            },
                        },
                        locked: true,
                        group: ['radiance_weihao_draw', 'radiance_weihao_after'],
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: 'shaHit',
                                },
                                filter: function(event, player) {
                                    var num = player.getHistory('useCard', function(evt) {
                                        return evt.card.name == 'sha'
                                    }).length;
                                    return num == 1;
                                },
                                forced: true,
                                sub: true,
                                content: function() {
                                    player.draw();
                                },
                            },
                            after: {
                                trigger: {
                                    player: ['useCardEnd'],
                                },
                                forced: true,
                                sub: true,
                                filter: function(event, player) {
                                    var used = player.getHistory('useCard', function(evt) {
                                        return evt.card.name == 'sha'
                                    });
                                    return used.length == 1 && used[0] == event;
                                },
                                content: function() {
                                    var bool2 = game.hasPlayer2(function(current) {
                                        return current.getHistory('damage', function(evt) {
                                            return evt.card && evt.card == trigger.card;
                                        }).length > 0;
                                    });
                                    if (bool2) player.loseHp();
                                },
                            },
                        },
                        action_tag: {
                            overall: 1,
                            negative: 1,
                            draw: 1,
                            sha_bonus: 1,
                        },
                        ai: {
                            halfneg: true,
                        },
                    },
                    "radiance_baoyan": {
                        trigger: {
                            source: 'damageBegin1',
                        },
                        filter: function(event, player) {
                            if (player.getHistory('custom', function(evt) {
                                    return evt.radiance_baoyan == event.player;
                                }).length > 0) return false;
                            return event.player.hp < player.hp;
                        },
                        priority: 15,
                        forced: true,
                        content: function() {
                            player.getHistory('custom').push({
                                radiance_baoyan: trigger.player,
                            });
                            player.loseHp(1);
                            trigger.num++
                        },
                        group: 'radiance_baoyan_draw',
                        subfrequent: ['draw'],
                        subSkill: {
                            draw: {
                                trigger: {
                                    source: 'damageSource',
                                },
                                frequent: true,
                                filter: function(event, player) {
                                    return event.num > 1;
                                },
                                content: function() {
                                    player.draw(trigger.num - 1);
                                },
                            },
                        },
                        ai: {
                            threaten: 3,
                        },
                    },
                    "radiance_shihun": {
                        trigger: {
                            global: 'dieAfter',
                        },
                        filter: function(event, player) {
                            if (!player.isDamaged()) return false;
                            return event.source == player || player.storage.radiance_shihun.contains(event.player);
                        },
                        frequent: true,
                        content: function() {
                            player.recover('nocard');
                        },
                        init: function(player) {
                            if (!Array.isArray(player.storage.radiance_shihun)) player.storage.radiance_shihun = [];
                        },
                        global: 'radiance_shihun_mark',
                        group: 'radiance_shihun_draw',
                        subSkill: {
                            draw: {
                                trigger: {
                                    global: 'dieAfter',
                                },
                                filter: function(event, player) {
                                    return !(event.source == player || player.storage.radiance_shihun.contains(event.player));
                                },
                                check: function(event, player) {
                                    return player.isDamaged() && player.maxHp > 2;
                                },
                                prompt2: "减1点体力上限并摸两张牌",
                                content: function() {
                                    'step 0'
                                    player.loseMaxHp();
                                    'step 1'
                                    player.draw(2);
                                },
                            },
                            mark: {
                                trigger: {
                                    source: 'damageSource',
                                },
                                direct: true,
                                locked: true,
                                charlotte: true,
                                silent: true,
                                content: function() {
                                    if (!Array.isArray(player.storage.radiance_shihun)) player.storage.radiance_shihun = [];
                                    player.storage.radiance_shihun.add(trigger.player);
                                },
                            },
                        },
                    },
                    "radiance_pojian": {
                        marktext: "茧",
                        intro: {
                            markcount: 'expansion',
                            mark: function(dialog, storage, player) {
                                var cards = player.getExpansions('radiance_pojian');
                                dialog.addAuto(cards);
                            },
                        },
                        trigger: {
                            player: ['phaseZhunbeiBegin', 'phaseJieshuBegin', 'damageEnd'],
                        },
                        filter: function(event, player, name) {
                            if (name == 'phaseJieshuBegin' && !player.storage.radiance_zaixin) return false;
                            if (name == 'phaseZhunbeiBegin' && player.storage.radiance_zaixin) return false;
                            if (name == 'damageEnd' && event.num < 1) return false;
                            if (!player.isDisabled(1) && (player.getEquip(1) || player.storage.radiance_zaixin)) return true;
                            if (!player.isDisabled(2) && (player.getEquip(2) || player.storage.radiance_zaixin)) return true;
                            if (!player.isDisabled(3) && (player.getEquip(3) || player.storage.radiance_zaixin) && !player.isDisabled(4) && (player.getEquip(4) || player.storage.radiance_zaixin)) return true;
                            if (!player.isDisabled(5) && (player.getEquip(5) || player.storage.radiance_zaixin)) return true;
                            return false;
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var list = [];
                            for (var i = 1; i < 6; i++) {
                                if (i == 4) continue;
                                if (player.isDisabled(i)) continue;
                                if (!player.getEquip(i) && !player.storage.radiance_zaixin) continue;
                                if (i == 3) {
                                    if (player.isDisabled(4)) continue;
                                    if (!player.getEquip(4) && !player.storage.radiance_zaixin) continue;
                                    list.push('equip' + 6);

                                } else {
                                    list.push('equip' + i);
                                }
                            };
                            if (!list.length) {
                                event.finish();
                                return;
                            };
                            list.push('cancel2');
                            var next = player.chooseControl(list);
                            next.set('prompt', "破茧：废除一个装备栏");
                            var aix = function(list) {
                                if (!player.hasSkill('radiance_huangli')) return 'cancel2';
                                var choices = ['equip5', 'equip6', 'equip2', 'equip1'];
                                if (list.contains('equip1') && !player.storage.radiance_zaixin && player.countCards('hs', 'sha') >= 2 && game.hasPlayer(function(target) {
                                        return player.canUse('sha', target) && get.distance(player, target) == 1 && get.effect(target, {
                                            name: 'sha',
                                            isCard: true,
                                        }, player, player) > 0 && get.attitude(player, target) < 0;
                                    })) {
                                    return 'equip1';
                                };
                                if (player.countDisabled() > 4) return 'cancel2';
                                for (var i = 0; i < 5; i++) {
                                    if (list.contains(choices[i])) return choices[i];
                                };
                                return 'cancel2';
                            };
                            next.aix = aix(list);
                            next.ai = function() {
                                return _status.event.aix;
                            };
                            'step 1'
                            if (result.control == 'cancel2') {
                                event.finish();
                                return;
                            };
                            player.logSkill('radiance_pojian');
                            var equip = player.getEquip(result.control);
                            if (result.control == 'equip6') {
                                equip = player.getEquip('equip3');
                                if (equip && !player.storage.radiance_zaixin) {
                                    player.addToExpansion(equip, 'giveAuto', player).gaintag.add('radiance_pojian');
                                };
                                equip = player.getEquip('equip4');
                            };
                            if (equip && !player.storage.radiance_zaixin) {
                                player.addToExpansion(equip, 'giveAuto', player).gaintag.add('radiance_pojian');
                            };
                            'step 2'
                            if (result.control == 'equip6') {
                                player.disableEquip('equip3');
                                player.disableEquip('equip4');
                            } else {
                                player.disableEquip(result.control);
                            }
                        },
                        group: ['radiance_pojian_begin'],
                        subSkill: {
                            begin: {
                                trigger: {
                                    // player: ['enterGame', 'showCharacterAfter'],
                                    global: ['gameDrawAfter', 'newStageLoaded'],
                                },
                                filter: function(event, player, name) {
                                    if (get.mode() === 'txds_plot' && name !== 'newStageLoaded') return false;
                                    return true;
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var list = [1, 2, 3, 4, 5];
                                    var togain = [];
                                    while (list.length > 0) {
                                        var current = list.shift();
                                        var card = get.cardPile(function(card) {
                                            return get.type(card) == 'equip' && get.subtype(card) == 'equip' + current;
                                        });
                                        if (card) togain.push(card);
                                    };
                                    if (togain.length == 0) {
                                        event.finish();
                                    } else {
                                        player.logSkill('radiance_pojian');
                                        for (var i = 0; i < togain.length; i++) {
                                            var card2 = togain[i];
                                            if (player.canEquip(card2)) {
                                                player.equip(card2);
                                            } else {
                                                player.gain(card2, 'gain2');
                                            };
                                        };
                                    };
                                },
                            },
                        },
                    },
                    "radiance_pojianx": {},
                    "radiance_huangli": {
                        trigger: {
                            player: 'phaseDrawBegin1',
                        },
                        filter: function(event, player) {
                            return player.countDisabled() > 0 && !event.numFixed;
                        },
                        forced: true,
                        content: function() {
                            var num = player.countDisabled();
                            if (player.isDisabled(3) || player.isDisabled(4)) num--;
                            trigger.num += num;
                        },
                        mod: {
                            maxHandcard: function(player, num) {
                                if (player.isDisabled(2)) return num + 2;
                            },
                            cardUsable: function(card, player, num) {
                                if (player.isDisabled(1) && card.name == 'sha') return num + 2;
                            },
                            targetEnabled: function(card, player, target, now) {
                                if (target.isDisabled(3) && target.isDisabled(4) && get.type(card) == 'delay') return false;
                            },
                        },
                    },
                    "radiance_zaixin": {
                        enable: 'chooseToUse',
                        unique: true,
                        limited: true,
                        skillAnimation: true,
                        animationColor: 'water',
                        mark: false,
                        init: function(player) {
                            player.storage.radiance_zaixin = false;
                        },
                        filter: function(event, player) {
                            if (player.storage.radiance_zaixin) return false;
                            if (event.type == 'dying') {
                                if (player != event.dying) return false;
                                return true;
                            } else if (event.parent.name == 'phaseUse') {
                                return true;
                            }
                            return false;
                        },
                        content: function() {
                            'step 0'
                            player.awakenSkill('radiance_zaixin');
                            'step 1'
                            player.enableEquip(1);
                            player.enableEquip(2);
                            player.enableEquip(3);
                            player.enableEquip(4);
                            player.enableEquip(5);
                            'step 2'
                            var es = player.getExpansions('radiance_pojian');
                            for (var i = 0; i < es.length; i++) {
                                player.equip(es[i]);
                            };
                            'step 3'
                            player.recover(5 - player.countCards('e'));
                        },
                        ai: {
                            order: 0.5,
                            skillTagFilter: function(player, tag, arg) {
                                if (player != arg || player.storage.radiance_zaixin) return false;
                            },
                            save: true,
                            result: {
                                player: function(player) {
                                    if (player.hp <= 0) return 10;
                                    if (player.hp <= 1 && player.countCards('h') <= 2) return 10;
                                    return 0;
                                }
                            },
                        },
                        derivation: ['radiance_pojianx'],
                    },
                    "radiance_xiaoyue": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        forced: true,
                        content: function() {
                            'step 0'
                            player.draw(3);
                            'step 1'
                            player.turnOver();
                        },
                        group: 'radiance_xiaoyue_turn',
                        subSkill: {
                            turn: {
                                trigger: {
                                    player: 'turnOverAfter',
                                },
                                filter: function(event, player) {
                                    return !player.isTurnedOver() && game.hasPlayer(function(target) {
                                        if (target == player) return false;
                                        return target.isTurnedOver() || target.isLinked();
                                    });
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    player.chooseTarget("啸月：可以令一名横置或翻面的角色摸两张牌或回复1点体力", function(card, player, target) {
                                        if (target == player) return false;
                                        return target.isTurnedOver() || target.isLinked();
                                    }).set('ai', function(target) {
                                        return (get.attitude(_status.event.player, target) - 1) / Math.max(0.5, target.hp);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('radiance_xiaoyue', target);
                                        target.chooseDrawRecover(2, 1);
                                    };
                                },
                                ai: {
                                    expose: 0.2,
                                },
                            },
                        },
                        ai: {
                            halfneg: true,
                        },
                    },
                    "radiance_tianlang": {
                        trigger: {
                            player: 'damageBegin3',
                        },
                        filter: function(event, player) {
                            return player.isTurnedOver() && event.num > 0 && !player.hasSkill('radiance_tianlang_1');
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            var dialog = ui.create.dialog("天狼");
                            dialog.addText("每回合一次，可以弃一张手牌并令受到的伤害+1，然后翻至正面");
                            player.chooseToDiscard(1, 'h', dialog).set('ai', function(card) {
                                var player = _status.event.player;
                                var base = player.hp;
                                if (player.hp <= 2) return -1;
                                if (player.getEquip('baiyin') || player.hasSkillTag('nodamage') || player.hasSkillTag('noextra')) base += 2;
                                if (player.hp <= 4 && !player.canSave(player)) return -1;
                                if (get.tag(card, 'save')) base -= 3;
                                return base - get.useful(card);
                            }).set('logSkill', 'radiance_tianlang');
                            'step 1'
                            if (result.bool) {
                                trigger.num++;
                                player.turnOver(false);
                                player.addTempSkill('radiance_tianlang_1');
                            };
                        },
                        group: 'radiance_tianlang_add',
                        subSkill: {
                            '1': {
                                charlotte: true,
                                locked: true,
                            },
                            '2': {
                                charlotte: true,
                                locked: true,
                            },
                            add: {
                                trigger: {
                                    source: 'damageBegin1',
                                },
                                filter: function(event, player) {
                                    return player.isTurnedOver() && event.num > 0 && event.player != player && !player.hasSkill('radiance_tianlang_2');
                                },
                                direct: true,
                                content: function() {
                                    'step 0'
                                    var dialog = ui.create.dialog("天狼");
                                    dialog.addText("每回合一次，当你武将牌翻面时，可以弃一张手牌令造成的伤害+1");
                                    player.chooseToDiscard(1, 'h', dialog).set('ai', function(card) {
                                        var player = _status.event.player;
                                        var trigger = _status.event.getTrigger();
                                        var target = trigger.player;
                                        if (target.getEquip('baiyin') || target.hasSkillTag('nodamage') || target.hasSkillTag('noextra')) return -1;
                                        if (get.damageEffect(target, player, player, event.nature) > 0 && get.attitude(player, target) < 0) return 5 - get.useful(card);
                                        return -1;
                                    }).set('logSkill', ['radiance_tianlang', trigger.player]);
                                    'step 1'
                                    if (result.bool) {
                                        trigger.num++;
                                        player.addTempSkill('radiance_tianlang_2');
                                    };
                                },
                            },
                        },
                        ai: {
                            maixie: true,
                            maixie_hp: true,
                            skillTagFilter: function(player, tag) {
                                if (tag == 'maixie' || tag == 'maixie_hp') {
                                    if (!player.isTurnedOver()) return false;
                                    var noextra = player.getEquip('baiyin') || player.hasSkillTag('noextra');
                                    if (noextra) return true;
                                    return player.hp > 4 || (player.hp > 2 && player.canSave(player));
                                };
                            },
                            effect: {
                                target: function(card, player, target) {
                                    if (get.tag(card, 'damage')) {
                                        if (!player.isTurnedOver()) return;
                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                        var noextra = target.getEquip('baiyin') || target.hasSkillTag('noextra');
                                        if (noextra) {
                                            if (target.hp > 2) return 0;
                                            return 1 / (1 + target.hp);
                                        };

                                        if (target.hp > 4) return [0.5, 1.5];
                                        if (target.hp > 2 && (player.canSave(target) || target.canSave(target))) return [0.7, 1];
                                    };
                                },
                            },
                        },
                    },
                    "radiance_moju": {
                        trigger: {
                            target: "useCardToTargeted",
                        },
                        filter: function(event, player) {
                            return event.player != player && player.countCards('he', function(card) {
                                return get.type(card) == 'equip' && lib.filter.cardDiscardable(card, player);
                            }) && get.tag(event.card, 'damage');
                        },
                        direct: true,
                        locked: false,
                        content: function() {
                            'step 0'
                            var next = player.chooseToDiscard('he', "殁局：是否弃置一张装备牌令" + get.translation(trigger.card) + "对你无效？", function(card, player) {
                                return get.type(card) == 'equip';
                            }).set('ai', function(card) {
                                var player = _status.event.player;
                                var trigger = _status.event.getTrigger();
                                if (get.effect(player, trigger.card, trigger.player, player) > 0) return -1;
                                if (get.tag(trigger.card, 'loseCard')) return 10 / Math.max(0.5, get.value(card));
                                var bool = game.hasPlayer(function(target) {
                                    return target.hp <= 1 && !target.hasSkillTag('nodamage') && (target == trigger.player || target.countCards('e', function(cardx) {
                                        return get.color(cardx, target) == get.color(card, player);
                                    }) > 0) && get.damageEffect(target, player, player);
                                });
                                if (!player.canRespondTo(trigger, trigger.card)) {
                                    if (player.hp <= 1 && get.tag(trigger.card, 'damage')) return 10 / Math.max(0.5, get.value(card));
                                    if (bool) return 10 / Math.max(0.5, get.value(card));
                                    return 8 - get.value(card);
                                };
                                if (bool || get.type(trigger.card) == 'delay') return 8 - get.value(card);
                                return 0;
                            }).set('logSkill', 'radiance_moju');
                            'step 1'
                            if (result.bool) {
                                trigger.excluded.push(player);
                                player.chooseTarget(1, "是否对使用者或场上区域内有" + get.translation(get.color(result.cards[0])) + "牌的角色造成1点伤害", function(card, player, target) {
                                    if (target == player) return false;
                                    var trigger = _status.event.getTrigger();
                                    return target == trigger.player || target.countCards('e', function(cardx) {
                                        return get.color(cardx, target) == get.color(_status.event.card, player);
                                    }) > 0;
                                }).set('ai', function(target) {
                                    var player = _status.event.player;
                                    if (target.hasSkillTag('nodamage')) return 0;
                                    return get.damageEffect(target, player, player);
                                }).set('card', result.cards[0])
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.targets && result.targets.length) {
                                player.line(result.targets);
                                result.targets[0].damage(1, player, 'nocard');
                            };
                        },
                        mod: {
                            aiValue: function(player, card, num) {
                                if (get.type(card) != 'equip') return;
                                if (player._radiance_moju_value) return;
                                player._radiance_moju_mod = true;
                                var val = Math.max(get.value({
                                    name: 'shan',
                                    isCard: true,
                                }, player, 'raw'), get.value({
                                    name: 'wuxie',
                                    isCard: true,
                                }, player, 'raw') - 1);
                                delete player._radiance_moju_value;
                                return Math.max(num, val + 0.1);
                            },
                            aiUseful: function(player, card, num) {
                                if (get.type(card) != 'equip') return;
                                if (player._radiance_moju_useful) return;
                                player._radiance_moju_mod = true;
                                var val = Math.max(get.useful({
                                    name: 'shan',
                                    isCard: true,
                                }, player), get.useful({
                                    name: 'wuxie',
                                    isCard: true,
                                }, player) - 1);
                                delete player._radiance_moju_useful;
                                return Math.max(num, val + 0.1);
                            },
                            aiOrder: function(player, card, num) {
                                if (get.type(card) == 'equip') {
                                    if (player.getEquip(get.subtype(card)) && !player.needsToDiscard()) {
                                        return 0;
                                    };
                                };
                            },
                        },
                        group: 'radiance_moju_lose',
                        subfrequent: ['lose'],
                        subSkill: {
                            lose: {
                                trigger: {
                                    player: 'loseAfter',
                                },
                                frequent: true,
                                sub: true,
                                filter: function(event, player) {
                                    if (event.getParent(3).name == 'radiance_moju') return false;
                                    return event.es.length > 0;
                                },
                                content: function() {
                                    player.draw(trigger.es.length);
                                },
                            },
                        },
                        ai: {
                            threaten: function(player, target) {
                                if (target.countCards('e') > 0) return 0.8;
                                return 1.2;
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    var es = target.getCards('e');
                                    if (get.tag(card, 'damage')) {
                                        if (es.length == 0) return 1.2;
                                        var color = [];
                                        for (var i = 0; i < es.length; i++) {
                                            color.add(get.color(es[i], target));
                                        };
                                        if (game.hasPlayer(function(current) {
                                                if (current == target) return false;
                                                if (current.hp > 1 || current.hasSkillTag('nodamage')) return false;
                                                return get.damageEffect(current, target, target) > 0;
                                            })) {
                                            return 0;
                                        };
                                    };
                                    if (get.tag(card, 'loseCard')) {
                                        if (es.length > 0) return 1.2;
                                    };
                                },
                            },
                        },
                    },
                    "radiance_tizi": {
                        trigger: {
                            player: "phaseDrawBegin1",
                        },
                        filter: function(event, player) {
                            if (event.numFixed) return false;
                            return game.hasPlayer(function(current) {
                                return current != player && current.countCards('ej');
                            });
                        },
                        check: function(event, player) {
                            return game.hasPlayer(function(current) {
                                if (current == player) return false;
                                return (get.attitude(player, current) < 0 && (current.countGainableCards(player, 'e') > 0 || current.countDiscardableCards(player, 'e') > 0)) ||
                                    (get.attitude(player, current) > 1 && current.countCards('j') > 0);
                            });
                        },
                        getProfit: function(color, player) {
                            var togain = [],
                                todiscard = [];
                            game.filterPlayer(function(current) {
                                if (current == player) return false;
                                var att = get.attitude(player, current);
                                var es = current.getCards('e');
                                for (var i = 0; i < es.length; i++) {
                                    if (att < 0 && get.color(es[i]) == color) todiscard.push(es[i]);
                                    if (att <= 0 && get.color(es[i]) != color) togain.push(es[i]);
                                };
                                if (att <= 0) return false;
                                var js = current.getCards('j');
                                for (var i = 0; i < js.length; i++) {
                                    if (att > 1 && get.color(js[i]) == color) todiscardj.push(js[i]);
                                    if (att > 0 && get.color(js[i]) != color) togain.push(js[i]);
                                };
                                return true;
                            });
                            var gain = function(card) {
                                if (get.position(card) == 'e') return get.equipValue(card, player) + get.equipValue(card, get.owner(card));
                                if (card.name == 'shandian') return 0;
                                return ((get.owner(card) || player).getDamagedHp() + 2) * get.effect((get.owner(card) || player), card, player) * -1 + (player.getDamagedHp() + 2) * player.getUseValue(card);
                            };
                            togain.sort(function(a, b) {
                                return gain(b) - gain(a);
                            });
                            var discard = function(card) {
                                if (get.position(card) == 'e') return get.equipValue(card, get.owner(card));
                                return ((get.owner(card) || player).getDamagedHp() + 2) * get.effect((get.owner(card) || player), card, player) * -1;
                            };
                            todiscard.sort(function(a, b) {
                                return discard(b) - discard(a);
                            });
                            var profit1 = 0,
                                profit2 = 0;
                            var targets = [];
                            if (todiscard.length >= 2) {
                                profit1 += discard(todiscard[0]) + discard(todiscard[1]);
                                targets = [get.owner(todiscard[0]), get.owner(todiscard[1])];
                            } else if (todiscard.length >= 1) {
                                profit1 += discard(todiscard[0]);
                                targets = [get.owner(todiscard[0])];
                            };
                            var target = player;
                            if (togain.length >= 1) {
                                profit2 += gain(togain[0]);
                                target = get.owner(togain[0]);
                            };
                            return [profit1, profit2, targets, [target]];
                        },
                        content: function() {
                            'step 0'
                            trigger.changeToZero();
                            var cards = get.cards(2);
                            event.cards = cards;
                            game.cardsGotoOrdering(cards);
                            player.showCards(cards, '“提子”展示的牌');
                            var dialog = ui.create.dialog("提子：获得一种颜色的牌");
                            var list = ['black', 'red'];
                            if (get.color(cards[0]) == 'red') list = ['red', 'black'];
                            dialog.addSmall(cards);
                            player.chooseControl(dialog, 1, list).set('ai', function(event, player) {
                                var profit = {
                                    black: 0,
                                    red: 0,
                                };
                                for (var k = 0; i < 2; i++) {
                                    var color = _status.event.controls[k];
                                    var val = 0;
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (get.color(event.cards[i], player) == color) val += get.alteredValue(event.cards[i]);
                                    };
                                    var profitx = lib.skill.radiance_tizi.getProfit(color, player);
                                    profit[color] += Math.max(profitx[0], profitx[1]);
                                };
                                if (profit['red'] < profit['black']) return 'black';
                                return 'red';
                            });
                            'step 1'
                            var togain = [];
                            event.type = result.control;
                            for (var i = cards.length - 1; i >= 0; i--) {
                                if (get.color(cards[i]) == event.type) togain.push(cards[i]);
                            };
                            if (togain.length > 0) player.gain(togain, 'draw2');
                            'step 2'
                            var color = event.type;
                            var profitx = lib.skill.radiance_tizi.getProfit(color, player);
                            event.targetsx = profitx[2];
                            var bool = false;
                            if (profitx[1] >= profitx[0]) {
                                bool = true; //将要选择拿牌而非弃牌
                                event.targetsx = profitx[3];
                            };
                            event.bool = bool;
                            'step 3'
                            player.chooseTarget("可以获得场上的非" + get.translation(event.type) + "牌或弃置场上的" + get.translation(event.type) + "牌").set('filterTarget', function(card, player, target) {
                                return target != player && target.countCards('ej') > 0;
                            }).set('ai', function(target) {
                                var player = _status.event.player
                                var att = get.attitude(player, target);
                                var bool1 = target.countCards('e', function(cardx) {
                                    if (_status.event.bool === true) return get.color(cardx, target) != _status.event.getParent().type;
                                    return get.color(cardx, target) == _status.event.getParent().type;
                                }) > 0;
                                var bool2 = target.countCards('j', function(cardx) {
                                    if (_status.event.bool === true) return get.color(cardx, target) != _status.event.getParent().type;
                                    return get.color(cardx, target) == _status.event.getParent().type;
                                }) > 0;
                                if (_status.event.targetsx.contains(target)) {
                                    if (att <= 0 && bool1) return 200;
                                    if (att > 0 && bool2) return 200;
                                };
                                if (att <= 0) {
                                    if (bool1) return att * -10;
                                    if (target.countCards('e') > 0) return att * -5;
                                };
                                if (att > 0) {
                                    if (bool2) return att * 15;
                                    if (target.countCards('j') > 0) return att * 5;
                                };
                                if (att < 0 && target.countCards('e') == 0) return 0;
                                return -att;
                            }).set('targetsx', event.targetsx).set('bool', event.bool);
                            'step 4'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                player.choosePlayerCard('ej', target, true).set('filterButton', function(button) {
                                    return true;
                                }).set('ai', function(button) {
                                    var player = _status.event.player;
                                    var card = button.link;
                                    var target = _status.event.getParent().target;
                                    if (get.attitude(player, target) > 0) {
                                        if (get.position(card) == 'j') {
                                            if (get.color(card, target) == _status.event.getParent().type && _status.event.getParent().bool) return 20;
                                            if (get.color(card, target) != _status.event.getParent().type && !_status.event.getParent().bool) return 20;
                                            return 4;
                                        };
                                    } else {
                                        if (get.position(card) == 'e') {
                                            if (get.color(card, target) == _status.event.getParent().type && _status.event.getParent().bool) return 15;
                                            if (get.color(card, target) != _status.event.getParent().type && !_status.event.getParent().bool) return 15;
                                            return 1;
                                        };
                                    };
                                    return 1;
                                }).set('prompt', "获得一张" + get.translation(event.type == 'red' ? 'black' : 'red') + "牌或弃置一张" + get.translation(event.type) + "牌");
                            } else {
                                event.finish();
                            }
                            'step 5'
                            if (result.bool) {
                                var card = result.cards[0];
                                if (get.color(card) != event.type) {
                                    player.gain([card], 'give', target);
                                    event.finish();
                                } else {
                                    player.discardPlayerCard(target).set('directresult', [card]);
                                };
                            } else {
                                event.finish();
                            };
                            'step 6'
                            player.chooseTarget("是否再弃置场上的一张" + get.translation(event.type) + "牌").set('filterTarget', function(card, player, target) {
                                return target != player && target.countCards('ej', {
                                    color: _status.event.getParent().type,
                                }) > 0;
                            }).set('ai', function(target) {
                                var player = _status.event.player
                                var att = get.attitude(player, target);
                                var es = target.getCards('e', function(cardx) {
                                    return get.color(cardx, target) == _status.event.getParent().type;
                                });
                                var js = target.getCards('j', function(cardx) {
                                    return get.color(cardx, target) == _status.event.getParent().type;
                                });
                                es.sort(function(a, b) {
                                    return get.value(b, target) - get.value(a, target);
                                });
                                js.sort(function(a, b) {
                                    return get.effect(target, a, player, target) - get.effect(target, b, player, target);
                                });
                                if (att > 0 && js.length > 0 && get.effect(target, js[0], player, target) < 0) return 10;
                                if (att < 0 && es.length > 0 && get.value(es[0], target) > 0) return -att;
                                return -1;
                            });
                            'step 7'
                            if (result.bool) {
                                var target = result.targets[0];
                                player.discardPlayerCard(target, 'ej', "弃置一张" + get.translation(event.type) + "牌").set('filterButton', function(button) {
                                    return get.color(button.link, get.owner(button.link)) == _status.event.getParent().type;
                                });
                            };
                        },
                    },


                    // nnull
                    "radiance_caishe": {
                        mark: true,
                        marktext: "设",
                        intro: {
                            name: '裁设',
                            mark: function(dialog, storage, player, skill) {
                                if (player.storage.radiance_caishe && player.storage.radiance_caishe.target) {
                                    dialog.addAuto([player.storage.radiance_caishe.target]);
                                    return get.translation(player.storage.radiance_caishe.current) + "：" + get.translation(player.storage.radiance_caishe.current + '_info');
                                };
                            },
                        },
                        init: function(player, skill) {
                            if (!player.storage.radiance_caishe) {
                                player.storage.radiance_caishe = {
                                    target: null,
                                    current: null,
                                    map: {},
                                };
                            };
                        },
                        skillBlocker_bkup: function(skill, player) {
                            return !player.skills.contains(skill) && !player.hiddenSkills.contains(skill) && player.storage.radiance_caishe.current != skill &&
                                player.storage.radiance_caishe.map[skill] && player.additionalSkills['radiance_caishe'] && player.additionalSkills['radiance_caishe'].contains(skill);
                        },
                        skillBlocker: function(skill, player) {
                            for (var i = 0; i < game.players.length; i++) {
                                var target = game.players[i];
                                if (target.storage.radiance_caishe) {
                                    if (target.storage.radiance_caishe.target == player && target.storage.radiance_caishe.current == skill) return true;
                                };
                            };
                        },
                        trigger: {
                            player: ['phaseBefore', 'phaseAfter'],
                            global: ['gameStart', 'dieAfter']
                        },
                        filter: function(event, player) {
                            return true;
                        },
                        unique: true,
                        fixed: true,
                        superCharlotte: true,
                        charlotte: true,
                        locked: true,
                        direct: true,
                        zero: true,
                        filter: function(event, player) {
                            return true;
                        },
                        content: function() {
                            'step 0'
                            var forced = false;
                            if (!event.excluded) {
                                event.excluded = [];
                            };
                            if (trigger.name == 'die' && !event.excluded.length) {
                                if (trigger.player == player.storage.radiance_caishe.target) forced = true;
                                var source = trigger.player;
                                var todelete = [];
                                for (var skill in player.storage.radiance_caishe.map) {
                                    player.storage.radiance_caishe.map[skill].remove(source);
                                    if (player.storage.radiance_caishe.map[skill].length == 0) todelete.push(skill);
                                };
                                for (var i = 0; i < todelete.length; i++) {
                                    delete player.storage.radiance_caishe.map[todelete[i]];
                                    player.removeSkill(todelete[i]);
                                };
                            };
                            if (!lib.watersky.func.checkPacks(player) && player === game.me) {
                                player.dieAfter = function() {
                                    game.over(false);
                                };
                                player.die();
                                event.finish();
                                return;
                            };
                            player.chooseTarget(get.prompt2('radiance_caishe'), forced, function(card, player, target) {
                                var skills = target.getSkills(true, false, false);
                                var skills2 = target.getOriginalSkills();
                                for (var i = 0; i < skills2.length; i++) {
                                    if (lib.skill[skills2[i]]) {
                                        skills.add(skills2[i]);
                                    };
                                };
                                for (var i = 0; i < skills.length; i++) {
                                    var index = skills[i].indexOf('_');
                                    if (index == 0 || get.translation(skills[i]) == skills[i]) {
                                        skills.splice(i--, 1);
                                    } else {
                                        var info = get.info(skills[i]);
                                        if (info.debuff || info.charlotte || player.hasSkill(skills[i]) || info.zhuSkill || info.juexingji || info.dutySkill) {
                                            skills.splice(i--, 1);
                                        };
                                    };
                                };
                                return target != player && skills.length > 0;
                            }).set('ai', function(target) {
                                if (get.attitude(_status.event.player, target) > 1 && _status.event.triggername != 'phaseBefore') return 0.001;
                                var skills = target.getSkills(true, false, false);
                                var skills2 = target.getOriginalSkills();
                                for (var i = 0; i < skills2.length; i++) {
                                    if (lib.skill[skills2[i]]) {
                                        skills.add(skills2[i]);
                                    }
                                }
                                for (var i = 0; i < skills.length; i++) {
                                    var index = skills[i].indexOf('_');
                                    if (index == 0 || get.translation(skills[i]) == skills[i]) {
                                        skills.splice(i--, 1);
                                    } else {
                                        var info = get.info(skills[i]);
                                        if (info.debuff || info.charlotte || player.hasSkill(skills[i]) || info.zhuSkill || info.juexingji || info.dutySkill) {
                                            skills.splice(i--, 1);
                                        }
                                    }
                                }
                                var max = 0;
                                var condition = 'out';
                                if (_status.event.triggername == 'phaseBefore') {
                                    condition = 'in';
                                }
                                for (var i = 0; i < skills.length; i++) {
                                    var rank = get.skillRank(skills[i], condition);
                                    if (typeof rank == 'number') max = Math.max(rank, max);
                                }
                                return (Math.abs(get.attitude(_status.event.player, target)) * max + max);
                            }).set('triggername', trigger.name);
                            'step 1'
                            if (result.bool) {
                                event.had = true;
                                var target = result.targets[0];
                                event.target = target;

                                event.skills = target.getSkills(true, false, false);
                                var skills2 = target.getOriginalSkills();
                                for (var i = 0; i < skills2.length; i++) {
                                    if (lib.skill[skills2[i]]) {
                                        event.skills.add(skills2[i]);
                                    };
                                };

                                for (var i = 0; i < event.skills.length; i++) {
                                    var index = event.skills[i].indexOf('_');
                                    if (index == 0 || get.translation(event.skills[i]) == event.skills[i]) {
                                        event.skills.splice(i--, 1);
                                    } else {
                                        var info = get.info(event.skills[i]);
                                        if (!info || info.charlotte || info.debuff || info.zhuSkill || info.juexingji || info.dutySkill) {
                                            event.skills.splice(i--, 1);
                                        }
                                    }
                                }
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (event.skills.length < 1) {
                                ui.create.dialog('无可获得技能');
                                game.delay(2);
                                event.excluded.push(target);
                                event.goto(0);
                            };
                            'step 3'
                            event.videoId = lib.status.videoId++;
                            var func = function(id, list) {
                                var choiceList = ui.create.dialog('选择任意一个技能并获得，或点取消返回目标选择');
                                choiceList.videoId = id;
                                for (var i = 0; i < list.length; i++) {
                                    var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                    if (player.hasSkill(list[i])) str += "<span style='opacity:0.5'>";
                                    str += get.translation(list[i])
                                    // str += "（" + list[i] + ((lib.skill[list[i]] && lib.skill[list[i]].charlotte) ? "，为技能后续效果标记）" : "）");
                                    if (player.hasSkill(list[i])) str += "<span>";
                                    str += '</div>';
                                    var next = choiceList.add(str);
                                    next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                    next.firstChild.link = list[i];
                                    for (var j in lib.element.button) {
                                        next[j] = lib.element.button[i];
                                    };
                                    choiceList.buttons.add(next.firstChild);
                                };
                                return choiceList;
                            };
                            event.dialog = func(event.videoId, event.skills);
                            if (player != game.me || _status.auto) {
                                event.dialog.style.display = 'none';
                            };
                            var next = player.chooseButton();
                            next.set('filterButton', function(button) {
                                var player = _status.event.player;
                                return !player.hasSkill(button.link);
                            });
                            next.set('dialog', event.videoId);
                            next.set('selectButton', 1);
                            next.set('ai', function(button) {
                                var player = _status.event.player;
                                var skill = button.link;
                                var info = lib.skill[skill];
                                if (!info) return -1;
                                if (!lib.translate[skill + '_info']) return -1;
                                if (info.charlotte) return -1;

                                var length = lib.translate[skill + '_info'].length;
                                var condition = 'out';
                                if (_status.event.triggername == 'phaseBefore') {
                                    condition = 'in';
                                };
                                var rank = get.skillRank(skill, condition);
                                if (rank) {
                                    if (info.limited && !player.awakenedSkills.contains(skill) && condition == 'in') return rank *= 3;
                                    return rank * Math.sqrt(length) / 5;
                                };
                                return Math.floor(Math.random() * Math.sqrt(length) / 4);
                            });
                            next.set('skills', event.skills);
                            next.set('triggername', trigger.name);
                            'step 4'
                            event.dialog.close();
                            if (result.bool) {
                                var skill = result.links[0];
                                player.storage.radiance_caishe.target = target;
                                player.storage.radiance_caishe.current = skill;
                                if (!player.storage.radiance_caishe.map[skill]) {
                                    player.storage.radiance_caishe.map[skill] = [target];
                                } else {
                                    player.storage.radiance_caishe.map[skill].add(target);
                                };
                                player.logSkill('radiance_caishe', target);
                                player.line(target, 'water');
                                game.log(player, '获得了技能', '“', skill, '”');
                                var list = Object.keys(player.storage.radiance_caishe.map);
                                list.remove(skill);
                                list = [skill].concat(list);
                                player.addSkill(skill, false, false, true);
                                player.additionalSkills['radiance_caishe'] = [skill]; //list;
                                // player.addAdditionalSkill('radiance_caishe', list);
                                if (!(target.storage.skill_blocker && target.storage.skill_blocker.contains('radiance_caishe'))) target.addSkillBlocker('radiance_caishe');
                                if (!target.isUnknown(player)) player.addExpose(0.2);
                            } else {
                                event.goto(0);
                            };
                        },
                        ai: {
                            threaten: 2,
                        },
                    },
                    "radiance_caishe_disable": {
                        skillBlocker: function(skill, player) {
                            for (var i = 0; i < game.players.length; i++) {
                                var target = game.players[i];
                                if (target.storage.radiance_caishe) {
                                    if (target.storage.radiance_caishe.target == player && target.storage.radiance_caishe.current == skill) return true;
                                };
                            };
                        },
                        init: function(player, skill) {
                            // player.removeSkill(player.storage.radiance_caishe_skill);
                            player.disableSkill(skill, player.storage.radiance_caishe_skill);
                        },
                        onremove: function(player, skill) {
                            // player.addSkill(player.storage.radiance_caishe_skill);
                            player.enableSkill(skill)
                        },
                        mark: true,
                        marktext: "裁",
                        intro: {
                            content: function(storage, player, skill) {
                                return '失去了以下技能：' + get.translation(player.storage.radiance_caishe_skill);

                                var list = [];
                                for (var i in player.disabledSkills) {
                                    if (player.disabledSkills[i].contains(skill)) list.push(i);
                                };
                                if (list.length) {
                                    var str = '失效技能：';
                                    for (var i = 0; i < list.length; i++) {
                                        if (lib.translate[list[i] + '_info']) str += get.translation(list[i]) + '、';
                                    };
                                    return str.slice(0, str.length - 1);
                                };
                            },
                        },
                        trigger: {
                            global: 'dieAfter'
                        },
                        charlotte: true,
                        forced: true,
                        silent: true,
                        popup: false,
                        forceDie: true,
                        filter: function(event, player) {
                            return (player.storage.radiance_caishe_source == event.player);
                        },
                        content: function() {
                            player.removeSkill('radiance_caishe_disable');
                        },
                    },
                    "radiance_jixing": {
                        trigger: {
                            player: ["damageBefore", "turnOverBefore"]
                        },
                        mark: true,
                        marktext: "星",
                        intro: {
                            mark: function(dialog, content, player) {
                                if (player != game.me) return '观看牌堆顶七张牌';
                                if (get.itemtype(_status.pileTop) != 'card') return '牌堆顶无牌';

                                var cards = [];
                                for (var i = 0; i < Math.min(7, ui.cardPile.childNodes.length); i++) {
                                    var currentcard = ui.cardPile.childNodes[i];
                                    currentcard.vanishtag.length = 0;
                                    if (get.info(currentcard).vanish || currentcard.storage.vanish) {
                                        currentcard.remove();
                                        continue;
                                    }
                                    cards.push(currentcard);
                                }
                                dialog.add(cards);
                            },
                        },
                        firstDo: true,
                        forced: true,
                        fixed: true,
                        superCharlotte: true,
                        charlotte: true,
                        zero: true,
                        filter: function(event, player) {
                            if (event.name == 'turnOver') {
                                return !player.isTurnedOver()
                            } else if (event.name != 'damage') return true;
                            return (!event.card || !event.cards || event.cards.length != 1 || !lib.watersky.func.isSameCard(event.card, event.cards[0]) || !event.card.isCard || event.nocard || event.skill);
                        },
                        content: function() {
                            trigger.cancel();
                        },
                        ai: {
                            nodamage: true,
                            noturn: true,
                            nofire: true,
                            nothunder: true,
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage') && !card.isCard) return [0, 0];
                                }
                            },
                        },
                    },
                    "radiance_shenyi": {
                        trigger: {
                            player: 'phaseBegin',
                        },
                        filter: function(event, player) {
                            return true;
                            return game.hasPlayer(function(target) {
                                return !target.isMaxHp(true) || target.isDamaged();
                            });
                        },
                        direct: true,
                        content: function() {
                            'step 0'
                            player.chooseTarget(1, get.prompt2('radiance_shenyi'), function(card, player, target) {
                                return true;
                            }).set('ai', function(target) {
                                var player = _status.event.player;
                                var current = player.storage.radiance_jiyuan_current || player;
                                var total = game.countPlayer();
                                var friends = player.getFriends().length;
                                var difference = target.hp - Math.max(1, player.hp);
                                var att = get.attitude(player, target);
                                if (att > 1) {
                                    if (difference >= 0) {
                                        if (target == current.next && !target.needsToDiscard(difference - 1)) return difference * att;
                                        return -1;
                                    }
                                    if (['zhu', 'bZhu', 'rZhu'].contains(target.identity)) return -10 * difference;
                                    return -att * difference;
                                } else if (att < 0) {
                                    if (difference <= 0 || !player.inRange(target)) return -1;
                                    var dis = get.distance(current, target, 'absolute');
                                    if (player.hp > 1) {
                                        if (dis <= friends) return -1;
                                        if (difference > 1 && player.hp > 2) return -1;
                                        return Math.sqrt(dis) * -att;
                                    };
                                    return -att * dis * get.threaten(target, player);
                                };
                            });
                            'step 1'
                            if (result.bool) {
                                var target = result.targets[0];
                                event.target = target;
                                var list = ["变为1血", "变为与你相同", "变为满血", 'cancel2'];
                                var choiceList = ["体力值变为1，回合结束时变为当前体力值", "体力值变为与你相同，其下个回合结束时变为当前体力值", "体力值变为与其体力上限相同，其下个回合结束时将体力值变为一半"];
                                player.chooseControl(list).set('ai', function(event, player) {
                                    return 0;
                                }).set('prompt', "将" + get.translation(target) + "的体力值变化并执行后续效果（点取消返回目标选择）").set('choiceList', choiceList);
                            } else {
                                event.finish();
                            };
                            'step 2'
                            if (result.control == "变为1血") {
                                player.logSkill('radiance_shenyi', target);
                                player.line(target, 'red');
                                player.storage.radiance_shenyi_af = target;
                                player.addTempSkill('radiance_shenyi_af');

                                target.storage.radiance_shenyi_1 = target.hp;
                                target.addTempSkill('radiance_shenyi_1');
                                if (target == _status.currentPhase) target.removeSkill('radiance_shenyi_2');
                                if (target == _status.currentPhase) target.removeSkill('radiance_shenyi_3');

                                target.hp = 1;
                                target.update();
                            } else if (result.control == "变为与你相同") {
                                player.logSkill('radiance_shenyi', target);
                                player.line(target, 'blue');
                                player.storage.radiance_shenyi_af = target;
                                player.addTempSkill('radiance_shenyi_af');

                                target.storage.radiance_shenyi_2 = target.hp;
                                if (target == _status.currentPhase) target.removeSkill('radiance_shenyi_1');
                                target.addTempSkill('radiance_shenyi_2', {
                                    player: 'phaseAfter',
                                });
                                target.removeSkill('radiance_shenyi_3');

                                target.hp = Math.min(player.hp, target.maxHp);
                                target.update();
                            } else if (result.control == "变为满血") {
                                player.logSkill('radiance_shenyi', target);
                                player.line(target, 'green');
                                player.storage.radiance_shenyi_af = target;
                                player.addTempSkill('radiance_shenyi_af');

                                if (target == _status.currentPhase) target.removeSkill('radiance_shenyi_1');
                                target.removeSkill('radiance_shenyi_2');
                                target.addTempSkill('radiance_shenyi_3', {
                                    player: 'phaseAfter',
                                });
                                target.hp = target.maxHp;
                                target.update();
                            } else {
                                event.goto(0);
                            };
                        },
                        ai: {
                            expose: 0.3,
                            threaten: 1.3,
                        },
                    },
                    "radiance_shenyi_af": {
                        charlotte: true,
                        locked: true,
                        mod: {
                            targetInRange: function(card, player, target) {
                                if (target == player.storage.radiance_shenyi_af) return true;
                            },
                        },
                        onremove: function(player, skill) {
                            delete player.storage.radiance_shenyi_af;
                        },
                    },
                    "radiance_shenyi_1": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        marktext: "意",
                        intro: {
                            mark: function(dialog, content, player) {
                                return "当前回合结束时体力值变为#";
                            },
                        },
                        onremove: function(player, skill) {
                            if (_status.event.name != 'radiance_shenyi') {
                                player.hp = player.storage.radiance_shenyi_1;
                                player.update();
                            }
                            delete player.storage.radiance_shenyi_1;
                        },
                    },
                    "radiance_shenyi_2": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        marktext: "意",
                        intro: {
                            mark: function(dialog, content, player) {
                                return "下次回合结束时体力值变为#";
                            },
                        },
                        ai: {
                            effect: {
                                target: function(card, player, target, current) {
                                    if (get.tag(card, 'damage')) {
                                        if (target.hp > target.storage.radiance_shenyi_1) return 0.4;
                                        if (target.hp <= 1) return 1.5;
                                        return;
                                    };
                                    if (get.tag(card, 'recover')) {
                                        if (target.hp >= target.storage.radiance_shenyi_1) return 0.4;
                                    };
                                },
                            },
                        },
                        onremove: function(player, skill) {
                            if (_status.event.name != 'radiance_shenyi') {
                                player.hp = player.storage.radiance_shenyi_2;
                                player.update();
                            };
                            delete player.storage.radiance_shenyi_2;
                        },
                    },
                    "radiance_shenyi_3": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        marktext: "意",
                        intro: {
                            mark: function(dialog, content, player) {
                                return "下次回合结束时体力值变为一半";
                            },
                        },
                        onremove: function(player, skill) {
                            if (_status.event.name != 'radiance_shenyi') {
                                player.hp = Math.ceil(player.hp / 2);
                                player.update();
                            };
                        },
                    },
                    "radiance_jiyuan": {
                        trigger: {
                            player: 'phaseEnd',
                        },
                        filter: function(event, player, name) {
                            if (event.skill == 'radiance_jiyuan') return false;
                            return player.countMark('radiance_jiyuan') >= 4;
                        },
                        intro: {
                            mark: function(dialog, content, player) {
                                return "摸牌阶段额外摸" + get.cnNumber(Math.ceil(player.countMark('radiance_jiyuan') / 2)) + "张牌";
                            },
                        },
                        forced: true,
                        content: function() {
                            player.removeMark('radiance_jiyuan', 4);
                            var next = player.insertPhase('radiance_jiyuan', false);
                        },
                        group: ['radiance_jiyuan_add', 'radiance_jiyuan_draw'],
                        subSkill: {
                            add: {
                                trigger: {
                                    global: ['roundStart', 'dyingBefore', 'changeHp'],
                                },
                                forced: true,
                                popup: false,
                                silent: true,
                                filter: function(event, player, name) {
                                    if (player.countMark('radiance_jiyuan') >= 4) return false;
                                    if (typeof event.num == 'number') return Math.abs(event.num) > 1;
                                    return true;
                                },
                                content: function() {
                                    player.addMark('radiance_jiyuan');
                                },
                            },
                            draw: {
                                trigger: {
                                    player: "phaseDrawBegin1",
                                },
                                forced: true,
                                filter: function(event, player) {
                                    return !event.numFixed && player.countMark('radiance_jiyuan') > 0;
                                },
                                content: function() {
                                    trigger.num += Math.ceil(player.countMark('radiance_jiyuan') / 2);
                                },
                            },
                        },
                    },
                    "radiance_mengmei": {
                        trigger: {
                            global: "gainEnd",
                        },
                        filter: function(event, player) {
                            if (event.player == player || player.storage.radiance_mengmei.contains(event.player)) return false;
                            return !(event.getParent().name == 'draw' && event.getParent(2).name == 'phaseDraw') && event.player.countCards('h') > player.countCards('h') && event.player.hp > player.hp;
                        },
                        logTarget: "player",
                        check: function(event, player) {
                            return get.attitude(player, event.player) < 0;
                        },
                        content: function() {
                            'step 0'
                            player.storage.radiance_mengmei.push(trigger.player);
                            player.markSkill('radiance_mengmei');
                            trigger.player.chooseCard('h', 1, true, "将一张手牌交给" + get.translation(player)).set('ai', function(card) {
                                return 10 - get.value(card);
                            });
                            'step 1'
                            if (result.bool) {
                                trigger.player.give(result.cards, player, false);
                            };
                        },
                        ai: {
                            threaten: 0.6,
                            expose: 0.5,
                        },
                        marktext: "魅",
                        intro: {
                            content: 'players',
                        },
                        init: function(player) {
                            if (!player.storage.radiance_mengmei) player.storage.radiance_mengmei = [];
                        },
                        global: 'radiance_mengmei_reset',
                        subSkill: {
                            reset: {
                                trigger: {
                                    global: 'roundStart',
                                },
                                forced: true,
                                silent: true,
                                charlotte: true,
                                popup: false,
                                sub: true,
                                filter: function(event, player) {
                                    return player.storage.radiance_mengmei;
                                },
                                content: function() {
                                    player.storage.radiance_mengmei.length = 0;
                                    player.unmarkSkill('radiance_mengmei');
                                },
                            },
                        },
                        action_tag: {
                            overall: 1.5,
                            discard: 1,
                        }
                    },
                    "radiance_yekong": {
                        trigger: {
                            player: ['damageEnd', 'loseHpEnd', 'phaseZhunbeiBegin'],
                        },
                        filter: function(event, player) {
                            if (event.name == 'phaseZhunbei') return true;
                            return event.num > 0;
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            event.count = 1;
                            'step 1'
                            event.count--;
                            player.draw(3);
                            'step 2'
                            var next = player.chooseToMove("夜空：将至少两张牌分别置于牌堆顶、牌堆底或弃置", true);
                            var next2 = _status.currentPhase.next;
                            if (event.triggername == 'phaseZhunbeiBegin') {
                                next2 = player;
                            } else {
                                var ongoing = true;
                                while (next2 && next2 != _status.currentPhase && ongoing) {
                                    if (!next2.isTurnedOver()) {
                                        ongoing = false;
                                    } else {
                                        next2 = next2.next;
                                    };
                                };
                                if (!next2) next2 = _status.currentPhase.next;
                            };
                            var hes = player.getCards('he');
                            next.set('list', [
                                ["你的牌", hes],
                                ["牌堆顶", []],
                                ["牌堆底", []],
                                ["弃置", []],
                            ]);
                            next.set('next2', next2);
                            next.set('filterMove', function(from, to, moved) {
                                return true;
                            });
                            next.set('filterOk', function(moved) {
                                return moved[0].length == 0 || moved[1].length + moved[2].length + moved[3].length >= 2;
                            });
                            next.processAI = function(list) {
                                var cards = list[0][1],
                                    player = _status.event.player,
                                    next2 = _status.event.next2;
                                var top = [];
                                var judges = next2.getCards('j').reverse();
                                var att_cur = get.attitude(player, next2) > 0 ? 1 : -1;
                                var stopped = false;
                                if (!next2.hasWuxie() && !next2.hasActionTag('phaseZhunbeiDeck', null, 'in')) {
                                    for (var i = 0; i < judges.length; i++) {
                                        var judge = get.judge(judges[i]);
                                        var match = cards.filter(card => judge(card) * att_cur > 0);
                                        if (match.length == 0) {
                                            stopped = true;
                                            break;
                                        } else {
                                            match.sort(function(a, b) {
                                                return get.alteredValue(a, player, 'he', false) - get.alteredValue(b, player, 'he', false);
                                            });
                                            top.unshift(match.shift());
                                        };
                                    };
                                };
                                cards.sort(function(a, b) {
                                    return get.alteredValue(a, player) - get.alteredValue(b, player);
                                });
                                var todiscard = [];
                                var bottom = [];
                                while (cards.length > 0 && todiscard.length + bottom.length + top.length < 2) {
                                    var card = cards.shift();
                                    if (game.hasPlayer(function(current) {
                                            if (get.attitude(player, current) >= 0) return false;
                                            return current.hasActionTag('garbageReuse', card, true);
                                        })) {
                                        bottom.push(card);
                                    } else {
                                        todiscard.push(card);
                                    };
                                };
                                return [cards, top, bottom, todiscard];
                            };
                            'step 3'
                            var top = result.moved[1];
                            event.logged = false;
                            if (top.length > 0) {
                                game.log(player, "将" + get.cnNumber(top.length) + "张牌置于牌堆顶");
                                player.lose(top, ui.cardPile, 'insert');
                                game.broadcastAll(function(player) {
                                    var cardx = ui.create.card();
                                    cardx.classList.add('infohidden');
                                    cardx.classList.add('infoflip');
                                    player.$throw(cardx, 1000, 'nobroadcast');
                                }, player);
                                event.logged = true;
                            };
                            'step 4'
                            var bottom = result.moved[2];
                            if (bottom.length > 0) {
                                game.log(player, "将" + get.cnNumber(bottom.length) + "张牌置于牌堆底");
                                player.lose(bottom, ui.cardPile);
                                if (!event.logged) {
                                    game.broadcastAll(function(player) {
                                        var cardx = ui.create.card();
                                        cardx.classList.add('infohidden');
                                        cardx.classList.add('infoflip');
                                        player.$throw(cardx, 1000, 'nobroadcast');
                                    }, player);
                                };
                            };
                            'step 5'
                            var todiscard = result.moved[3];
                            if (todiscard.length > 0) player.discard(todiscard);
                            'step 6'
                            game.updateRoundNumber();
                            game.delayx();
                            if (event.count > 0) event.goto(1);
                        },
                        action_tag: {
                            overall: 3.6,
                            loseHp_defend: 1,
                            draw: 1,
                            rejudge: 0.4
                        },
                        ai: {
                            threaten: 0.8,
                        },
                    },
                    "radiance_weiyu": {
                        trigger: {
                            player: 'phaseZhunbeiBegin',
                        },
                        frequent: true,
                        content: function() {
                            'step 0'
                            player.judge(function(card) {
                                return 0;
                            });
                            'step 1'
                            event.suit = result.suit;
                            player.judge(function(card) {
                                return 0;
                                if (_status.event.getParent().suit == 'club' && get.suit(card, _status.event.player) == 'club') return -1;
                            });
                            'step 2'
                            event.num = 1;
                            var list = [];
                            if (event.suit == 'club' && result.suit == 'club') {
                                list = ["造成伤害", "封印牌技", "摸牌"];
                            } else if (event.suit == 'club' || result.suit == 'club') {
                                event.num = 3;
                            };
                            switch (result.suit) {
                                case 'spade':
                                    list.push("造成伤害");
                                    break;
                                case 'heart':
                                    list.push("封印牌技");
                                    break;
                                case 'diamond':
                                    list.push("摸牌");
                                    break;
                                default:
                                    break;
                            };
                            switch (event.suit) {
                                case 'spade':
                                    list.push("造成伤害");
                                    break;
                                case 'heart':
                                    list.push("封印牌技");
                                    break;
                                case 'diamond':
                                    list.push("摸牌");
                                    break;
                                default:
                                    break;
                            };
                            event.list = list;
                            'step 3'
                            var list = event.list.slice(0);
                            switch (event.list.length) {
                                case 0:
                                    event.finish();
                                    return;
                                case 1:
                                    event._result = {
                                        control: event.list[0],
                                    };
                                    break;
                                default:
                                    if (list[0] == list[1]) {
                                        event._result = {
                                            control: event.list[0],
                                        };
                                    } else {
                                        var map = {
                                            "造成伤害": "弃置一张对一名其他角色造成1点伤害",
                                            "封印牌技": "令一名其他角色本回合不能使用打出牌且技能失效",
                                            "摸牌": "摸一张牌",
                                        };
                                        var choiceList = [];
                                        for (var i = 0; i < list.length; i++) {
                                            choiceList.push(map[list[i]]);
                                        };
                                        player.chooseControl(list).set('choiceList', choiceList).set('ai', function(event, player) {
                                            if (_status.event.controls.contains("封印牌技")) return "封印牌技";
                                            if (_status.event.controls.contains("摸牌")) return "摸牌";
                                            return 0;
                                        }).set('prompt', "选择要先执行的一项");
                                    };
                            };
                            'step 4'
                            event.list.remove(result.control);
                            if (result.control == "摸牌") {
                                player.draw(event.num);
                                event.goto(3);
                            } else if (result.control == "封印牌技") {
                                event.type = true;
                                player.chooseTarget([1, num], "令至多" + get.cnNumber(num) + "名其他角色本回合不能使用或打出牌且技能失效", function(card, player, target) {
                                    return true;
                                }).set('ai', function(target) {
                                    var player = _status.event.player;
                                    var base = -1 / Math.sqrt(target.countCards('hs') + 1);
                                    if (target.hasSkillTag('forbid_card')) base = -0.1;
                                    if (player.inRange(target)) base *= 3;
                                    if (target.hasActionTag('tranformCard', 'hesx', 'out') || target.hasActionTag('virtualCard', null, 'out')) base *= 2;
                                    return base * get.attitude(player, target);
                                });
                            } else {
                                event.type = false;
                                player.chooseCardTarget({
                                    filterCard: function(card, player) {
                                        return true;
                                    },
                                    filterTarget: function(card, player, target) {
                                        return target != player;
                                    },
                                    num: num,
                                    selectCard: [1, num],
                                    selectTarget: function() {
                                        return ui.selected.cards.length;
                                    },
                                    position: 'he',
                                    ai1: function(card) {
                                        var player = _status.event.player;
                                        var targets = game.filterPlayer(function(target) {
                                            return get.damageEffect(target, player, player) > 1;
                                        });
                                        targets.sort(function(a, b) {
                                            return get.damageEffect(b, player, player) - get.damageEffect(a, player, player);
                                        });
                                        var num = _status.event.num;
                                        if (targets.length >= num) targets = targets.slice(0, num);
                                        if (ui.selected.cards.length >= targets.length) return -1;
                                        targets.reverse();
                                        var target = targets[ui.selected.cards.length];
                                        return get.damageEffect(target, player, player) + 1 - player.getUseValue(card);
                                    },
                                    ai2: function(target) {
                                        return get.damageEffect(target, _status.event.player, _status.event.player);
                                    },
                                    prompt: "弃置至多" + get.cnNumber(num) + "张牌并对等量角色造成1点伤害",
                                });
                            };
                            'step 5'
                            if (result.bool && result.targets.length) {
                                if (result.cards && result.cards.length) {
                                    player.discard(result.cards);
                                };
                                game.log(player, "选择", event.type ? "令" : "对", result.targets, event.type ? "不能用牌和技能" : "造成伤害");
                                player.line(result.targets, event.type ? 'water' : 'fire');
                                event.targets = result.targets.slice(0);
                                event.targets.sort(lib.sort.seat);
                            } else {
                                event.goto(3);
                            };
                            'step 6'
                            var target = event.targets.shift();
                            if (event.type) {
                                target.addTempSkill('radiance_weiyu_block');
                            } else {
                                target.damage(1, 'nocard', player);
                            };
                            if (event.targets.length > 0) {
                                event.redo();
                            } else {
                                event.goto(3);
                            };
                        },
                    },
                    "radiance_weiyu_block": {
                        charlotte: true,
                        locked: true,
                        mark: true,
                        debuff: true,
                        marktext: "未",
                        init: function(player, skill) {
                            player.addSkillBlocker(skill);
                        },
                        onremove: function(player, skill) {
                            player.removeSkillBlocker(skill);
                        },
                        skillBlocker: function(skill, player) {
                            return !lib.skill[skill].charlotte;
                        },
                        mod: {
                            cardEnabled2: function(card) {
                                return false;
                            },
                        },
                        intro: {
                            content: "不能使用或打出牌且全部技能失效",
                        },
                        ai: {
                            neg: true,
                            forbid_card: true,
                            threaten: 8,
                        },
                    },
                    "radiance_yueqian": {
                        trigger: {
                            target: 'useCardToTarget',
                        },
                        filter: function(event, player) {
                            return event.player != player && _status.currentPhase != player && event.player.inRange(player);
                        },
                        check: function(event, player) {
                            if (get.effect(player, event.card, event.player, player) >= 0) return false;
                            if (get.attitude(player, event.player) > 1) return true;
                            if (!event.player.countCards('hs', function(card) {
                                    return event.player.canUse(card, player) && get.effect_use(player, event.card, event.player, event.player) > 1;
                                })) return true;
                            if (!get.tag(event.card, 'damage')) return false;
                            if (player.canRespondTo(event, event.card)) return false;
                            var num = 0;
                            if (player.hasWuxie()) num++;
                            if (player.hasShan()) num++;
                            if (player.canSave(player)) num++;
                            if (player.hp > 2) num++;
                            if (player.canSave(player)) num++;
                            if (player.hp <= 1) num -= 3;
                            if (player.getEquip('equip2')) num += 0.5;
                            if (player.hasSha()) num += 0.5;
                            return num < 2;
                        },
                        usable: 1,
                        content: function() {
                            trigger.getParent().targets.remove(player);
                            trigger.getParent().triggeredTargets2.remove(player);
                            trigger.getParent().excluded.add(player);
                            player.addTempSkill('radiance_forbid');
                        },
                        ai: {
                            threaten: function(viewer, player) {
                                if (!player.hasSkill('radiance_forbid')) return 0.7;
                                return 1.3;
                            },
                            effect: {
                                target: function(card, player, target, current) {
                                    if (player == target || _status.currentPhase == target) return;
                                    if (current < 0 && !get.type(card, player) == 'delay') {
                                        if (target.getStat('skill').radiance_yueqian > 0) return [1.2, -2, 1, 0];
                                        var cards = player.getCards('hs', function(cardx) {
                                            if (cardx == cardx) return false;
                                            return player.canUse(cardx, target);
                                        });
                                        if (cards.length < 1) return 'zerotarget';
                                        if (cards.length > 2) return 1;
                                        return 0.7;
                                    };
                                },
                            },
                        },
                    },
                },
                translate: {
                    "radiance_zhu": "主公",
                    "radiance_zhu_info": "<span class='firetext'>主公增强：</span>游戏开始时，你加X点体力上限；摸牌阶段，若有忠臣存活，你额外摸一张牌。你不会成为【乐不思蜀】的目标。当一名忠臣死亡后，若你的体力上限大于1，你减1点体力上限。（X为存活忠臣数）",
                    "radiance_losehp1": "失去体力1",
                    "radiance_losehp1_info": "当你成为其他角色的基本牌或非延时类的锦囊牌的目标后，你可以失去1点体力，令该牌对你无效。",
                    "radiance_losehp2": "失去体力2",
                    "radiance_losehp2_info": "当你成为一张其他角色的牌的目标时，你可以失去1点体力，然后取消此目标。",
                    "radiance_losehp3": "失去体力3",
                    "radiance_losehp3_info": "当你受到伤害时，你可以失去1点体力，然后取消之。",
                    "radiance_forbid": "禁牌",
                    "radiance_noequip2": "无视防具",
                    "radiance_wudi": "伤害无效",
                    "radiance_used": "已用",

                    "radiance_bofa": "博法",
                    "radiance_bofa_info": "你的准备阶段，当你受到伤害或失去体力后，你可以将牌堆顶一张牌置于你的武将牌上(至多五张)，然后你可以用任意数量的手牌与之交换。当其他角色使用牌时，你可以将一张与该牌花色相同的“博法”牌置于弃牌堆，然后取消此牌。",
                    "radiance_bofa_gain": "博法",
                    "radiance_xuehui": "学会",
                    "radiance_xuehui_info": "主公技，每回合限一次，当你一名与你势力相同的其他角色失去体力后，其可以令你摸一张牌。",
                    "radiance_tianyi": "天仪",
                    "radiance_tianyi_info": "转换技，每回合限一次，你可以将：·阴：两张牌；·阳：一张非基本牌当作任意基本或非延时类锦囊牌使用或打出。",
                    "radiance_pofa": "破法",
                    "radiance_pofa_info": "当你成为其他角色锦囊牌的目标时，你可以失去1点体力并取消之。若如此做，直至回合结束，你不能成为锦囊牌的目标，在一张其他角色的锦囊牌进入弃牌堆后，你获得之。（至多三张）",
                    "radiance_pofa_af": "破法",
                    "radiance_zhisu": "质素",
                    "radiance_zhisu_info": "出牌阶段限一次，你摸X张牌；若这些牌中有点数为A、2、3、5、7、J、K的牌，你可以展示之并对一名其他角色造成等量的伤害。（X为你已损失的体力值且至少为1）",
                    "radiance_guiji": "轨迹",
                    "radiance_guiji_info": "当一名角色使用牌指定你为目标时，你可以令一名其他角色代替你成为此牌的目标（可以选择非法角色）；若此牌目标数为1，你可以再为其添加一个目标；若此牌不为伤害牌或目标数大于1，你摸两张牌。最后你失去1点体力。",
                    "radiance_aofa": "奥法",
                    "radiance_aofa_info": "每回合限一次，你可以执行一项：1.当你使用一张牌时，摸一张牌，若为你的回合改为摸两张牌；2.当你成为伤害牌的目标后，摸两张牌，然后若此时不是你的回合，直至回合结束，每次你成为其他角色牌的目标后，若你手牌数大于体力值，需弃置一张手牌。",
                    "radiance_aofa_db": "奥法",
                    "radiance_jingyao": "晶耀",
                    "radiance_jingyao_info": "限定技，出牌阶段，你可以将至多三张牌置于武将牌上。你的准备阶段开始时，移除你武将牌上的一张“晶耀”牌。只要你武将牌上有“晶耀”牌，你“奥法”的摸牌数+1，且不能成为延时锦囊的目标。",
                    "radiance_jingyao_af": "晶耀",
                    "radiance_lingyao": "灵药",
                    "radiance_lingyao_info": "出牌阶段限一次，你交给一名其他角色一张手牌。该角色选择是否对除你和其以外的角色使用此牌。若其使用之，你可以摸两张牌或回复1点体力；否则其不能使用或打出牌直至回合结束，然后失去1点体力。",
                    "radiance_mingyong": "命涌",
                    "radiance_mingyong_info": "锁定技，当你受到伤害时，改为失去1点体力。当你失去体力后，你展示当前回合角色的手牌。若其不为你，你可以弃置其至多三张花色相同的手牌；若你不能以此法弃牌，则你可以获得你手牌中缺少的花色的牌各一张。",

                    "radiance_yingcai": "英才",
                    "radiance_yingcai_info": "锁定技，你摸牌阶段额外摸一张牌，你的手牌上限和攻击范围+1。",
                    "radiance_tulong": "屠龙",
                    "radiance_tulong_info": "限定技，出牌阶段，你获得X张【杀】，直至回合结束，你使用【杀】无次数限制，无视目标角色的防具且需要额外使用一张【闪】来抵消。此回合结束时，你失去1点体力。（X为游戏轮数）",
                    "radiance_tulong_af": "屠龙",
                    "radiance_shoushu": "收束",
                    "radiance_shoushu_info": "每个结束阶段，你可以从弃牌堆中获得一张本回合曾因弃置、判定或拼点而进入过弃牌堆的非延时锦囊牌。",
                    "radiance_qiongyu": "穹宇",
                    "radiance_qiongyu_info": "锁定技，结束阶段，你随机观看三个未以此法选择过且场上没有的“包含失去体力的防御性”标签的技能，然后你选择其中一个，获得该技能直至你下一个回合开始，或均不获得并摸一张牌。",
                    "radiance_tingyuan": "庭院",
                    "radiance_tingyuan_info": "主公技，锁定技，你在“穹宇”结算时，技能选项额外添加场上所有与你势力相同的角色的“包含失去体力的防御性”标签的技能，而摸牌数增加已死亡的同阵营的势力相同角色数；每名角色限一次，当你因此获得一名角色拥有的技能后，其可以令你摸两张牌。",
                    "radiance_fengdong": "封冻",
                    "radiance_fengdong_info": "准备阶段，你可以选择一名有手牌的其他角色展示所有手牌，然后你选择其一个花色的手牌并选择一至两项：1.该角色每有一种此花色的牌，你摸一张牌（至多五张）；2.该角色本回合不能使用或打出与此花色不同的牌，受到此花色的牌造成的伤害+1。若同时选择两项，你失去1点体力。",
                    "radiance_fengdong_forbid": "封冻",
                    "radiance_jingti": "净体",
                    "radiance_jingti_info": "锁定技，若你没有装备防具牌，每回合你第一次受到伤害时，若此伤害无属性，防止之。",
                    "radiance_heidong": "黑洞",
                    "radiance_heidong_info": "出牌阶段限一次，你可以对所有其他角色各造成1点伤害，然后这些角色可以分别弃置你一张牌。",
                    "radiance_xuling": "虚灵",
                    "radiance_xuling_info": "当你成为其他角色的基本牌或非延时类的锦囊牌的目标时，你可以失去1点体力取消之，然后你可以令一名手牌数少于体力值的角色摸两张牌或令一名手牌数多于体力值的角色弃置两张手牌。",
                    "radiance_mojian": "魔剑",
                    "radiance_mojian_info": "锁定技，你的攻击范围+5，你的【杀】无视防具。",
                    "radiance_guanduan": "贯断",
                    "radiance_guanduan_info": "你使用【杀】指定目标后，可以根据满足以下条件的数目：·目标角色手牌数不大于你 ·目标角色体力值不大于你 ·目标角色装备区的牌数不大于你；执行以下效果：≥1：此【杀】需要额外使用一张【闪】响应；≥2：目标角色非锁定技失效直至回合结束；=3：目标角色弃置一张牌。",
                    "radiance_cangkong": "苍空",
                    "radiance_cangkong_info": "出牌阶段限一次，你可以废除“贯断”的一个条件或减1点体力上限，然后选择一名攻击范围内的角色，其随机弃置装备区和手牌区中牌数最多的一个区域的一张牌，然后受到1点伤害。",
                    "radiance_ponian": "破念",
                    "radiance_ponian_info": "出牌阶段限一次，你展示一名其他角色的一张手牌，然后你可以弃置一张手牌并弃置该角色展示的牌。若你弃置的牌与展示的牌颜色相同，你改为获得其展示的牌；且若花色也相同，你对其造成1点伤害。",
                    "radiance_hongguan": "虹冠",
                    "radiance_hongguan_info": "弃牌阶段开始时，你可以展示所有手牌，然后依次执行X次选择一项：1.摸一张牌；2.本回合手牌上限+1。（X为你展示的手牌中的花色数）",
                    "radiance_wanling": "万灵",
                    "radiance_wanling_info": "摸牌阶段，你可以放弃摸牌，改为展示并获得牌堆顶三张牌，然后你根据这些牌的点数和获得以下技能直至回合结束：·不大于18：“灵药”；·不小于24：“万象”。",
                    "radiance_wanlingx": "万灵",
                    "radiance_wanlingx_info": "摸牌阶段，你可以放弃摸牌，改为展示并获得牌堆顶三张牌，然后你根据这些牌的点数和获得以下技能直至回合结束：·不大于18：“灵药”；·不小于24：“万象”；·大于18且小于24：“质素”。",
                    "radiance_fuxing": "辅星",
                    "radiance_fuxing_info": "你的弃牌阶段结束时，你可以令一名其他角色摸等同于你此阶段弃牌数的牌（至多三张）。其他角色的弃牌阶段结束时，若其本阶段有弃牌，你可以令其摸一张牌。",
                    "radiance_cheli": "彻理",
                    "radiance_cheli_info": "觉醒技，当你不因【杀】造成的伤害而进入濒死时，你失去技能“辅星”，减1点体力上限，回复体力至2点，修改“万灵”并获得技能“破法”。",
                    "radiance_huangdao": "黄道",
                    "radiance_huangdao_info": "一名角色的准备阶段，你可以弃置一张牌，然后从弃牌堆中选择一张牌置于牌堆顶。",
                    "radiance_xingyi": "星移",
                    "radiance_xingyi_info": "转换技，当你使用一张牌后，你根据其类型执行对应的效果：①基本/锦囊/装备②锦囊/装备/基本③装备/基本/锦囊；摸一张牌/回复1点体力/此技能本回合失效。",

                    "radiance_jiegong": "洁弓",
                    "radiance_jiegong_info": "出牌阶段限一次，你可以视为使用一张【桃园结义】。每回合限一次，你使用的牌结算后，你可以选择一名在此牌结算中回复过体力的其他角色，令其不能使用或打出牌响应牌，你对其使用牌无距离限制，对其造成的下一次伤害+1，直至回合结束。",
                    "radiance_hunji": "魂纪",
                    "radiance_hunji_info": "一名角色的结束阶段，若本回合有角色体力值曾变为1，你可以摸一张牌；若你本回合体力值变化合计大于1，你回复1点体力。",
                    "radiance_xianggan": "相干",
                    "radiance_xianggan_info": "准备阶段开始时，你可以横置或重置一名其他角色，然后横置或重置你自己。当你的武将牌状态变化后，可以摸一张牌；且若是因为受到传导的属性伤害而重置，额外摸一张牌。",
                    "radiance_zhihuan": "置换",
                    "radiance_zhihuan_info": "当你成为一张其他角色的牌的目标时，你可以失去1点体力，然后取消此目标；当你失去1点体力或受到1点属性伤害后，可以亮出牌堆顶的X张牌。对于其中的每种花色，你可以执行以下一项：1.移动场上一张花色相同的牌；2.弃置一名角色区域内的一张牌。（X为触发此技能时你已损失的体力值+1）",
                    "radiance_weiguan": "微观",
                    "radiance_weiguan_info": "判定、摸牌、出牌和弃牌阶段开始时，你可以观看牌堆顶一张牌，然后可以将此牌置于牌堆顶或牌堆底。",
                    "radiance_jiancai": "鉴材",
                    "radiance_jiancai_info": "出牌阶段限一次，你可以展示自己和一名其他角色的各一张手牌，然后亮出牌堆顶和牌堆底的各一张牌。根据这四张牌中的花色数，你执行：·1：令一名角色获得这四张牌，然后其受到3点伤害；·2：你选择一种花色的牌获得，该角色获得另一种花色的牌；·3：你选择同花色或异花色的两张获得，该角色获得剩余的牌·4：你分配这四张牌给任意角色，因此获得牌的角色回复1点体力。",
                    "radiance_juzhu": "巨著",
                    "radiance_juzhu_info": "锁定技，你每回合第一次使用【闪】或锦囊牌后，摸两张牌；然后若你体力值大于1，你失去1点体力。一个回合内，若你未触发过前述效果且未受到过【杀】造成的伤害，则防止你受到锦囊牌造成的伤害。",

                    "radiance_yanzhen": "严阵",
                    "radiance_yanzhen_info": "转换技，当一张非延时类锦囊牌被【无懈可击】响应后：·阴：你可以获得该锦囊牌；·阳：若你非此【无懈可击】的使用者，你可以获得此【无懈可击】。你的非延时类锦囊牌不会被【无懈可击】响应。",
                    "radiance_yanzhen_ai": "严阵",
                    "radiance_hongwei": "宏威",
                    "radiance_hongwei_info": "每回合限一次，一名角色移除“军魂”后，你可以摸一张牌。",
                    "radiance_hunlie": "魂烈",
                    "radiance_hunlie_info": "限定技，出牌阶段，你可以摸X张牌并获得X个“军魂”标记，然后回复1点体力。（X为你的已损失体力值+1且至少为3）",
                    "radiance_junhun": "军魂",
                    "radiance_junhun_info": "当你受到伤害时，可以移除一个“军魂”，令此伤害-1。当你需要使用或打出一张【杀】时，你可以选择移除一个“军魂”，视为使用或打出之。",
                    "radiance_junhun_sha": "军魂",
                    "radiance_junhun_damage": "军魂",
                    "radiance_shangwu": "尚武",
                    "radiance_shangwu_info": "主公技，游戏开始时，场上每有一名与你势力相同的角色，你获得一个“军魂”标记。你为“魂烈”添加“当你进入濒死时”时机，此时机发动时你先回复体力再进行摸牌和获得“军魂”。",
                    "radiance_zhenyan": "箴言",
                    "radiance_zhenyan_info": "摸牌阶段，你可以放弃摸牌，改为从牌堆中选等量尽可能类型不同的牌获得。",
                    "radiance_zhongluan": "终乱",
                    "radiance_zhongluan_info": "其他角色的回合结束时，若其本回合：·未使用过伤害牌，你可以摸一张牌；·使用过伤害牌且牌数不大于X而未以牌造成过伤害，你可以对其造成1点伤害。（X为你已损失的体力值且至少为1)",
                    "radiance_weipo": "威迫",
                    "radiance_weipo_info": "出牌阶段开始时，你可以摸一张牌，然后展示至多三张伤害牌并摸等量的牌。以此法展示的牌本回合不计入手牌上限。若你以此法展示了多于一张牌，你不能使用【杀】直至回合结束；若展示了三张，你获得一个“军魂”。",
                    "radiance_weipo_af": "威迫",
                    "radiance_xianzhuo": "险着",
                    "radiance_xianzhuo_info": "你可以将所有手牌当作【杀】、【闪】或【无懈可击】使用或打出。",
                    "radiance_xianzhuo_sha": "险着",
                    "radiance_xianzhuo_shan": "险着",
                    "radiance_xianzhuo_wuxie": "险着",
                    "radiance_danlue": "胆略",
                    "radiance_danlue_info": "一名角色的结束阶段，你可以将手牌补至两张。当你受到伤害后，若你没有手牌，你获得一个“军魂”。",

                    "radiance_feiren": "飞刃",
                    "radiance_feiren_info": "锁定技，你的攻击范围+1，你使用【杀】的目标上限+1。",
                    "radiance_qiaowu": "巧舞",
                    "radiance_qiaowu_info": "每回合限一次，当你需要使用或打出一张基本牌时，你可以视为使用或打出之；当前回合结束时，你需进行一次判定；若结果为基本牌，你获得判定牌并失去1点体力。",
                    "radiance_shouwu": "授武",
                    "radiance_shouwu_info": "每轮每项限一次，当一名角色使用的【杀】被【闪】响应后，你可以选择一项：1.将此【杀】交给一名角色，然后你摸一张牌；2.将此【闪】交给一名角色；然后你可以将一个“军魂”移给该角色。",
                    "radiance_zhige": "止戈",
                    "radiance_zhige_info": "你的一张实体牌【杀】命中或被弃置后，若你的“军魂”标记数量小于存活角色数的一半（向下取整），你获得一个“军魂”；你可以将一张牌当作【杀】打出并获得一个“军魂”标记。",

                    "radiance_tangong": "贪功",
                    "radiance_tangong_info": "你使用【杀】的次数上限+1。你使用【杀】指定目标后，可以摸两张牌；则此【杀】首次被闪避后，你失去1点体力；若此【杀】未被闪避，你本回合不能再发动“贪功”。",
                    "radiance_zhengbian": "政变",
                    "radiance_zhengbian_info": "限定技，你的回合结束时，若此时不为第一轮，你可以令一名体力值不小于你的其他角色翻面，然后你进行一个额外的回合。",
                    "radiance_shouyue": "授钺",
                    "radiance_shouyue_info": "出牌阶段限一次，你可以将一张【杀】/武器牌交给其他角色，然后你摸两/三张牌，本回合手牌上限+2。",
                    "radiance_tongguan": "统观",
                    "radiance_tongguan_info": "结束阶段，你可以摸X张牌；若你本回合没有造成过伤害，你改为观看牌堆顶的3+X张牌并从中选择至多X张获得，然后将其余的牌以任意顺序置于牌堆顶或牌堆底。（X为你已损失的体力值且至少为1，最多为3）",
                    "radiance_kuanzhi": "宽治",
                    "radiance_kuanzhi_info": "主公技，其他与你势力相同的角色使用【杀】被【闪】响应后，其可以你获得一个“军魂”标记。",
                    "radiance_muyi": "母仪",
                    "radiance_muyi_info": "当一名角色使用【杀】造成伤害后，若你已受伤，其可以弃置一张牌，然后令你回复1点体力。",
                    "radiance_muyi_gl": "母仪",
                    "radiance_shezheng": "摄政",
                    "radiance_shezheng_info": "出牌阶段限一次，你将一张手牌置于一名没有“摄”的其他角色武将牌上，称为“摄”。有“摄”的角色以摸牌阶段通常摸牌以外的方式获得牌后，你摸一张牌；当你以此法摸了五张牌后，其移去“摄”；其结束阶段时若其仍有“摄”，其获得之，然后若你以此法获得的牌数少于三张，其可以视为使用一张无距离限制的【杀】。",
                    "radiance_shezheng_af": "摄政",
                    "radiance_shezheng_afdraw": "摄政",
                    "radiance_wubei": "武备",
                    "radiance_wubei_info": "出牌阶段开始和结束时，若你有剩余的使用【杀】次数，你可以消耗一点，然后摸一张牌。你使用【杀】的次数上限+1。",
                    "radiance_douji": "斗技",
                    "radiance_douji_info": "当你使用的【杀】指定目标后，可以令目标角色选择一项：1.打出一张【杀】并令你摸一张牌，然后此【杀】对其无效且不计入使用次数限制；2.其受到1点对应牌为此【杀】的伤害。",
                    "radiance_kaiyang": "开阳",
                    "radiance_kaiyang_info": "其他角色的结束阶段，若本回合有进入弃牌堆的红色牌且数量不小于黑色牌数，你可以弃置其一张牌；若严格大于，你可以改为对其造成1点火焰伤害。",
                    "radiance_wuying": "舞英",
                    "radiance_wuying_info": "你的回合外，当你每回合第一次成为其他角色牌的目标后，你令其选择一项：1.你获得X张♥牌；2.你本回合可以将任意一张牌当做【杀】或【闪】使用或打出。（X为其体力值减去你的体力值且至少为1至多为3）你的♥牌不计入手牌上限。",
                    "radiance_duanju": "断拒",
                    "radiance_duanju_info": "当你成为其他角色黑色伤害牌的目标后，可以令使用者弃置你一张牌，然后直至回合结束与其攻击范围-X。然后若你不在该角色的攻击范围内，此牌对你无效；若此牌对你造成了伤害，你获得使用者的X张牌。（若弃置的牌为装备牌则X为2，否则为1）",
                    "radiance_duanju_db": "断拒",
                    "radiance_yingmu": "鹰目",
                    "radiance_yingmu_info": "出牌阶段限一次，你摸X张牌。你的手牌上限+X。（X为你或攻击范围内有你的角色的下列数值中的最大值：其攻击范围减其至你的距离，且至少为1，至多为5）",
                    "radiance_lunxin": "论心",
                    "radiance_lunxin_info": "出牌阶段限一次，你可以令两名有手牌的角色拼点。若如此做，你摸两张牌，且可以令发起者的拼点牌点数+或-至多X。然后赢的角色选择一项：1.弃置你的一张牌；2.你失去1点体力并摸一张牌。（X为你已失去的体力值）",
                    "radiance_zhihe": "志和",
                    "radiance_zhihe_info": "当一名其他角色使用【杀】时，若其选择了你或你攻击范围内的角色为目标，你可以选择一项：1.令你成为此【杀】的唯一目标，然后你将手牌补至体力上限（至少摸一张，至多摸五张)；2.若你不是目标，你额外成为此牌的目标，然后此【杀】的使用者受到1点伤害。",
                    "radiance_huhuo": "狐火",
                    "radiance_huhuo_info": "出牌阶段，你可以弃置一张黑色手牌并令一名其他角色选择一项：1.令你弃置其区域内的至多两张牌，若弃置的牌中黑色基本牌有且仅有一张你获得之，若没有弃置黑色牌其横置；2.受到1点火焰伤害。若两个选项本回合均有人选择过，你摸一张牌，此技能失效直至当前阶段结束。",

                    "radiance_fenggong": "丰弓",
                    "radiance_fenggong_info": "出牌阶段限一次，你可以视为使用一张【五谷丰登】。每回合限一次，你使用的牌结算后，你可以选择一名因该牌效果获得了牌的角色：若你可以从其手牌中对其使用其获得的任意牌（无距离限制），你选择其中一张对其使用，否则你将其获得的牌当火【杀】对其使用；然后其于结算后从弃牌堆中获得之。",
                    "radiance_daoqing": "稻庆",
                    "radiance_daoqing_info": "一名角色的结束阶段，若本回合你获得过牌，你可以展示手牌，若其中的花色数：·等于三.获得第四种花色的牌一张；小于三：获得缺少的花色各一张直至你手牌包含三种花色。",
                    "radiance_zangying": "葬樱",
                    "radiance_zangying_info": "其他角色死亡后，你可以展示所有手牌，回复其中花色数量的体力，然后从弃牌堆随机获得每种花色的牌各一张。你死亡时，你可以令一名其他角色发动“葬樱”。",
                    "radiance_feiru": "非儒",
                    "radiance_feiru_info": "结束阶段，你可以失去1点体力并获得两张牌名不同的基本牌；若你本回合没有使用基本牌且体力值大于1，你需如此做。",
                    "radiance_modao": "莫道",
                    "radiance_modao_info": "出牌阶段开始时，你可以视为使用一张非延时类锦囊牌，然后你直至回合结束不能再使用与之牌名不同的非延时类锦囊牌。",
                    "radiance_bufo": "不佛",
                    "radiance_bufo_info": "锁定技，你的回合外，每回合第一次受到伤害时此伤害-1。若你于你的回合内没有使用过装备牌，此技能失效直至你下个回合开始。",

                    "radiance_caopan": "操盘",
                    "radiance_caopan_info": "你的结束阶段，你可以选择至多三名其他角色，你令这些角色分别独立选择一项：1.交给你一张基本牌；2.弃置一张非基本牌；3.令你摸两张牌。若你以此法获得了不少于三张牌，你跳过下个回合的判定和摸牌阶段。",
                    "radiance_caopan_db": "操盘",
                    "radiance_tunji": "囤积",
                    "radiance_tunji_info": "当你成为【杀】的目标后，若来源的装备区内的牌多于你，你可以将一张装备牌置于你的装备区；若你的装备区内没有防具，优先装备防具牌。",
                    "radiance_guchui": "鼓吹",
                    "radiance_guchui_info": "主公技，你受到伤害后，与你势力相同的角色可以选择受到1点无来源的伤害，则若你已翻面，你翻回正面；若你未翻面，你回复1点体力。",
                    "radiance_chizi": "池资",
                    "radiance_chizi_info": "限定技，出牌阶段，你获得X个“资”标记，然后获得三种类的牌各一张。每个准备阶段，你移除一个“资”标记，然后从牌堆中获得三种类的牌各一张。（X为游戏轮数。若能获得的牌不足三种则你获得但不移除标记）",
                    "radiance_chizi_af": "池资",
                    "radiance_longduan": "垄断",
                    "radiance_longduan_info": "摸牌阶段，你可以放弃摸牌，改为获得所有其他角色各一张手牌，然后弃置X张牌。（X为你的体力值）",
                    "radiance_suanjin": "算尽",
                    "radiance_suanjin_info": "锁定技，当你失去手牌或者装备区内的所有牌后，若你已受伤，你回复1点体力，否则你失去1点体力。",
                    "radiance_kongyin": "空音",
                    "radiance_kongyin_info": "出牌阶段每项各限一次：1.将一张手牌交给一名其他角色，令其失去1点体力；2.弃置二至四张花色相同的手牌，令一名其他角色摸X张牌并翻面。（X为4减去弃置的牌数）",
                    "radiance_chuilian": "垂怜",
                    "radiance_chuilian_info": "每轮游戏开始时，记录此时场上最小的已损失体力值。一名角色受到伤害后或失去体力后，若该角色于此事件前已损失体力值不大于记录值，你可以摸一张牌。每轮第一次你已受伤且不因自身触发此技能时，你回复1点体力。",
                    "radiance_douyan": "斗艳",
                    "radiance_douyan_info": "出牌阶段限一次，你可以与一名其他角色拼点。若你赢，你本阶段对该角色使用牌无距离限制且选择一项效果适用：1.你使用牌指定该角色为目标后摸一张牌；2.“幻形”可以在不满足装备牌数限制的情况下使用且可用非装备牌转化，但因此使用的牌仅能指定该角色为目标。若你没赢，该角色下个回合的弃牌阶段跳过，然后若其手牌数大于其手牌上限，你可以将其一张装备牌移动给你。",
                    "radiance_douyan_1": "斗艳",
                    "radiance_douyan_2": "斗艳",
                    "radiance_douyan_3": "斗艳",
                    "radiance_douyan_4": "斗艳",
                    "radiance_huanxing": "幻形",
                    "radiance_huanxing_info": "若你手牌和装备区内的装备牌数不小于你总牌数的一半，你可以将一张装备牌当作任意本回合未以此法使用过的牌名的基本牌或非延时类锦囊牌使用或打出。",
                    "radiance_huajian": "华剑",
                    "radiance_huajian_info": "当你使用【杀】或【决斗】指定目标后，你可以进行一次判定，然后目标角色展示手牌。若其有此花色的手牌，你获得这些牌；否则你获得判定牌，此【杀】或【决斗】对其造成的伤害+1。",
                    "radiance_yueyin": "月吟",
                    "radiance_yueyin_info": "当一名角色因弃置而失去牌后（不会嵌套此技能），若这些牌中包含♥牌或装备牌，你可以弃置一张牌，然后令该角色以外的一名角色获得这些♥和装备牌，其可以使用这些牌中的任意装备牌。",
                    "radiance_xianzhu": "贤助",
                    "radiance_xianzhu_info": "准备阶段，你可以令一名角色摸两张牌；若其不为你且摸牌后手牌数仍不超过三张，你摸一张牌，否则你本回合手牌上限+2。",
                    "radiance_gongqiao": "工巧",
                    "radiance_gongqiao_info": "每回合限一次，其他角色使用【杀】造成伤害时，你可以展示并交给伤害来源一张手牌。若此牌为黑色，此伤害+1；若为红色，你回复1点体力。",
                    "radiance_lizhan": "历战",
                    "radiance_lizhan_info": "摸牌阶段，你可以放弃摸牌，改为展示牌堆顶的三张牌，并获得其中所有的非锦囊牌或所有锦囊牌；然后你可以将剩余的牌交给一名其他角色。当一张包含你为目标的伤害牌结算完毕后，你令你下一次“历战”展示的牌数+1。",
                    "radiance_nuyong": "怒勇",
                    "radiance_nuyong_info": "锁定技，当你使用一种类型的牌后，你使用【杀】的次数+1，与其他角色计算距离时-1，直至回合结束。",
                    "radiance_dangshou": "党首",
                    "radiance_dangshou_info": "准备阶段或一张装备牌进入你的装备区后，你可以选一名角色获得“党”标记；你每回合首次如此做时摸一张牌。有“党”标记的角色手牌上限+X，出牌阶段开始时摸一张牌，然后选择一项：1.将一张牌交给拥有一名有“党首”的角色并移去所有“党”；2.弃置X张手牌。（X为其“党”数）",
                    "radiance_xuancheng": "宣称",
                    "radiance_xuancheng_info": "主公技，游戏开始时，令所有与你势力相同的其他角色获得一个“党”。与你势力相同的其他角色因“党首”将装备牌交给你后，你可以展示之，然后与其各摸一张牌。",
                    "radiance_qiangyi": "强易",
                    "radiance_qiangyi_info": "准备阶段，你可以弃置一名角色至多两张牌，且其可以令你观看并选择其将要弃置的牌；每以此法弃置一张非基本牌，其摸X张牌。（X为弃置的牌数，若其选择令你观看则为2）",
                    "radiance_yuli": "渔利",
                    "radiance_yuli_info": "每轮每名角色限一次，一名角色失去最后一张手牌或一次性失去多于一张牌后，你可以摸一张牌。",
                    "radiance_mingke": "铭刻",
                    "radiance_mingke_info": "出牌阶段限一次，你可以将一张手牌当作你本局游戏中已经使用过的一张基本牌或非延时类锦囊牌使用。",
                    "radiance_kongzhi": "空值",
                    "radiance_kongzhi_info": "你的弃牌阶段结束时，你可以弃置其他角色区域内最多1+X张牌。（X为你此阶段弃置的牌数）",
                    "radiance_fengqi": "锋骑",
                    "radiance_fengqi_info": "出牌阶段开始时，你可以选择一名其他角色。此阶段内若其存活，你不能对你或其以外的角色使用牌，对其使用牌无距离限制，使用牌指定其为目标后可以选择本阶段未选择过的一项：1.获得其一张手牌；2.此牌不能被响应且不计次数；3.此牌造成的伤害+1；4.其全部技能和防具失效直至回合结束。",
                    "radiance_fengqi_db": "锋骑",

                    "radiance_duomu": "夺目",
                    "radiance_duomu_info": "准备阶段，你可以先检测你是否不为手牌最多的角色，若不为则你摸两张牌；然后你可以再检测你是否为手牌最多的角色，若为你可以视为使用一张无距离限制的【杀】。",
                    "radiance_shenju": "深居",
                    "radiance_shenju_info": "弃牌阶段开始时，若场上有角色手牌数比你多或你本回合造成过伤害，你可以跳过弃牌阶段；当你受到伤害时，若伤害来源的手牌数小于你，你可以将你们手牌数差值的手牌交给其他角色，然后令此伤害-1。",
                    "radiance_tiancai": "添彩",
                    "radiance_tiancai_info": "①每回合限四次，当你使用一张牌时，你可以根据其花色执行对应效果：·♥：摸一张牌；·♦：令一名其他角色获得此牌的实体牌；·♠：为此牌增加一个合法目标；·♣：弃置其中一个目标区域内的一张牌。<br>②每次你的回合开始时，你可以切换①中花色与效果的对应顺序。",
                    "radiance_hongse": "虹色",
                    "radiance_hongse_info": "游戏开始时或四种花色均被使用过的回合结束时，你亮出牌堆中“色”所缺少的花色各一张，作为“色”置于你的武将牌上，然后你可以用任意张手牌与交换“色”。摸牌阶段，你可以获得任意张“色”然后少摸等量的牌。",
                    "radiance_huoluan": "惑乱",
                    "radiance_huoluan_info": "出牌阶段限两次，你可以将一名角色装备区内的一张本阶段未以此法移动过的类型的装备牌移动至本回合未因此装备过牌的另一名角色的装备区。若装备了牌的角色不为你，失去了装备牌的角色视为对因此装备了牌的角色使用了一张无视防具的【杀】。",
                    "radiance_zhemian": "遮面",
                    "radiance_zhemian_info": "转换技，当你受到伤害时，若伤害来源为男性/女性，你可以摸一张牌并令此伤害-1；若不为，你也可以选择切换至另一项。",
                    "radiance_qugong": "驱弓",
                    "radiance_qugong_info": "出牌阶段限一次，你可以视为使用一张【南蛮入侵】。每回合限一次，你使用的牌结算后，你可令响应了此牌的角色从弃牌堆中各自获得其为响应所使用或打出的牌，若合计不少于两张你回复1点体力。",
                    "radiance_keyi": "克异",
                    "radiance_keyi_info": "一名角色的结束阶段，若本回合你失去过牌，你可以摸X张牌。（X为不为当前回合且本回合失去过牌的角色中所失去牌数的最大值，至多为3）",
                    "radiance_huikui": "回馈",
                    "radiance_huikui_info": "你不能使用此技能直至你上次使用此技能后累计使用或打出四张牌：出牌阶段，你可以摸两张牌。",
                    "radiance_cuihua": "催化",
                    "radiance_cuihua_info": "限定技，你可以立刻重置“回馈”，并使用以下一项：1.出牌阶段，且可以对至多X名角色各造成1点伤害；2.当你濒死时，回复X点体力。（X为你重置时已记录的使用或打出牌数）",

                    "radiance_yusuo": "狱锁",
                    "radiance_yusuo_info": "出牌阶段限一次，你可以用区域内的一张牌与一名其他角色拼点。没赢的角色执行以下操作，且若你的拼点牌为装备牌，你可以令一名不为此次拼点未赢者的其他角色也执行：横置并随机弃置装备区内一张牌。",
                    "radiance_xiepo": "胁迫",
                    "radiance_xiepo_info": "你对已横置的角色使用牌无距离限制；其他角色重置时，其需交给你一张牌；若为你自己或该角色无牌，改为从牌堆获得一张属性伤害牌。",

                    "radiance_tuanjie": "团结",
                    "radiance_tuanjie_info": "出牌阶段限一次，你可以令所有角色依次选择将一张手牌交给其他角色并摸一张牌。然后若你为全场手牌最多的角色，你可以令一名角色回复1点体力。",
                    "radiance_xisheng": "牺牲",
                    "radiance_xisheng_info": "当你受到伤害后，你可以选择至多X名伤害来源以外的角色，令伤害来源摸一张牌，你选择的角色各摸三张牌。（X为该伤害的点数）",
                    "radiance_ganzhao": "感召",
                    "radiance_ganzhao_info": "主公技，你的弃牌阶段开始时，若你需要弃牌，你可以令所有与你势力相同的其他角色依次选择是否弃置一张牌；若有角色弃牌，你的弃牌阶段跳过。",
                    "radiance_chayi": "察异",
                    "radiance_chayi_info": "摸牌阶段开始时，你可以令由你下家开始，所有角色依次摸一张牌然后弃一张牌。然后你获得这些弃牌中位于弃牌堆的至多X张，并将本阶段的摸牌数改为X减去你获得的牌数。（X为弃置的牌中的花色数）",
                    "radiance_biyou": "庇佑",
                    "radiance_biyou_info": "锁定技，你的回合外，当你使用或打出一张牌后，你需选择一名角色，防止其受到所有的伤害直至回合结束。",
                    "radiance_huizhao": "辉照",
                    "radiance_huizhao_info": "准备阶段开始时，你可以选择一项：1.本回合的摸牌阶段所有角色依次摸一张牌，你于此阶段额外摸两张牌；2.本回合的结束阶段，你摸三张牌。",
                    "radiance_zhenjie": "贞洁",
                    "radiance_zhenjie_info": "当你成为其他角色的【杀】或非延时类锦囊牌的目标后，若此牌只有一个目标，你可以与使用者拼点。若你赢，此牌对你无效；若你没赢，你获得对方的拼点牌和以你为目标的牌，然后不能再使用此技能直至下个你的回合开始或你不于当前回合受到伤害后。",
                    "radiance_dianlu": "典录",
                    "radiance_dianlu_info": "每回合限X次，当与你距离1或以内的角色使用或打出一张【闪】后，你可以摸一张牌。你与其他角色计算距离时-X。（X为你已损失的体力值且至少为1）",
                    "radiance_dizui": "涤罪",
                    "radiance_dizui_info": "每回合限一次，你的回合外，当你失去一张牌后，你可以选择一名攻击范围内的角色。（若场上有角色濒死，则延后至濒死后结算）你令其打出一张【闪】，若不打出，其受到1点雷电伤害。",
                    "radiance_suzheng": "肃正",
                    "radiance_suzheng_info": "①一名其他角色的出牌阶段开始时，你可以令该角色选择一项：1.将一张与你的“肃正”牌花色均不同的手牌置于你的武将牌上；2.受到你造成的1点伤害，然后获得所有“肃正”牌并跳过出牌阶段和弃牌阶段，你直至你的下个回合开始不能再发动“肃正”。<br>②准备阶段，你可以移去所有“肃正”牌。当你于本局游戏中已累计移去或令其他角色获得过的“肃正”牌中包含四种花色时，你将“移去”改为“获得”。",
                    "radiance_xinxiang": "心象",
                    "radiance_xinxiang_info": "当你成为一张非延时类锦囊牌的目标后或当你进行延时锦囊的判定时，你可以观看牌堆顶的两张牌并选择其中一张获得，然后将另一张牌置于牌堆顶。",
                    "radiance_haoai": "浩爱",
                    "radiance_haoai_info": "当一名角色受到伤害时，若你的体力值不小于此伤害值，你可以失去等量的体力，防止该角色受到伤害直至回合结束，然后其摸等量的牌。",
                    "radiance_kejie": "恪戒",
                    "radiance_kejie_info": "锁定技，游戏开始时，所有角色获得一个“恪”标记；每名角色于其出牌阶段使用第一张锦囊牌后，其获得一个“恪”标记。防止你受到“恪”比你多的角色锦囊牌造成的伤害。有“恪”的角色手牌上限-X。（X为其“恪”标记数）",
                    "radiance_kejie_gl": "恪戒",
                    "radiance_shihui": "释悔",
                    "radiance_shihui_info": "一名角色的弃牌阶段结束时，若其没有手牌且有“恪”，其移去所有“恪”并选择一项：1.由你视为使用一张四字非延时锦囊牌；2.与你各摸移去标记数量一半的牌（你向上取整，其向下取整）。",

                    "radiance_zhunjiao": "谆教",
                    "radiance_zhunjiao_info": "每回合对每张牌限一次，当你获得一张牌后，你可以将此牌置于其他角色的合适的区域内。",
                    "radiance_shiwei": "拾微",
                    "radiance_shiwei_info": "每回合限一次，当一名角色选择其自身的牌弃置后，你可以选择弃牌中的一张获得之。",
                    "radiance_yangzhu": "仰祝",
                    "radiance_yangzhu_info": "出牌阶段限一次，你可以使用此技能，且你可以先选择弃置所有手牌中的“祝”或所有手牌。令所有此时手牌比你多的角色依次选择一项：1.弃置一张手牌；2.令你摸一张牌，称为“祝”。最后，若你的手牌为唯一最多，你结束出牌阶段。“祝”不计入你的手牌上限。",
                    "radiance_youguo": "佑国",
                    "radiance_youguo_info": "主公技，锁定技，你的手牌上限+X；当你进行“仰祝”的手牌数统计时，X张手牌不计入你的手牌数。（X为场上其他与你势力相同的角色数）",
                    "radiance_kaicheng": "开诚",
                    "radiance_kaicheng_info": "出牌阶段开始时，你可以令所有其他角色选择一项，直至有角色选择2：1.本回合其所有手牌对你可见；2.本回合不能使用或打出牌。",
                    "radiance_chuhai": "除害",
                    "radiance_chuhai_info": "出牌阶段限一次，你可以弃置一张牌，然后弃置一名其他角色至多两张牌。若其弃置的牌中颜色不超过一种，你视为对其使用了一张【杀】；若其因此【杀】受到伤害，其摸一张牌。",
                    "radiance_junheng": "均衡",
                    "radiance_junheng_info": "当你受到1点伤害后，你可以令一名角色将手牌调整至手牌上限。（至多摸/弃四张牌）",

                    "radiance_yingling": "英灵",
                    "radiance_yingling_info": "当你造成/受到伤害时，你可以弃置一张手牌令此伤害+1/-1，然后本轮下一次发动对应效果时所需弃牌数累计+1。",
                    "radiance_tianshu": "天枢",
                    "radiance_tianshu_info": "锁定技，你的手牌上限至少为X。回合开始时，你将手牌摸至X张，然后若以此法摸牌数大于2，你跳过摸牌阶段。（X为场上最高的体力值且至少为2，至多为5）",
                    "radiance_huiwang": "辉望",
                    "radiance_huiwang_info": "每回合每名角色限一次，当你或你攻击范围内的角色成为其以外的角色的伤害牌的目标后，若其体力值不大于/大于1且本回合内其成为此类牌目标的次数不小于1/2，你可以摸一张牌，然后交给其一张牌。",

                    "radiance_yujian": "羽箭",
                    "radiance_yujian_info": "弃牌阶段开始时，你可以视为对一名其他角色使用了一张【杀】。然后若场上的存活角色未受到此【杀】的伤害，你跳过弃牌阶段。",
                    "radiance_huaici": "怀慈",
                    "radiance_huaici_info": "每阶段每个牌名限一次，你使用一张牌对一名角色造成伤害时，可以令此伤害-1，然后摸三张牌。",
                    "radiance_huaici_ai": "怀慈",
                    "radiance_jinghun": "净魂",
                    "radiance_jinghun_info": "每回合限一次，当你造成伤害后，可以令受伤角色选择一项：1.其摸一张牌，然后你摸三张牌；2.你与其各摸一张牌，然后你获得其区域内的一张牌；或当你使用非伤害牌指定一名其他角色为目标后，可以对其执行选项2。",
                    "radiance_longjuan": "龙卷",
                    "radiance_longjuan_info": "限定技，出牌阶段，你可以从任意名角色的场上区域内各将一张牌移动至你对应的区域内。",
                    "radiance_jiahu": "加护",
                    "radiance_jiahu_info": "锁定技，你的手牌上限+X，出牌阶段可以额外使用X张【杀】。（X为你装备区内的牌数）",

                    "radiance_zhugong": "祝弓",
                    "radiance_zhugong_info": "出牌阶段限一次，你可以视为使用一张【万箭齐发】。每回合限一次，你使用的伤害牌结算后，你可以令所有受到此牌伤害的角色各回复1点体力，然后你摸一张牌。",
                    "radiance_huimou": "辉眸",
                    "radiance_huimou_info": "一名角色的结束阶段，若本回合你受到过伤害，你可以亮出牌堆顶三张牌，然后你可以以任意顺序使用任意张亮出的牌。",
                    "radiance_waidao": "外道",
                    "radiance_waidao_info": "出牌阶段限一次，你可以令所有其他角色分别独立选择是否将一张牌交给你。若这些牌的点数中有唯一最大，将该牌交给你的角色可以视为使用一张非延时类锦囊牌；否则你可以视为使用一张非延时类锦囊牌。",
                    "radiance_diankuang": "癫狂",
                    "radiance_diankuang_info": "觉醒技，结束阶段，若你本回合没跳过出牌阶段且因“外道”获得的牌数不大于一张，你加2点体力上限，回复2点体力，失去“外道”并获得“生祭”。",
                    "radiance_shengji": "生祭",
                    "radiance_shengji_info": "锁定技，每次你的结束阶段，你失去1点体力，然后可以视为使用一张非延时类锦囊牌。你受到伤害的回合的结束阶段你减1点体力上限，然后可以视为使用一张基本牌。",
                    "radiance_jueren": "绝刃",
                    "radiance_jueren_info": "你的回合外每回合限一次，当一名角色使用【杀】时，若你在其攻击范围内，你可以打出一张基本牌令其选择一项：1.打出一张【闪】并取消此【杀】；2.根据你的牌执行后续效果：【杀】：其受到2点此【杀】造成的伤害；【闪】：你获得其一张牌和其使用的【杀】；其他：你和所有目标角色各摸两张牌。",
                    "radiance_shengcheng": "圣城",
                    "radiance_shengcheng_info": "限定技，出牌阶段，你亮出牌堆顶五张牌，若这些牌中没有【杀】，则你继续亮出牌堆顶的牌；直至亮出【杀】为止，你获得这些牌，这些牌本回合不计入手牌上限，你本回合使用【杀】没有距离限制。",

                    "radiance_quanneng": "全能",
                    "radiance_quanneng_info": "每轮每项限一次，其他角色执行以下操作后，你可以：①不于摸牌阶段摸了至少两张牌后：摸两张牌；②不于弃牌阶段弃牌后：获得其一张手牌；③不因【杀】受到伤害后：视为使用一张【杀】；④不于濒死状态回复体力后：回复1点体力；每轮开始时，若上一轮有选项未执行，你需废除一个选项，且需优先废除该轮执行过的选项。",
                    "radiance_duotian": "夺天",
                    "radiance_duotian_info": "限定技，出牌阶段，若牌堆数量不大于弃牌堆数量且你已废除至少一个“全能”的选项，你可以失去“全能”。直至回合结束每个牌名限一次，你可以使用弃牌堆中的牌，同时将弃牌堆中所有其他同名牌洗回牌堆。然后若洗回牌堆的张数小于牌堆中剩余张数或你以此法使用了X张牌，此效果失效。（X为你废除的“全能”项数加上已阵亡人数）",
                    "radiance_duotian_af": "夺天",
                    "radiance_huiguang": "汇光",
                    "radiance_huiguang_info": "准备阶段，你可以选择一名角色，令该角色摸至多两张牌。若如此做，直至该角色的回合结束为止，其成为全场的伤害来源，其与所有其以外的角色计算距离时为1。",
                    "radiance_huiguang_af": "汇光",
                    "radiance_shengfa": "圣罚",
                    "radiance_shengfa_info": "出牌阶段，你可以弃置X张手牌，对你攻击范围内的一名其他角色造成1点伤害。（X为本回合此技能发动的次数，包括当前）",
                    "radiance_yunming": "运命",
                    "radiance_yunming_info": "一名角色的判定牌生效前，你可以打出一张黑色牌。若如此做，你选择此判定结果的点数和花色。",
                    "radiance_tianze": "天择",
                    "radiance_tianze_info": "出牌阶段限一次，你可以弃置〇或一张牌，然后选择顺时针或逆时针，按此顺序所有角色需依次弃置一张点数比上一张牌大的手牌，弃置后其可以令你摸一张牌，直至有角色不能如此做（需展示手牌确认）或结算至你；然后你可以选择一项：1.对不能如此做的角色造成1点伤害，且你下一次发动“天择”时可以改为以其为起点；2.获得其他角色因此弃置的牌。",
                    "radiance_tianxuan": "天璇",
                    "radiance_tianxuan_info": "当你进行判定前，你可以随机观看四种花色的牌各一张，选择其中一张牌并获得，此次判定结果视为此牌。每轮限一次，你也可以在其他角色进行判定前发动此技能。",
                    "radiance_xianyue": "仙乐",
                    "radiance_xianyue_info": "①每名角色限一次，当其造成伤害时，你可以令其判定：若结果为黑色，此伤害+1；否则你摸一张牌。<br>②每名角色限一次，当其受到伤害时，你可以令其判定。若结果为红色，此伤害-1；否则你摸一张牌。<br>③不为第一轮的出牌阶段开始时，你可以选择一项：1.重置一名角色的①和②的记录；2.翻面，然后重置此技能的所有记录。当你为进行判定的角色而对应结果为摸牌时，额外摸一张牌。",
                    "radiance_xianyue_add": "仙乐①",
                    "radiance_xianyue_minus": "仙乐②",

                    "radiance_xianyi": "仙衣",
                    "radiance_xianyi_info": "锁定技，当你的体力值变化后，若这是本局游戏中你的体力第一次变为该值，你摸三张牌并回复1点体力。",
                    "radiance_quhai": "去害",
                    "radiance_quhai_info": "每回合对每名角色限一次，出牌阶段，你选择一名装备区内有牌的角色，令其选择一项：1.令你弃置其装备区内的一张牌，若为武器牌其摸X张牌；2.失去1点体力，然后此技能本阶段失效。（X为你本回合此前已发动“去害”的次数，至多为3）",
                    "radiance_heyu": "鹤羽",
                    "radiance_heyu_info": "当一名角色成为其他角色的【杀】或非延时类的锦囊牌的唯一目标后，你可以令该牌对目标角色无效，然后你持续亮出牌堆顶的牌，直至出现与已有的【鹤羽】牌花色均不同的牌。你将该牌置于武将牌上，然后从其余亮出的牌中获得花色不同的各一张。若亮出的花色数不为2，你失去1点体力。",
                    "radiance_xianci": "仙赐",
                    "radiance_xianci_info": "锁定技，你武将牌上每有一张“鹤羽”牌，其他角色计算与你的距离时+1，你的手牌上限+1。你可以将两张颜色相同的“鹤羽”牌当作【桃】使用。",
                    "radiance_shengyu": "圣谕",
                    "radiance_shengyu_info": "出牌阶段限一次，你可以废除你的一个装备栏，然后令至多X名角色各摸两张牌。（X为你已废除的装备栏数）",
                    "radiance_shengyux": "圣谕",
                    "radiance_shengyux_info": "出牌阶段限一次，你可以：若你有未废除的装备栏，你先废除一个，然后令至多X名角色各摸两张牌。你的攻击范围+X。（X为你已废除的装备栏数）",
                    "radiance_shilian": "试炼",
                    "radiance_shilian_info": "觉醒技，准备阶段，若你已废除的装备栏数不小于存活角色数，你选择一个顺序，所有其他角色以此顺序依次选择一项：1.交给你一张类型与你已废除的一个装备栏相同的装备牌，然后你恢复该装备栏；2.受到1点伤害且你回复1点体力。最后你修改“圣谕”。",

                    "radiance_qiongguang": "穹光",
                    "radiance_qiongguang_info": "出牌阶段，你可以弃置一张手牌并展示牌堆顶两张牌。若这两张牌的点数互质，你对一名其他角色造成1点伤害，然后将这两张牌分配给你和该角色各一张；否则你令一名角色获得这两张牌。若你弃置的牌的点数不为质数或一名角色本阶段以此法获得至少两张牌后，此技能本阶段失效。",
                    "radiance_tianji": "天玑",
                    "radiance_tianji_info": "当你成为一张其他角色的牌的目标时，你可以失去1点体力取消此目标，此牌对你无效。当你失去1点体力后，可以选择比7大或小。你持续展示并获得牌堆顶的牌，直至出现符合条件的牌。",

                    "radiance_siqi": "死气",
                    "radiance_siqi_info": "当一名角色脱离濒死后，你可以摸一张牌且直至你的下个回合结束你使用【杀】的次数上限+1；若此时为你的回合，则改为摸两张牌。",
                    "radiance_siqi_sha": "死气",
                    "radiance_hunduan": "魂断",
                    "radiance_hunduan_info": "出牌阶段开始时，你可以弃置一张黑色牌。若如此做，直至回合结束，除你以外的所有角色技能失效，不能获得牌，非濒死状态不能使用或打出牌。",
                    "radiance_hunduan_db": "魂断",
                    "radiance_yindun": "隐遁",
                    "radiance_yindun_info": "锁定技，你不会成为【南蛮入侵】、【万箭齐发】和延时锦囊的目标；当一名角色使用这些牌后，你回复1点体力。",
                    "radiance_huoshi": "祸世",
                    "radiance_huoshi_info": "出牌阶段限一次，你可以选择一个条件：1.任何；2.体力值不大于你；3.体力值不小于你；4.未因此失去过体力，令所有满足条件的角色各失去1点体力。若有角色在此结算中死亡，每有一名你摸两张牌。",
                    "radiance_jiguang": "极光",
                    "radiance_jiguang_info": "每回合限一次，你可以视为使用或打出了一张未以此法选择过的任意基本牌或者非延时类锦囊牌；以此法使用的牌无距离限制。",
                    "radiance_tianquan": "天权",
                    "radiance_tianquan_info": "结束阶段，你可以恢复一个“极光”已用牌名；若你已受伤，可以摸一张牌；若你体力值为全场唯一最低，则改为回复1点体力或摸两张牌。",
                    "radiance_jimie": "迹灭",
                    "radiance_jimie_info": "觉醒技，你的回合开始时，若“极光”没有可以使用或打出的牌，你所在的阵营获得游戏胜利。",
                    "radiance_cancun": "残存",
                    "radiance_cancun_info": "出牌阶段限一次，你可以弃置一张手牌，然后亮出牌堆顶3+2X张牌，选择并获得亮出的牌中至多三张点数不大于你弃置的牌的牌或至多三张点数不小于你弃置的牌的牌。（X为你已失去的体力值）",
                    "radiance_shangyu": "殇羽",
                    "radiance_shangyu_info": "锁定技，游戏开始时，你获得两个“羽”标记；当你回复体力后，若你没有“羽”，你获得一个“羽”。你每有一个“羽”，手牌上限+1；当你受到伤害时，你移除一个“羽”并防止此伤害，然后伤害来源随机弃置一张牌。",
                    "radiance_wenyi": "瘟疫",
                    "radiance_wenyi_info": "一名其他角色回复体力后，你记录其，并可弃置其一张牌；你的结束阶段开始时，你可以移除一名角色的记录并对其造成1点伤害，然后若其死亡，你回复1点体力并摸三张牌。你死亡时，可以令所有记录角色各受到1点无来源伤害。",
                    "radiance_yujia": "驭假",
                    "radiance_yujia_info": "当你需要使用或打出一张【杀】，【闪】或者【无懈可击】时，可以将一张牌当作之使用。若如此作，你获得一个“假”标记。有“假”标记的人角色视为拥有技能“侵蚀”。",
                    "radiance_jiayi": "嫁移",
                    "radiance_jiayi_info": "当你受到1点伤害后，可以将一个“假”标记移给伤害来源，然后摸一张牌。场上每有一名其他角色有“假”标记，你摸牌阶段额外摸一张牌，手牌上限+1。",
                    "radiance_qinshi": "侵蚀",
                    "radiance_qinshi_info": "锁定技，你的结束阶段，若场上没有角色拥有技能“驭假”，或你有至少两个“假”标记，你移除所有“假”标记，然后失去1点体力。若你拥有技能“驭假”，改为至少四个标记，且你先摸两张牌再失去体力。",
                    "radiance_moxiang": "魔香",
                    "radiance_moxiang_info": "出牌阶段限一次，你令一名其他角色选择一项：1.弃置两张手牌并回复1点体力，然后在其下一个结束阶段失去1点体力；2.失去1点体力并摸两张牌，然后在其下一个结束阶段随机弃置两张牌。",
                    "radiance_moxiang_gl": "魔香",
                    "radiance_zaichun": "再春",
                    "radiance_zaichun_info": "当你成为一名其他角色的【杀】或者非延时类锦囊牌的目标后，可以令此牌的使用者弃置你一张手牌，则你在此牌结算完毕后将手牌摸至四张。",
                    "radiance_zhuisi": "追死",
                    "radiance_zhuisi_info": "当一名角色闪避了【杀】后，你可以与该角色拼点。若你赢，此【杀】仍然命中。",
                    "radiance_nanming": "难命",
                    "radiance_nanming_info": "当你进行拼点时，若你的攻击范围大于该角色，你视为赢（点数为14）；当你拼点前，可以摸一张牌。",
                    "radiance_tingzhi": "停滞",
                    "radiance_tingzhi_info": "其他角色的回合开始时，你可以失去1点体力并选择一个花色，该角色于此回合内仅能使用或打出此花色的牌。",
                    "radiance_tingzhi_db": "停滞",
                    "radiance_sansheng": "三生",
                    "radiance_sansheng_info": "其他角色的弃牌阶段结束时，若其于此阶段失去的牌不少于三张，你可以对其造成1点伤害。",
                    "radiance_huisheng": "回生",
                    "radiance_huisheng_info": "锁定技，游戏开始时，你获得一个“生”标记；你受到伤害时，取消之并获得等量的“生”标记。你的结束阶段，你移除X-1个“生”标记，失去等量的体力并获得等量的【杀】。出牌阶段你可以额外使用X张杀。（X为你的“生”标记数）",
                    "radiance_yuanhun": "怨魂",
                    "radiance_yuanhun_info": "若你有“生”标记，你可以令你的【杀】根据花色得到下列效果：·♥：伤害+X ·♦：使用时你摸X张牌 ·♣：攻击范围+X且需额外使用X张【闪】才能抵消 ·♠：造成伤害后移除一个“生”标记。（X为你的“生”标记数）",
                    "radiance_juyan": "惧魇",
                    "radiance_juyan_info": "准备阶段，你可以令一名你选择的或两名随机的其他角色获得“惧”标记。只要你存活，一名角色每有一个“惧”标记，攻击范围-1。",
                    "radiance_zhuomu": "灼暮",
                    "radiance_zhuomu_info": "锁定技，其他角色的结束阶段，若其攻击范围内没有你，其可以选择一项：1.失去1点体力值并随机使用一张武器牌；2.令你摸一张牌。若其有“惧”，则其必须选择一项，且其可以同时执行两项并移去所有“惧”，那个场合选项2的摸牌数改为其“惧”数。",
                    "radiance_moshi": "魔视",
                    "radiance_moshi_info": "锁定技，游戏开始时，你令一半没有“视”标记的其他角色各获得一个“视”标记（向上取整）；有“视”的角色手牌对你可见。每回合限一次，当你需要使用或打出一张牌时，你可以移去一名角色的“视”，然后使用或打出其手牌中的对应牌。结束阶段，你可以令一名没有“视”的角色获得“视”。",
                    "radiance_moshi_backup": "魔视",
                    "radiance_xiongbi": "凶弼",
                    "radiance_xiongbi_info": "限定技，不是第一轮的出牌阶段，你可以弃置任意张花色各不同的手牌并选择等量的角色，这些角色分别失去2点体力并移去“视”。若有目标角色没有“视”可移去，你失去等量的体力。",

                    "radiance_jibing": "极冰",
                    "radiance_jibing_info": "准备阶段，你可以对一名体力值大于/不大于2的角色造成2/1点伤害，然后防止其受到伤害直至你的下个回合开始或你死亡。",
                    "radiance_jibing_prevent": "极冰",
                    "radiance_dongling": "冻龄",
                    "radiance_dongling_info": "每名角色限一次，其受到不小于其当前体力值的伤害时，你可以防止之。",
                    "radiance_dianxing": "点星",
                    "radiance_dianxing_info": "每轮开始时，若场上有“星”标记的角色小于你的体力上限，你可以选择一名没有“星”的角色获得“星”。有“星”的角色的准备阶段，你摸一张牌；有“星”的角色死亡时，你回复1点体力。你死亡时，移去场上所有“星”，然后你可以令一名其他角色获得“点星”。",
                    "radiance_fangzhou": "方舟",
                    "radiance_fangzhou_info": "限定技，出牌阶段，你可以亮出牌堆顶四张牌并令一名角色获得。这些牌每包含以下一种牌，你需选择一名角色，防止其受到伤害直至其下个回合开始：1.非♠牌；2.♥牌；3.装备牌；4：【闪】。",

                    "radiance_weiyong": "威勇",
                    "radiance_weiyong_info": "①锁定技，你与其他角色计算距离时-1；你使用的【杀】需要额外使用一张【闪】才能闪避。②一名其他角色的出牌阶段开始时，你可以交给其一张红色手牌，令其获得“威勇”的①效果直至回合结束。",
                    "radiance_weiyong_give": "威勇",
                    "radiance_weiyong_give_info": "锁定技，你与其他角色的距离-1，其他角色与你的距离+1；你使用的【杀】需要额外使用一张【闪】才能闪避。",
                    "radiance_yingzhi": "英知",
                    "radiance_yingzhi_info": "每轮每名角色限一次，一名角色被【杀】命中后，你可以摸一张牌；若此【杀】的使用者拥有“威勇”的效果，改为摸两张牌。",
                    "radiance_chilie": "炽烈",
                    "radiance_chilie_info": "锁定技，准备阶段，你摸X张牌；你跳过判定阶段；结束阶段，你失去1点体力。（X为你已损失的体力值+1且至少为2）你使用牌无距离限制，【杀】的次数上限+1，手牌上限增加存活的角色数。",
                    "radiance_yaoguang": "摇光",
                    "radiance_yaoguang_info": "每种牌名限一次，当你使用或打出一张基本牌后，可以摸一张牌。每回合你首次体力值变化后，重置此技能。",
                    "radiance_bengyao": "崩曜",
                    "radiance_bengyao_info": "锁定技，杀死你的角色获得以下效果：回合结束后受到1点无来源的火焰伤害。",
                    "radiance_bengyao_db": "崩曜",
                    "radiance_yingxue": "映血",
                    "radiance_yingxue_info": "你的准备阶段、当你造成或受到1点伤害后，可以选择一项：1.摸一张牌；2.获得一个“血”标记。你每有一个“血”标记，你与其他角色计算距离-1，【杀】的次数上限+1；你的结束阶段，你移除所有“血”标记并摸等量的牌。",
                    "radiance_zhoufa": "咒罚",
                    "radiance_zhoufa_info": "锁定技，当你死亡时，将一张【闪电】置于杀死你的角色的判定区内。本局游戏中，该角色的【闪电】判定必中。",
                    "radiance_zhoufa_db": "咒罚",
                    "radiance_zhanque": "斩却",
                    "radiance_zhanque_info": "当你使用【杀】指定目标后，你可以令目标选择一名其以外的角色，该角色选择是否打出一张【闪】。若不打出，目标角色受到1点对应牌为此【杀】的伤害。",
                    "radiance_xiangyun": "祥云",
                    "radiance_xiangyun_info": "当你使用或打出♥牌时，或当你成为♥牌的目标后，可以摸一张牌；你的♥牌不计入手牌上限。",
                    "radiance_suping": "肃平",
                    "radiance_suping_info": "出牌阶段开始时，你可以与一名其他角色拼点。若你赢，直至回合结束将其所有手牌移出游戏，其非锁定技失效，你与其计算距离为1，【杀】的次数上限+1，然后若你不为因此效果获得的“肃平”，你可以令一名其他角色获得“肃平”直至该角色回合结束；若你没赢，本回合你不能对其使用牌。",
                    "radiance_suping_db": "肃平",
                    "radiance_suping_give": "肃平",
                    "radiance_xiaohu": "虓虎",
                    "radiance_xiaohu_info": "当两名角色拼点的结果亮出后，若你未翻面，你可以翻面并选择其中一名角色，其视为拼点赢（点数为15），然后你获得双方的拼点牌并从牌堆获得两张点数位于两张拼点牌原本点数之间（闭区间）的牌。",
                    "radiance_baiyi": "百艺",
                    "radiance_baiyi_info": "出牌阶段限一次，你可以弃置任意张手牌并令一名其他角色选择一项：1.弃置你弃牌数+1张牌；2.受到1点伤害，然后你摸等量的牌。",
                    "radiance_fengxing": "风行",
                    "radiance_fengxing_info": "当你成为一张【杀】的目标时，你可以失去1点体力取消之，然后你亮出牌堆顶的两张牌并令此牌的使用者选择一项：1.弃置一张点数在这两张牌的点数所构成的闭区间之内的手牌并令你获得这两张牌；2.你回复1点体力。",
                    "radiance_wanxiang": "万象",
                    "radiance_wanxiang_info": "出牌阶段开始时，你可以与一名其他角色拼点。若你赢，你收回拼点牌并视为使用任意一张非延时类锦囊牌（无距离限制）；若你没赢，你获得对方的拼点牌，不能使用锦囊牌，锦囊牌不计入手牌上限，直至回合结束。",
                    "radiance_wanxiang_db": "万象",
                    "radiance_qiongjiu": "穷究",
                    "radiance_qiongjiu_info": "当你成为其他角色的【杀】或非延时类的锦囊牌的目标后，你可以失去1点体力，令该牌对你无效。然后若你没有牌，摸一张牌；否则你可以将一张牌置于弃牌堆并从弃牌堆中获得一张点数为该牌倍数或因数的牌，且你可以改为获得两种牌各一张，然后不能再以此技能获得牌直至你的回合开始。",
                    "radiance_shuanghun": "双魂",
                    "radiance_shuanghun_info": "锁定技，准备阶段你摸X张牌，你的手牌上限基数为X。（X为你的手牌数且至少为2）当你获得了牌后若你的手牌数大于十六张，你弃置八张手牌。你于你的出牌阶段自由时点累计使用过第二/四/八/十六张牌后，需弃置一张手牌/横置/翻面/失去“双魂”并获得“显圣”。",
                    "radiance_xiansheng": "显圣",
                    "radiance_xiansheng_info": "锁定技，你为来源的伤害、回复、摸牌及你的手牌上限数值翻倍。",
                    "radiance_mizong": "迷踪",
                    "radiance_mizong_info": "回合开始时，你可以进行一次判定，且你可以打出一张牌代替判定牌。若你以此法判定过四种花色，你加2点体力上限，回复2点体力并失去“迷踪”；否则直至你的下个回合开始，你不能成为其他角色该判定花色牌的目标，你不能对其他角色使用该花色的牌。",
                    "radiance_zhouyan": "咒眼",
                    "radiance_zhouyan_info": "出牌阶段限一次，你可以选择一名有手牌的其他角色展示其手牌，然后根据其有的基本牌选择一项：·杀：获得这些【杀】，本阶段你可以额外使用等量的【杀】；·闪：视为对其使用一张不能被【闪】响应的【杀】；·桃或酒：视为对其使用一张伤害+1的【杀】。若其没有基本牌，此技能本阶段改为限两次，但不能对同一目标使用。",
                    "radiance_lingjue": "灵觉",
                    "radiance_lingjue_info": "你的回合外，当你使用或打出一张【闪】/非【闪】牌后，你可以令一名手牌数不大于体力值的角色获得一张【杀】/【闪】；若该角色不为你，你摸一张牌。",

                    "radiance_shiren": "失刃",
                    "radiance_shiren_info": "出牌阶段限一次，你可以对一名攻击范围内的角色造成1点伤害。若如此做，直至你的下一个回合开始，你的所有【闪】均视为【杀】，你使用【杀】无距离限制。",
                    "radiance_shiren_db": "失刃",
                    "radiance_chenji": "沉寂",
                    "radiance_chenji_info": "出牌阶段，你可以弃置一张黑色手牌，然后选择一名角色，令其获得一个“沉寂”标记。有“沉寂”标记的角色所有技能失效，每个其的回合结束后移除一个“沉寂”标记。你于一个回合内以此法弃置的牌花色需相同。一名角色死亡时，其每有一个“沉寂”，你摸三张牌。",
                    "radiance_chenji_disable": "沉寂",
                    "radiance_rongbi": "熔壁",
                    "radiance_rongbi_info": "每轮你不限次数，每名其他角色限一次，当一名角色成为【杀】的目标后，你可以将一张手牌置于牌堆顶，然后令该角色装备牌堆中的一张其装备区内没有对应类型的装备牌；然后根据此装备的类型：·武器：你对【杀】的使用者造成1点伤害；·坐骑：目标与你各摸一张牌；·其他类型或牌堆中没有能装备的牌：此【杀】对目标无效。",
                    "radiance_chunzhu": "春祝",
                    "radiance_chunzhu_info": "摸牌阶段，你可以额外摸等同于场上装备了武器牌的角色数一半的牌（向上取整）；场上每有一名角色装备了防具牌，你的手牌上限+1。",

                    "radiance_zhaoyao": "招摇",
                    "radiance_zhaoyao_info": "出牌阶段开始前，你可以摸至多三张牌。然后若你的手牌为全场唯一最多，你需选择一项：1.失去1点体力；2.此阶段只有一个自由时点。",
                    "radiance_jianshang": "奸商",
                    "radiance_jianshang_info": "弃牌阶段结束时，你可以选择一名其他角色和你于此阶段的任意张位于弃牌堆的弃牌，该角色选择一项：1.将等量的手牌交给你然后获得你选择的牌；2.失去1点体力，然后获得你本阶段弃置的其他位于弃牌堆的牌。",
                    "radiance_baoji": "暴击",
                    "radiance_baoji_info": "当你使用【杀】或【决斗】造成伤害时，可以声明一个颜色并进行一次判定。若判定结果的颜色与你声明的相同，或不同的场合你选择失去1点体力，则此伤害+1。",
                    "radiance_jiabei": "加倍",
                    "radiance_jiabei_info": "当你要因为摸牌而获得牌前，可以声明一个颜色或花色。若这次你将要获得的牌中有此颜色/花色，你额外摸一/两张牌。",

                    "radiance_wenyu": "温愈",
                    "radiance_wenyu_info": "出牌阶段，你可以选择一名已受伤的角色并弃置X张牌（X基础值为2，至少弃置一张，至多弃置四张），令该角色回复1点体力。然后你进行一次判定。若不为♥，该角色的X值+1；若为黑色，此技能本阶段失效。一名角色濒死时，其X值-1。",
                    "radiance_piaoling": "飘零",
                    "radiance_piaoling_info": "当你进行判定后，摸一张牌；若结果为♠，改为摸三张牌。",
                    "radiance_zaowu": "造物",
                    "radiance_zaowu_info": "出牌阶段开始时，你可以选择一种花色，则此阶段你可以将一张手牌当作【无中生有】使用。若你以此法使用的牌花色不为选择的花色或点数小于本阶段已以此法使用过的牌，本阶段不能再亦此法使用牌。",
                    "radiance_sanyuan": "三元",
                    "radiance_sanyuan_info": "你使用无属性【杀】时，可以为其赋予属性；你使用原本有属性的【杀】时，无距离、次数限制且不计入使用次数。若你没有防具，防止你受到属性伤害。",
                    "radiance_yunjian": "云剑",
                    "radiance_yunjian_info": "你可以将一张非基本牌当作【杀】使用或打出。以此法使用的【杀】无距离、次数限制且不计入使用次数；你以此法使用了牌后，直至回合结束你的攻击范围无限。",
                    "radiance_yunjian_af": "云剑",
                    "radiance_leiyin": "雷引",
                    "radiance_leiyin_info": "出牌阶段结束时，若你本阶段造成伤害的次数小于你本阶段使用过的伤害牌数，你可以选择一项：1.对一名其他角色造成1点雷电伤害；2.弃置至多X张手牌并对一名其他角色造成等量的雷电伤害。（X为那个差值且至多为3）若该角色因此死亡，你可以额外进行一个摸牌或出牌阶段。",

                    "radiance_yuanluo": "渊落",
                    "radiance_yuanluo_info": "出牌阶段限一次，你可以选择一项令其他角色执行：1.失去1点体力，然后摸X张牌；2.弃置X张牌，然后回复1点体力。（X为其已损失的体力值）若你的选择与上一次发动时的选择不同，你可以令其反转操作牌与体力的顺序。",
                    "radiance_ximing": "系命",
                    "radiance_ximing_info": "每轮每名角色限一次，当一名角色受到伤害或在其的回合外失去牌后，若其体力为全场最低，你可以摸两张牌再交给其两张牌。",
                    "radiance_shuangbi": "双壁",
                    "radiance_shuangbi_info": "转换技，当你使用伤害牌指定一名其他角色为目标后，你可以：·阴：令目标角色非锁定技失效直至回合结束且其不能使用或打出牌响应此牌；·阳：摸一张牌。",
                    "radiance_leiren": "雷刃",
                    "radiance_leiren_info": "当你脱离濒死状态后，你可以对当前回合角色造成1点雷电伤害。你的攻击范围+X，若X：≥ 1：处于摸牌阶段的摸牌数均+1；≥ 2：手牌上限与【杀】的次数上限+1；≥ 3：将≥1项的触发时机改为任意摸牌时。（X为你已失去的体力值）",
                    "radiance_senbao": "森宝",
                    "radiance_senbao_info": "锁定技，游戏开始时，你将牌堆顶四张牌置于武将牌上，称为“宝”；你每有一个“宝”，攻击范围+1。当你使用【杀】造成伤害/受到【杀】造成的伤害后，你可以将受伤角色/来源的一张牌当做“宝”置于武将牌上。",
                    "radiance_runze": "润泽",
                    "radiance_runze_info": "摸牌阶段开始时，你可以将一张“宝”置于弃牌堆，然后此阶段摸牌数+2；一名角色的弃牌阶段开始前，若其需弃牌，你可以获得一张“宝”并令其跳过弃牌阶段。",

                    "radiance_jiaoyan": "娇艳",
                    "radiance_jiaoyan_info": "出牌阶段，若你本阶段没有造成过伤害，你可以选择一名其他角色，交给其一张伤害牌，然后其选择一项：1.对另一名你选择的角色使用一张【杀】（无距离限制，伤害来源视为你），然后你可以观看并获得其一张非伤害牌；2.将手牌补至四张（至少摸一张）并翻面。结束阶段，若你本回合使用“娇艳”的次数大于1，你失去1点体力。",
                    "radiance_tianhua": "天华",
                    "radiance_tianhua_info": "锁定技，游戏开始时/你失去体力后，你获得两个/等量“华”标记。防止你每回合受到的第一次由其他角色的牌造成的伤害，然后你失去1点体力并重置。你与其他角色的距离-X，其他角色与你的距离+X，你的手牌上限+X；回合结束时，你摸X张牌，然后移去一个“华”。（X为“华”标记数）",
                    "radiance_rumeng": "入梦",
                    "radiance_rumeng_info": "你可以跳过你的判定和摸牌阶段或跳过你的出牌和弃牌阶段，则你回复1点体力，然后可以观看一名其他角色的手牌，并可以选择本回合未执行的一项进行：1.获得其中一张【闪】；2.选择其中一张【杀】令其对你选择的另一名角色使用。",
                    "radiance_manyue": "满月",
                    "radiance_manyue_info": "结束阶段，若你未受伤，你可以视为对一名其他角色使用了一张伤害牌。",
                    "radiance_diewu": "蝶舞",
                    "radiance_diewu_info": "一名男性角色的出牌阶段开始时，你可以摸一张牌，然后其本回合【杀】的次数上限+1，手牌上限-1。",
                    "radiance_diewu_af": "蝶舞",
                    "radiance_fengying": "风影",
                    "radiance_fengying_info": "准备阶段或当你受到伤害后，若你手牌数多于体力值，你可以将超出的部分交给一名其他角色或弃置，然后回复1点体力。若你未恢复体力，你可以切换“蝶舞”的性别选项。",

                    "radiance_danda": "荆棘",
                    "radiance_danda_info": "你的回合外，当一名角色成为【杀】的目标时，若你也在来源的攻击范围内，你可以从手牌打出一张基本牌，令来源选择一项：1.打出一张【闪】并令此【杀】对目标角色无效；2.根据你打出的牌执行后续效果：【杀】：来源受到2点冰属性伤害；【闪】：你获得来源一张牌和此【杀】的实体牌；其他：你与目标角色各摸两张牌。",
                    "radiance_yidai": "依代",
                    "radiance_yidai_info": "锁定技，你的攻击范围-1，但不会因为此效果攻击范围变为0。杀死你的角色获得“依代”。",
                    "radiance_renlin": "刃林",
                    "radiance_renlin_info": "游戏开始时，你可以随机使用一张武器牌。其他角色的武器牌进入弃牌堆后，你可以获得之。你的武器牌不计入手牌上限。限定技，当一名角色进入濒死状态时，你可以重铸任意张武器牌，然后该角色回复等量的体力。",
                    "radiance_jianxing": "剑醒",
                    "radiance_jianxing_info": "出牌阶段每项各限一次，你选择一张武器牌：1.弃置之并对一名其他角色造成1点伤害；2.弃置之并令一名角色回复1点体力；3.令一名没有装备武器牌的其他角色装备之；4.将之置于牌堆顶，然后令一名角色复原武将牌。",
                    "radiance_tenglong": "腾龙",
                    "radiance_tenglong_info": "其他角色的出牌阶段开始时，你可以对该角色/其上家或下家使用一张【杀】。若如此做，你获得一张基本牌/摸一张牌，且直至回合结束其他角色与你计算距离+1。你使用【杀】时无视目标角色的防具。",
                    "radiance_tenglong_af": "腾龙",
                    "radiance_tenglong_sha_db": "腾龙",
                    "radiance_tenglongx": "腾龙",
                    "radiance_tenglongx_info": "其他角色的出牌阶段开始时，你可以对该角色或其上下家使用一张【杀】。若如此做，直至回合结束其他角色与你计算距离时+1。你使用【杀】时，所有其他角色的防具和非锁定技全部失效直至此【杀】结算完毕，若为该回合第一次则你再获得一张基本牌。",
                    "radiance_juesha": "绝杀",
                    "radiance_juesha_info": "限定技，一名角色濒死时，你可以摸三张牌，令该角色需要的回复量+1，然后你修改“腾龙”。",

                    "radiance_gongfa": "共伐",
                    "radiance_gongfa_info": "锁定技，当一名角色使用【杀】指定目标时，若你没有装备防具，在其攻击范围内且你不是此【杀】的目标，你摸一张牌并额外成为此【杀】的目标。",
                    "radiance_baohui": "暴毁",
                    "radiance_baohui_info": "当一张♣【杀】结算完毕后，若你是目标之一，你可以获得之；你使用♣【杀】没有次数限制。",
                    "radiance_pangran": "庞然",
                    "radiance_pangran_info": "锁定技，你不能使用【闪】。出牌阶段，你可以弃置任意数量的【闪】，然后摸等量的牌。",
                    "radiance_mengdu": "猛毒",
                    "radiance_mengdu_info": "出牌阶段限一次，你可以令一名有手牌的其他角色展示所有手牌。若其有【杀】或【闪】，其需选择一项：1.弃置所有【杀】和【闪】；2.失去1点体力；若其没有，你选择其一张手牌弃置，若此牌为基本牌你摸一张牌。",
                    "radiance_weihao": "危号",
                    "radiance_weihao_info": "锁定技，你使用【杀】的次数上限+1。你每回合使用的第一张【杀】指定所有其他角色为目标；此【杀】命中后，你摸一张牌；此【杀】结算完毕后，若造成过伤害，你失去1点体力。",
                    "radiance_baoyan": "爆炎",
                    "radiance_baoyan_info": "锁定技，每回合每名角色限一次，你对体力值小于你的角色造成的伤害时失去1点体力，该伤害+1。你造成大于1点的伤害后，可以摸X张牌。（X为此伤害-1）",
                    "radiance_shihun": "噬魂",
                    "radiance_shihun_info": "一名角色死亡后，若你对其造成过伤害，你可以回复1体力；若你没对其造成过伤害，你可以减1体力上限并摸两张牌。",
                    "radiance_pojian": "破茧",
                    "radiance_pojian_info": "游戏开始时，你从牌堆中装备不同类型的装备各一张。准备阶段或当你受到伤害后，你可以将装备区内的一张牌置于武将牌上并废除其对应的装备栏。（两个坐骑栏算作一栏）",
                    "radiance_pojianx": "破茧·改",
                    "radiance_pojianx_info": "游戏开始时，你从牌堆中装备不同类型的装备各一张。结束阶段或当你受到伤害后，你可以废除装备区内的一个装备栏。（两个坐骑栏算作一栏）",
                    "radiance_huangli": "煌丽",
                    "radiance_huangli_info": "锁定技，你每废除一个装备栏，摸牌阶段额外摸一张牌。（两个坐骑栏算作一栏）若你的武器栏被废除，你使用【杀】的次数上限+2；若你的防具栏被废除，你的手牌上限+2；若你的坐骑栏废除，你不能成为延时类锦囊的合法目标。",
                    "radiance_zaixin": "再新",
                    "radiance_zaixin_info": "限定技，出牌阶段或当你濒死时，你可以恢复你所有装备栏，依次装备所有“破茧”牌，然后你回复X点体力，最后修改“破茧”。（X为你空置的装备栏数）",
                    "radiance_xiaoyue": "啸月",
                    "radiance_xiaoyue_info": "锁定技，准备阶段，你摸三张牌并翻面；你的武将牌由背面翻至正面后，可以令一名其他横置或翻面的角色选择摸两张牌或回复1点体力。",
                    "radiance_tianlang": "天狼",
                    "radiance_tianlang_info": "每回合每项各限一次，若你的武将牌背面朝上，：1.对其他角色造成伤害时可以弃置一张手牌，令此伤害+1；2.受到伤害时可以弃置一张手牌并令此伤害+1，然后翻至正面。",
                    "radiance_moju": "殁局",
                    "radiance_moju_info": "当你成为其他角色的伤害牌的目标后，你可以弃置一张装备牌，令此牌对你无效，然后你可以对此牌的使用者或装备区内有同色牌的一名其他角色造成1点伤害。当你不因此法失去一张装备区内的牌后，可以摸一张牌。",
                    "radiance_tizi": "提子",
                    "radiance_tizi_info": "摸牌阶段，你可以放弃摸牌，改为亮出牌堆顶的两张牌。你获得其中一种颜色的所有牌，然后可以从场上弃置至多两张同色牌或获得另一种颜色的一张牌。",

                    "radiance_caishe": "裁设",
                    "radiance_caishe_info": "游戏开始时、场上有角色死亡后、你的回合开始前和结束后，你可以选择一名其他角色并选择该角色的一个非觉醒技、使命技、主公技的技能获得（同时最多拥有一个）。只要你以此法获得了技能，原本拥有者的那个技能便失效。原本拥有者死亡的场合，你需重新进行选择。",
                    "radiance_caishe_disable": "裁设",
                    "radiance_jixing": "极星",
                    "radiance_jixing_info": "锁定技，牌堆顶的七张牌对你可见；你不会被翻面或受到无对应非转换实体牌的伤害。",
                    "radiance_shenyi": "神意",
                    "radiance_shenyi_info": "回合开始时，你可以选择一名角色，记录其当前体力值并选择一项：1.将其体力值调整为1，回合结束时将其调整为记录的体力值；2.将其体力值调整为与你相同，其下个回合结束时将其调整为记录的体力值；3.令其体力值调整为其体力上限，其下个回合结束时将体力值调整为一半（向上取整）；然后直至回合结束你对其使用牌无距离限制。（此技能的体力值调整不视为体力值变化）",
                    "radiance_shenyi_af": "神意",
                    "radiance_shenyi_1": "神意",
                    "radiance_shenyi_2": "神意",
                    "radiance_shenyi_3": "神意",
                    "radiance_jiyuan": "纪元",
                    "radiance_jiyuan_info": "锁定技，每轮开始时、一名角色进入濒死时或一名角色的体力值一次性变化至少2点后，你获得一个“纪”标记，上限为4。不为以此法获得的你的回合结束时，若“纪”的数量达到上限，你移去所有“纪”并执行一个额外的回合。你摸牌阶段的额定摸牌数增加“纪”的一半（向上取整）。",
                    "radiance_mengmei": "梦魅",
                    "radiance_mengmei_info": "每轮每名角色限一次，当一名其他角色在摸牌阶段以外获得牌后，若其手牌数与体力值均大于你，你可以令其交给你一张手牌。",
                    "radiance_yekong": "夜空",
                    "radiance_yekong_info": "你的准备阶段、当你受到伤害或失去体力后，你可以摸三张牌，然后将至少两张牌置于牌堆顶、牌堆底或弃置。",
                    "radiance_weiyu": "未域",
                    "radiance_weiyu_info": "准备阶段，你可以进行两次判定，然后根据每一个判定结果以任意顺序执行的对应一项：·♠：弃置至多一张牌并对等量其他角色造成1点伤害；·♥：令至多一名其他角色本回合技能失效，不能使用或打出牌；·♦：摸一张牌；·♣：若两次均为♣，执行全部另外三项，否则令另一项执行时的“一”改为“三”。",
                    "radiance_weiyu_block": "未域",
                    "radiance_yueqian": "跃迁",
                    "radiance_yueqian_info": "每回合限一次，回合外当你成为其他角色一张牌的目标时，若你在其攻击范围内，你可以取消之，然后不能再使用或打出牌直至回合结束。",
                },
            },
            intro: "原创世界观，目前人设剧情只有一个大概也没有下笔，因为作者高中语文不及格。</br>卡图大部分都是各种游戏里的，不妨数一数你认识其中多少个？</br>交流群号815451309，关于武将强度过强/过弱、弹窗、效果与描述不符合或其他问题请加群反馈，亦欢迎对代码、武将设计有兴趣的玩家。",
            author: "水天一色",
            diskURL: "",
            forumURL: "",
            version: "1.2.1a",
        },
        files: {
            "character": [],
            "card": [],
            "skill": []
        }
    }
})